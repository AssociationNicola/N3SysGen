
function kcpsm6_config(this_block)

  % Revision History:
  %
  %   09-Dec-2013  (12:09 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     C:\SysGenWork\Picoblaze\kcpsm6_CE_256_4k.vhd
  %
  %

  this_block.setTopLevelLanguage('VHDL');

  this_block.setEntityName('kcpsm6');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('instruction');
  this_block.addSimulinkInport('in_port');
  this_block.addSimulinkInport('interrupt');
  this_block.addSimulinkInport('sleep');
  this_block.addSimulinkInport('reset');

  this_block.addSimulinkOutport('address');
  this_block.addSimulinkOutport('bram_enable');
  this_block.addSimulinkOutport('out_port');
  this_block.addSimulinkOutport('port_id');
  this_block.addSimulinkOutport('write_strobe');
  this_block.addSimulinkOutport('k_write_strobe');
  this_block.addSimulinkOutport('read_strobe');
  this_block.addSimulinkOutport('interrupt_ack');

  address_port = this_block.port('address');
  address_port.setType('UFix_12_0');
  bram_enable_port = this_block.port('bram_enable');
  bram_enable_port.setType('UFix_1_0');
  bram_enable_port.useHDLVector(false);
  out_port_port = this_block.port('out_port');
  out_port_port.setType('UFix_8_0');
  port_id_port = this_block.port('port_id');
  port_id_port.setType('UFix_8_0');
  write_strobe_port = this_block.port('write_strobe');
  write_strobe_port.setType('UFix_1_0');
  write_strobe_port.useHDLVector(false);
  k_write_strobe_port = this_block.port('k_write_strobe');
  k_write_strobe_port.setType('UFix_1_0');
  k_write_strobe_port.useHDLVector(false);
  read_strobe_port = this_block.port('read_strobe');
  read_strobe_port.setType('UFix_1_0');
  read_strobe_port.useHDLVector(false);
  interrupt_ack_port = this_block.port('interrupt_ack');
  interrupt_ack_port.setType('UFix_1_0');
  interrupt_ack_port.useHDLVector(false);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('instruction').width ~= 18);
      this_block.setError('Input data type for port "instruction" must have width=18.');
    end

    if (this_block.port('in_port').width ~= 8);
      this_block.setError('Input data type for port "in_port" must have width=8.');
    end

    if (this_block.port('interrupt').width ~= 1);
      this_block.setError('Input data type for port "interrupt" must have width=1.');
    end

    this_block.port('interrupt').useHDLVector(false);

    if (this_block.port('sleep').width ~= 1);
      this_block.setError('Input data type for port "sleep" must have width=1.');
    end

    this_block.port('sleep').useHDLVector(false);

    if (this_block.port('reset').width ~= 1);
      this_block.setError('Input data type for port "reset" must have width=1.');
    end

    this_block.port('reset').useHDLVector(false);

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk','ce')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);

  % (!) Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  this_block.addGeneric('hwbuild','std_logic_vector ( 7 downto 0 )','X"00"');
  this_block.addGeneric('interrupt_vector','std_logic_vector ( 11 downto 0 )','X"FFF"');
  this_block.addGeneric('scratch_pad_memory_size','integer','256');

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('../N3workingG/Picoblaze/kcpsm6_CE_256_4k.vhd');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

