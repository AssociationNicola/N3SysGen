KCPSM6 Assembler log file for program 'C:\Users\gnaylor\Dropbox\N3workingG\TE0722Rebuild\BluetoothMainShort.psm'.
Generated by KCPSM6 version v2.63
Ken Chapman - Xilinx Ltd - 20th December 2013

Assembly datestamp: 13 Dec 2015
Assembly timestamp: 17:42:42

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 3E9 hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 1002
Memory locations available: 3094


Assembly listing

 Addr Code                                   Instruction

 000                                         ; ;;
 000                                         ; ;; BT Pico Code for picoblaze
 000                                         ; ;;
 000                                         ; ;; BT PicoBlaze download to handle connection to a single headset.
 000                                         ; ;;
 000                                         ; ;; Created March 2012, (c) Nicola Project, Graham Naylor, Pete Allwright
 000                                         ; ;;
 000                                         ; ;;
 000                                         ; ;; Version History
 000                                         ; ;; ===============
 000                                         ; ;;
 000                                         ; ;; April 2012    PA    Original version for single headset
 000                                         ; ;;                     This module supports upto 3 connections in Software
 000                                         ; ;;                     Supports HFP and HSP headsets
 000                                         ; ;;
 000                                         ; ;; April 2014    PA    Re-worked following testing.
 000                                         ; ;;                     New compile and build procedure - separate headers etc.
 000                                         ; ;;                     Multiple PIN codes.
 000                                         ;
 000                                         ;
 000                                         ;
 000                                         ; ;; Up to 3 connections can be made. Presently only one can be active at once.
 000                                         ; ;; If a headset transmits then it will receive the reply audio stream.
 000                                         ; ;;
 000                                         ; ;; Messages:
 000                                         ; ;;
 000                                         ; ;;
 000                                         ; ;; TRANSMIT_ON      - tell User Pico we are transmitting
 000                                         ; ;; TRANSMIT_OFF     - tell User Pico we have stopped transmitting
 000                                         ; ;;
 000                                         ; ;; RECEIVE_ON      - temp from User - indicates N3 receiving (carrier detect)
 000                                         ; ;; RECEIVE_OFF     - temp from User - indicates N3 not now receiving
 000                                         ; ;;
 000                                         CONSTANT TRANSMIT_ON, 14                    ; BT -> User and User -> BT
 000                                         CONSTANT TRANSMIT_OFF, 15                   ; BT -> User and User -> BT
 000                                         ;GenerateCode        MEM       "BluetoothMain.mem"
 000                                         ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000                                         ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000                                         ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000                                         ;
 000                                         ; CopyMACFromLink.
 000                                         ;
 000                                         ; copy currently selected MAC to scratchpad
 000                                         ;
 000                                         ;  s6 = address to which the MAC address should be copied
 000                                         ;
 000                                         CONSTANT FIRST_CHANNEL, 1'd
 000                                         CONSTANT SECOND_CHANNEL, 2'd
 000                                         CONSTANT THIRD_CHANNEL, 3'd
 000                                         CONSTANT MAC_ADDRESS_LENGTH, 18'd
 000                                         ; input registers
 000                                         CONSTANT USER_RX_REG, 00                    ; Receive characters from main pico
 000                                         CONSTANT RAM_DataIn_LSB, 01                 ; User Ram data is in last 256 16bit words
 000                                         CONSTANT RAM_DataIn_MSB, 02
 000                                         CONSTANT BT_RX_REG, 03
 000                                         CONSTANT BT_STATUS_REG, 04
 000                                         ; bit offsets
 000                                         CONSTANT BT_RX_DATA, 01                     ; character received from Blue Giga
 000                                         CONSTANT BT_TX_FULL, 02                     ; fifo to Blue Giga half full
 000                                         CONSTANT BT_RTS, 04                         ; not used presently - should be masked
 000                                         CONSTANT USER_TX_FULL, 08
 000                                         ; output registers
 000                                         CONSTANT BT_TX_REG, 02
 000                                         CONSTANT USER_TX_REG, 03
 000                                         CONSTANT RAM_Addr_MSB, 04                   ; Address last 256 bits of program memory
 000                                         CONSTANT RAM_Addr_LSB, 05                   ; Only lower 16 bits used
 000                                         ; ;; Scratchpad Layout
 000                                         CONSTANT InquiryPeriodDelay, 0'd
 000                                         CONSTANT GlobalTimerLow, 1'd
 000                                         CONSTANT GlobalTimerMiddle, 2'd
 000                                         CONSTANT GlobalTimerUpper, 3'd
 000                                         CONSTANT InquiryPollingTimeout, 8'd
 000                                         CONSTANT TempStore, 9'd
 000                                         CONSTANT HeadsetMACAddress1, 10'd
 000                                         CONSTANT HeadsetMACAddress2, 30'd           ; HeadsetMACAddress1 + 20
 000                                         CONSTANT HeadsetMACAddress3, 50'd           ; HeadsetMACAddress2 + 20
 000                                         CONSTANT NextSlot, 70'd                     ; HeadsetMACAddress3 + 20; ends at 69
 000                                         CONSTANT BluegigaCurrentPos, 70'd
 000                                         CONSTANT ProcessBGMessage, 71'd
 000                                         CONSTANT BluegigaCharCount, 72'd
 000                                         CONSTANT BufferPointer, 73'd
 000                                         CONSTANT HFP_AG_Type, 1'd
 000                                         CONSTANT HSP_AG_Type, 2'd
 000                                         CONSTANT ComputerType, 3'd
 000                                         CONSTANT ConnectType1, 74'd
 000                                         CONSTANT ConnectType2, 75'd
 000                                         CONSTANT ConnectType3, 76'd
 000                                         CONSTANT ControlChannel1, 77'd
 000                                         CONSTANT ControlChannel2, 78'd
 000                                         CONSTANT ControlChannel3, 79'd
 000                                         CONSTANT AudioChannel1, 80'd
 000                                         CONSTANT AudioChannel2, 81'd
 000                                         CONSTANT AudioChannel3, 82'd
 000                                         CONSTANT IndexSelected, 83'd
 000                                         CONSTANT CurrentChannel, 84'd
 000                                         CONSTANT CurrentAudio, 85'd
 000                                         CONSTANT CurrentType, 86'd
 000                                         CONSTANT Transmitting, 87'd
 000                                         CONSTANT Receiving, 88'd
 000                                         CONSTANT PinCodeSelected, 89'd
 000                                         CONSTANT BluegigaInStart, 90'd              ; RESERVE  60 BluegigaInEnd ; reserve area for incoming Bluetooth message
 000                                         CONSTANT BLUEGIGA_IN_BUF_SIZE, 36'd         ; Max Bluegiga input buffer
 000                                         CONSTANT BluegigaInEnd, 126'd               ; 91 + BLUEGIGA_IN_BUF_SIZE; ends at 90 + 36 = 126  - now 127
 000                             EntryPoint: 
 000                                         ; wait for GO from User chip
 000                                         ; IN        sF, USER_RX_REG    ; Check if FIFO character present
 000                                         ; COMP      sF, 128             ; is there a character?
 000                                         ; JUMP      NC, EntryPoint      ; get byte from user
 000  01F00                                  LOAD sF, 00                                 ; value to be stored
 001  01100                                  LOAD s1, 00                                 ; store address pointer
 002                        ClearScratchpad: 
 002  2EF10                                  STORE sF, (s1)                              ; store in this scratchpad address
 003  11101                                  ADD s1, 01                                  ; next scratchpad address
 004  1D140                                  COMPARE s1, 40                              ; end of scratchpad?
 005  36002                                  JUMP NZ, 002[ClearScratchpad]               ; loop if not
 006  01F5A                                  LOAD sF, 5A[BluegigaInStart]                ; initialise circular input buffer parameters
 007  2FF46                                  STORE sF, 46[BluegigaCurrentPos]            ; ditto
 008  2FF47                                  STORE sF, 47[ProcessBGMessage]              ; ditto
 009                                         ; ;;
 009                                         ; ;; Send initial (configuration) messages to the Bluegiga
 009                                         ; ;;
 009                                     L1: 
 009  203C0                                  CALL 3C0[Delay1Second]
 00A                                         ; CALL      Delay1Second
 00A                                         ; CALL      Delay1Second
 00A                                         ; CALL      Delay1Second
 00A                                         ; CALL      Delay1Second
 00A  01300                                  LOAD s3, 00                                 ; index of startup messages
 00B                   _InitialMessagesNext: 
 00B  01E09                                  LOAD sE, 09[StartupMessages]                ; message table
 00C  01F00                                  LOAD sF, 00[StartupMessagesLower]           ; ditto 16 bit address in RAM
 00D                                         ;LOAD      sF, StartupMessages>>8; ditto 16 bit address in RAM
 00D  10E30                                  ADD sE, s3                                  ; current pair
 00E  13F00                                  ADDCY sF, 00                                ; 16 bit arithmetic
 00F  2038E                                  CALL 38E[ReadFromRAMBlock]                  ; reads from RAM address IN: sE(low), sF; RETURNS chars in sA (low) and sB (high)
 010  001A0                                  LOAD s1, sA                                 ; save it - lower byte
 011  002B0                                  LOAD s2, sB                                 ; save it - upper byte
 012  00610                                  LOAD s6, s1                                 ; copy first byte to process
 013  1D1FF                                  COMPARE s1, FF                              ; is it the end of messages
 014  3201D                                  JUMP Z, 01D[_InitialMessagesDone]           ; exit if so
 015  2021C                                  CALL 21C[SendMessageToBluegiga]             ; else send the message
 016  00620                                  LOAD s6, s2                                 ; copy second byte to process
 017  1D2FF                                  COMPARE s2, FF                              ; is it the end of messages
 018  3201D                                  JUMP Z, 01D[_InitialMessagesDone]           ; exit if so
 019  2021C                                  CALL 21C[SendMessageToBluegiga]             ; else send the message
 01A  11301                                  ADD s3, 01                                  ; next pair of initial messages
 01B  203CE                                  CALL 3CE[delay_100ms]                       ; uses sC -> sF
 01C  2200B                                  JUMP 00B[_InitialMessagesNext]              ; next
 01D                                         ; ;;
 01D                                         ; ;;   Initial configuration messages sent to Bluegiga.
 01D                                         ; ;;   Now go to Bluetooth processing mode.
 01D                                         ; ;;
 01D                   _InitialMessagesDone: 
 01D  201F6                                  CALL 1F6[ReadMessageFromBluegiga]           ; poll Bluegiga and build an incoming message
 01E  01F5A                                  LOAD sF, 5A[BluegigaInStart]                ; initialise circular input buffer parameters
 01F  2FF46                                  STORE sF, 46[BluegigaCurrentPos]            ; ditto
 020  01F00                                  LOAD sF, 00
 021  2FF48                                  STORE sF, 48[BluegigaCharCount]
 022  01F05                                  LOAD sF, 05
 023  2FF00                                  STORE sF, 00[InquiryPeriodDelay]            ; reset clocking
 024  01F06                                  LOAD sF, 06                                 ; 6 per minute so this takes 1 minutes
 025  2FF08                                  STORE sF, 08[InquiryPollingTimeout]         ; maximum attempts to connect = about 5 minutes
 026                     MainProcessingLoop: 
 026  201F6                                  CALL 1F6[ReadMessageFromBluegiga]           ; poll Bluegiga and build an incoming message
 027  30048                                  CALL Z, 048[ProcessMessageFromBluegiga]     ; Handle the completed message
 028  20044                                  CALL 044[ReadMessageFromUserPico]           ; poll User to BT FIFO and build an incoming message
 029  30047                                  CALL Z, 047[ProcessMessageFromUserPico]     ; Handle the completed message
 02A  2002C                                  CALL 02C[ProcessOneSecond]                  ; periodic functions
 02B  22026                                  JUMP 026[MainProcessingLoop]                ; loop for next cycle
 02C                       ProcessOneSecond: 
 02C  0BD01                                  FETCH sD, 01[GlobalTimerLow]
 02D  0BE02                                  FETCH sE, 02[GlobalTimerMiddle]
 02E  0BF03                                  FETCH sF, 03[GlobalTimerUpper]
 02F  11D01                                  ADD sD, 01                                  ; count up the...
 030  13E00                                  ADDCY sE, 00                                ; ... 1 second counter
 031  13F00                                  ADDCY sF, 00
 032  2FD01                                  STORE sD, 01[GlobalTimerLow]                ; store back 1 second timer
 033  2FE02                                  STORE sE, 02[GlobalTimerMiddle]
 034  2FF03                                  STORE sF, 03[GlobalTimerUpper]
 035  1DEFF                                  COMPARE sE, FF                              ; look for 1/10th second ish
 036  36043                                  JUMP NZ, 043[_GlobalTimeNOTExpired]
 037  1DDFF                                  COMPARE sD, FF                              ; look for 1/10th second ish
 038  36043                                  JUMP NZ, 043[_GlobalTimeNOTExpired]
 039  1DF0E                                  COMPARE sF, 0E                              ; gives approx 1 second tick
 03A  36043                                  JUMP NZ, 043[_GlobalTimeNOTExpired]
 03B                                         ; ;; Do 1 second approx timed functions
 03B  01A2A                                  LOAD sA, 2A["*"]                            ; debugging visiblilty
 03C  201F0                                  CALL 1F0[SendToUserPico]                    ; debugging visibility
 03D  20081                                  CALL 081[SendInquiryMessage]                ; check and send INQUIRY 5
 03E  01F00                                  LOAD sF, 00                                 ; clear sF
 03F  2FF01                                  STORE sF, 01[GlobalTimerLow]                ; restart
 040  2FF02                                  STORE sF, 02[GlobalTimerMiddle]             ; timer
 041  2FF03                                  STORE sF, 03[GlobalTimerUpper]              ; ditto
 042  25000                                  RETURN 
 043                  _GlobalTimeNOTExpired: 
 043  25000                                  RETURN 
 044                ReadMessageFromUserPico: 
 044  01F01                                  LOAD sF, 01
 045  11F01                                  ADD sF, 01
 046  25000                                  RETURN 
 047             ProcessMessageFromUserPico: 
 047  25000                                  RETURN 
 048                                         ; ;;============================================================================
 048                                         ; ;;============================================================================
 048                                         ; ;;============================================================================
 048                                         ; ;; Handle a message from the Bluegiga
 048                                         ; ;;
 048                                         ; ;;
 048             ProcessMessageFromBluegiga: 
 048  01E5A                                  LOAD sE, 5A[BluegigaInStart]                ; start of in message
 049  2FE47                                  STORE sE, 47[ProcessBGMessage]              ; save current message pointer
 04A                                         ; LOAD      sC, BluegigaInStart ; beginning of message
 04A                                         ; LOAD      s6, ReadyMsg        ; is this a READY. reply
 04A                                         ; CALL      MatchMessageToString
 04A                                         ; JUMP      Z, HandleReadyMsg ; process READY message
 04A  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 04B  01647                                  LOAD s6, 47[InquiryReply]                   ; is this a Inquiry reply
 04C  20371                                  CALL 371[MatchMessageToString]
 04D  32092                                  JUMP Z, 092[HandleInquiryReply]             ; jump to process INQUIRY reply
 04E  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 04F  01658                                  LOAD s6, 58[PairReply]                      ; is this a PAIR message
 050  20371                                  CALL 371[MatchMessageToString]
 051  320D7                                  JUMP Z, 0D7[HandlePairReply]                ; jump to process PAIR message
 052  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 053  0164F                                  LOAD s6, 4F[CallReplyMsg]                   ; is this a CALL reply
 054  20371                                  CALL 371[MatchMessageToString]
 055  32154                                  JUMP Z, 154[HandleCallMsgReply]             ; jump to process CALL reply
 056  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 057  01650                                  LOAD s6, 50[RingMsg]                        ; is this a RING reply
 058  20371                                  CALL 371[MatchMessageToString]
 059  32105                                  JUMP Z, 105[HandleRingMsgReply]             ; jump to process RING reply
 05A  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 05B  0164B                                  LOAD s6, 4B[ConnectHSPMsg]                  ; is this a CONNECT reply
 05C  20371                                  CALL 371[MatchMessageToString]
 05D  32179                                  JUMP Z, 179[HandleConnectHSPMsgReply]       ; jump to process CONNECT reply
 05E  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 05F  0164D                                  LOAD s6, 4D[ConnectSCOMsg]                  ; is this a CONNECT reply
 060  20371                                  CALL 371[MatchMessageToString]
 061                                         ; JUMP      Z, HandleConnectHSPMsgReply  ; jump to process CONNECT reply
 061  32076                                  JUMP Z, 076[_ProcMessClean]                 ; jump to ignore
 062  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 063  01649                                  LOAD s6, 49[ConnectMsg]                     ; is this a CONNECT reply
 064  20371                                  CALL 371[MatchMessageToString]
 065  32180                                  JUMP Z, 180[HandleConnectMsgReply]          ; jump to process CONNECT reply
 066  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 067  01651                                  LOAD s6, 51[HFP_AG_Ready_Msg]               ; is this a HFP-AG ready
 068  20371                                  CALL 371[MatchMessageToString]
 069  321A4                                  JUMP Z, 1A4[Handle_HFP_AG_Ready_MsgReply]   ; jump to process HFP-AG reply
 06A  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 06B  01656                                  LOAD s6, 56[HSP_Button_Msg]                 ; is this a HSP Button pressed
 06C  20371                                  CALL 371[MatchMessageToString]
 06D  321A7                                  JUMP Z, 1A7[Handle_HSP_Button_Msg]          ; jump to process HFP-AG Dial Last
 06E  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 06F  01653                                  LOAD s6, 53[HFP_AG_Dial_Last]               ; is this a HFP-AG Dial Last
 070  20371                                  CALL 371[MatchMessageToString]
 071  321B7                                  JUMP Z, 1B7[Handle_HFP_AG_DialLast_Msg]     ; jump to process HFP-AG Dial Last
 072  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 073  0165C                                  LOAD s6, 5C[NoCarrierMsg]                   ; is this a No Carrier msg - Blue Connection gone
 074  20371                                  CALL 371[MatchMessageToString]
 075  321CC                                  JUMP Z, 1CC[Handle_NoCarrierMsg]            ; jump to process HFP-AG Dial Last
 076                                         ; LOAD      sC, BluegigaInStart ; beginning of message
 076                                         ; LOAD      s6, HFP_AG_NoCarrierMsg       ; is this a HFP-AG No Carrier
 076                                         ; CALL      MatchMessageToString
 076                                         ; JUMP      Z, Handle_HFPAG_NoCarrierMsg  ; jump to process HFP-AG Dial Last
 076                                         ; LOAD      sA, 'e'   ; debug
 076                                         ; CALL      SendToUserPico
 076                                         ; LOAD      sA, 'r'
 076                                         ; CALL      SendToUserPico
 076                                         ; ;; Clean incoming BT buffer and prepare for the next BT message
 076                         _ProcMessClean: 
 076  203A0                                  CALL 3A0[Send_CR_LF_ToUser]                 ; debug
 077  0165A                                  LOAD s6, 5A[BluegigaInStart]                ; Bluegiga buffer
 078  01700                                  LOAD s7, 00                                 ; 0 value
 079                     _ProcMessCleanLoop: 
 079  2E760                                  STORE s7, (s6)                              ; store 0 in Bluegiga buffer location
 07A  11601                                  ADD s6, 01                                  ; next buffer location
 07B  1D67E                                  COMPARE s6, 7E[BluegigaInEnd]               ; end of buffer ?
 07C  36079                                  JUMP NZ, 079[_ProcMessCleanLoop]            ; loop if not
 07D  2F748                                  STORE s7, 48[BluegigaCharCount]             ; and store in the characters received count
 07E  01F5A                                  LOAD sF, 5A[BluegigaInStart]                ; reset current buffer position
 07F  2FF46                                  STORE sF, 46[BluegigaCurrentPos]            ; reset current buffer position
 080  25000                                  RETURN 
 081                     SendInquiryMessage: 
 081  0BF00                                  FETCH sF, 00[InquiryPeriodDelay]            ; delay counter
 082  11F00                                  ADD sF, 00                                  ; test if active
 083  31000                                  RETURN Z                                    ; return if INQUIRY messages inactive
 084  19F01                                  SUB sF, 01                                  ; count it
 085  2FF00                                  STORE sF, 00[InquiryPeriodDelay]            ; and remember it
 086  1DF00                                  COMPARE sF, 00                              ; every 20 seconds approx
 087  35000                                  RETURN NZ                                   ; not time to send yet
 088  01633                                  LOAD s6, 33[InquiryMsg]                     ; inquiry msg number
 089  2021C                                  CALL 21C[SendMessageToBluegiga]             ; send the message
 08A                                         ;FETCH     sF, InquiryPollingTimeout
 08A                                         ; LOAD      sA, sF    ; debug
 08A                                         ; CALL      ByteToCharsToUser
 08A                                         ;                     LOAD      sA, '.'
 08A                                         ;                    CALL      SendToUserPico
 08A  0BF08                                  FETCH sF, 08[InquiryPollingTimeout]
 08B  1DF00                                  COMPARE sF, 00                              ; test if active
 08C  31000                                  RETURN Z                                    ; return if INQUIRY messages inactive (timed out)
 08D  19F01                                  SUB sF, 01                                  ; count it
 08E  2FF08                                  STORE sF, 08[InquiryPollingTimeout]         ; and remember it
 08F                                         ;  use this to restart INQUIRY
 08F  01F0A                                  LOAD sF, 0A[10'd]                           ; 10 second gap = 6 per minute
 090  2FF00                                  STORE sF, 00[InquiryPeriodDelay]            ; reset clocking
 091  25000                                  RETURN 
 092                     HandleInquiryReply: 
 092                                         ; ;; INQUIRY 00:25:89:65:2e:c2 200404
 092                                         ; ;; INQUIRY dc:2c:26:ef:4c:7b 002540
 092                                         ; ;; 00112233445566778899aabbccddeeff
 092                                         ; ;; 012345678901234567890123456789012345
 092                                         ; ;;           1         2         3
 092                                         ; ;;
 092                                         ; ;; sC points at next character in message
 092  0BF48                                  FETCH sF, 48[BluegigaCharCount]
 093  1DF09                                  COMPARE sF, 09                              ; is message length of INQUIRY n - n = no of replies
 094  32076                                  JUMP Z, 076[_ProcMessClean]                 ; do not handle, simply clean up for next message
 095  00FC0                                  LOAD sF, sC                                 ; copy start of MAC address
 096  11F02                                  ADD sF, 02                                  ; look for the first ':'
 097  0AAF0                                  FETCH sA, (sF)                              ; get character from input buffer
 098  1DA3A                                  COMPARE sA, 3A[":"]                         ; is it the expected ':'
 099  36076                                  JUMP NZ, 076[_ProcMessClean]                ; skip this message if not
 09A                                         ; LOAD      sA, 'z'             ; debug - say we have seen a MAC address
 09A                                         ; CALL      SendToUserPico
 09A  202C1                                  CALL 2C1[StoreMACByLink]                    ; copy the MAC in sC address from Bluegiga buffer to the MAC store
 09B  01100                                  LOAD s1, 00                                 ; default current type is 0
 09C  2F156                                  STORE s1, 56[CurrentType]
 09D  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; Bluegiga buffer
 09E  11C1A                                  ADD sC, 1A[26'd]                            ; point at type
 09F  2FC49                                  STORE sC, 49[BufferPointer]
 0A0  200B8                                  CALL 0B8[GetConnectionType]                 ; determine type from message
 0A1                                         ; _HandleInquiry_10:
 0A1                                         ; ;;  Copy from Current Type to that for the selected channel
 0A1  1D001                                  COMPARE s0, 01
 0A2  360A5                                  JUMP NZ, 0A5[_HandleInquiry_3a]
 0A3  2F14A                                  STORE s1, 4A[ConnectType1]
 0A4  220AD                                  JUMP 0AD[_HandleInquiry_3d]
 0A5                      _HandleInquiry_3a: 
 0A5  1D002                                  COMPARE s0, 02
 0A6  360A9                                  JUMP NZ, 0A9[_HandleInquiry_3b]
 0A7  2F14B                                  STORE s1, 4B[ConnectType2]
 0A8  220AD                                  JUMP 0AD[_HandleInquiry_3d]
 0A9                      _HandleInquiry_3b: 
 0A9  1D003                                  COMPARE s0, 03
 0AA  360AD                                  JUMP NZ, 0AD[_HandleInquiry_3d]
 0AB  2F14C                                  STORE s1, 4C[ConnectType3]
 0AC  220AD                                  JUMP 0AD[_HandleInquiry_3d]
 0AD                      _HandleInquiry_3d: 
 0AD                                         ; ;; Set the first PIN code and send the pair message
 0AD                                         ; ;; If this PIN code fails, then the PAIR will be tried again with the
 0AD                                         ; ;; additional 2 PIN codes
 0AD                                         ; ;;
 0AD  01600                                  LOAD s6, 00                                 ; first PIN code
 0AE  2F659                                  STORE s6, 59[PinCodeSelected]               ; remember it
 0AF  01611                                  LOAD s6, 11[SetPinCodeMsg]                  ; send PIN code message
 0B0  2021C                                  CALL 21C[SendMessageToBluegiga]             ; to Bluegiga
 0B1  203D2                                  CALL 3D2[delay_10ms]
 0B2  01635                                  LOAD s6, 35[PairReqMsg]                     ;
 0B3  2021C                                  CALL 21C[SendMessageToBluegiga]
 0B4  203D2                                  CALL 3D2[delay_10ms]
 0B5                                         ; FETCH     s1, SelectedPointer
 0B5                                         ; LOAD      sF, 15              ; 15 seconds time out
 0B5                                         ; ADD       s1, 2               ; location of timer
 0B5                                         ; STORE     sF, s1              ; cancel timer operation
 0B5  01F14                                  LOAD sF, 14[20'd]                           ; delay INQUIRY messages for a period
 0B6  2FF00                                  STORE sF, 00[InquiryPeriodDelay]            ; reset clocking
 0B7                                         ;CALL      DebugReport               ; debug
 0B7  22076                                  JUMP 076[_ProcMessClean]
 0B8                                         ; ;;
 0B8                      GetConnectionType: 
 0B8                                         ;CALL      Send_CR_LF_ToUser         ; debug
 0B8                                         ;CALL      Send_CR_LF_ToUser         ; debug
 0B8                                         ; ;;
 0B8                                         ; ;; Determine connection type
 0B8                                         ; ;;
 0B8  0BC49                                  FETCH sC, 49[BufferPointer]
 0B9  01660                                  LOAD s6, 60[BT_HFP_AG]                      ; is this an Headset ID string
 0BA  20371                                  CALL 371[MatchMessageToString]
 0BB  360C4                                  JUMP NZ, 0C4[_GetConnectionType_2]          ; jump to process INQUIRY reply
 0BC                                         ; ;; remember this link is HFP
 0BC  01101                                  LOAD s1, 01[HFP_AG_Type]
 0BD  2F156                                  STORE s1, 56[CurrentType]
 0BE  01A68                                  LOAD sA, 68["h"]
 0BF  201F0                                  CALL 1F0[SendToUserPico]
 0C0  01A66                                  LOAD sA, 66["f"]
 0C1  201F0                                  CALL 1F0[SendToUserPico]
 0C2                                         ;;LOAD      sA, "p"
 0C2                                         ;;CALL      SendToUserPico
 0C2  203A0                                  CALL 3A0[Send_CR_LF_ToUser]
 0C3  25000                                  RETURN 
 0C4                                         ; ;;
 0C4                   _GetConnectionType_2: 
 0C4  0BC49                                  FETCH sC, 49[BufferPointer]
 0C5  01661                                  LOAD s6, 61[BT_HSP_AG]                      ; is this an Headset ID string
 0C6  20371                                  CALL 371[MatchMessageToString]
 0C7  360D0                                  JUMP NZ, 0D0[_GetConnectionType_3]          ; jump to process INQUIRY reply
 0C8                                         ; ;; remember this link is HSP
 0C8  01102                                  LOAD s1, 02[HSP_AG_Type]
 0C9  2F156                                  STORE s1, 56[CurrentType]
 0CA  01A68                                  LOAD sA, 68["h"]
 0CB  201F0                                  CALL 1F0[SendToUserPico]
 0CC  01A73                                  LOAD sA, 73["s"]
 0CD  201F0                                  CALL 1F0[SendToUserPico]
 0CE                                         ;;LOAD      sA, "p"
 0CE                                         ;;CALL      SendToUserPico
 0CE  203A0                                  CALL 3A0[Send_CR_LF_ToUser]
 0CF  25000                                  RETURN 
 0D0                   _GetConnectionType_3: 
 0D0                                         ; ;; Look for computer connections, keyboards ...
 0D0  0BC49                                  FETCH sC, 49[BufferPointer]
 0D1  01662                                  LOAD s6, 62[BT_COMPUTER]                    ; is this an computer connection
 0D2  20371                                  CALL 371[MatchMessageToString]
 0D3  35000                                  RETURN NZ                                   ; jump to process INQUIRY reply
 0D4                                         ; ;; remember this link is computer connection
 0D4  01103                                  LOAD s1, 03[ComputerType]
 0D5  2F156                                  STORE s1, 56[CurrentType]
 0D6                                         ;;LOAD      sA, "c"
 0D6                                         ;;CALL      SendToUserPico
 0D6                                         ; LOAD      sA, 'o'
 0D6                                         ; CALL      SendToUserPico
 0D6                                         ; LOAD      sA, 'm'
 0D6                                         ; CALL      SendToUserPico
 0D6  25000                                  RETURN 
 0D7                        HandlePairReply: 
 0D7                                         ; ;; PAIR 00:23:7f:b7:36:68 OK
 0D7                                         ; ;; 00112233445566778899aabbccddeeff
 0D7                                         ; ;; 012345678901234567890123456789012345
 0D7                                         ; ;;           1         2         3
 0D7                                         ; ;;
 0D7                                         ; ;; sC points at next character in message
 0D7                                         ;LOAD      sA, "P"             ; debug
 0D7                                         ;CALL      SendToUserPico
 0D7  20276                                  CALL 276[GetChannelFromMAC]                 ; get the channel and type according to MAC
 0D8  0BF48                                  FETCH sF, 48[BluegigaCharCount]
 0D9  1DF19                                  COMPARE sF, 19[25'd]                        ; is message length of PAIR that for OK message
 0DA  360F7                                  JUMP NZ, 0F7[HandlePairReplyFail]           ; do not handle if message length wrong, simply clean up for next message
 0DB  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 0DC  11C05                                  ADD sC, 05[5'd]                             ; point to MAC
 0DD                                         ; LOAD      sC, BluegigaInStart ; Bluegiga buffer
 0DD  11C12                                  ADD sC, 12[18'd]
 0DE  0AFC0                                  FETCH sF, (sC)                              ; fetch next character
 0DF  1DF4F                                  COMPARE sF, 4F["O"]                         ; is it 'O'
 0E0  360F7                                  JUMP NZ, 0F7[HandlePairReplyFail]           ; if not, then not paired
 0E1  11C01                                  ADD sC, 01[1'd]
 0E2  0AFC0                                  FETCH sF, (sC)                              ; fetch next character
 0E3  1DF4B                                  COMPARE sF, 4B["K"]                         ; is it 'K'
 0E4  360F7                                  JUMP NZ, 0F7[HandlePairReplyFail]           ; if not, then not paired
 0E5                        SendCallMessage: 
 0E5                                         ; LOAD      sA, 'Q'          ; debug
 0E5                                         ; CALL      SendToUserPico
 0E5                                         ;CALL      Send_CR_LF_ToUser    ; debug
 0E5                                         ;CALL      Send_CR_LF_ToUser    ; debug
 0E5                                         ; ;; call the Bluetooth device here
 0E5  0BF56                                  FETCH sF, 56[CurrentType]
 0E6  1DF01                                  COMPARE sF, 01[HFP_AG_Type]                 ; HFP?
 0E7  360EB                                  JUMP NZ, 0EB[HandlePairReplyA]              ; jump if not
 0E8  01637                                  LOAD s6, 37[CallHFP_AGMsg]                  ;
 0E9  2021C                                  CALL 21C[SendMessageToBluegiga]
 0EA                                         ; LOAD      sA, 'J'   ; debug
 0EA                                         ; CALL      SendToUserPico
 0EA  22076                                  JUMP 076[_ProcMessClean]
 0EB                       HandlePairReplyA: 
 0EB  1DF02                                  COMPARE sF, 02[HSP_AG_Type]                 ; HSP?
 0EC  360F0                                  JUMP NZ, 0F0[HandlePairReplyB]              ; jump if not
 0ED  0163A                                  LOAD s6, 3A[CallHSP_AGMsg]                  ;
 0EE  2021C                                  CALL 21C[SendMessageToBluegiga]
 0EF                                         ; LOAD      sA, 'K'   ; debug
 0EF                                         ; CALL      SendToUserPico
 0EF  22076                                  JUMP 076[_ProcMessClean]
 0F0                       HandlePairReplyB: 
 0F0  1DF03                                  COMPARE sF, 03[ComputerType]                ; computer?
 0F1  360F6                                  JUMP NZ, 0F6[HandlePairReplyC]              ; jump if not
 0F2  0163D                                  LOAD s6, 3D[CallA2DPMsg]                    ;
 0F3  2021C                                  CALL 21C[SendMessageToBluegiga]
 0F4  01A4C                                  LOAD sA, 4C["L"]                            ; debug
 0F5  201F0                                  CALL 1F0[SendToUserPico]
 0F6                       HandlePairReplyC: 
 0F6                                         ; LOAD      sA, 'M'   ; debug
 0F6                                         ; CALL      SendToUserPico
 0F6  22076                                  JUMP 076[_ProcMessClean]
 0F7                    HandlePairReplyFail: 
 0F7                                         ; LOAD      sA, 'Z'
 0F7                                         ; CALL      SendToUserPico
 0F7  0B759                                  FETCH s7, 59[PinCodeSelected]               ; compute next PIN code
 0F8  11701                                  ADD s7, 01
 0F9  2F759                                  STORE s7, 59[PinCodeSelected]               ; remember next PIN code
 0FA  1D703                                  COMPARE s7, 03                              ; all 3 pin codes tried?
 0FB  32102                                  JUMP Z, 102[HandlePairReplyAllFail]         ; abandon process
 0FC  01611                                  LOAD s6, 11[SetPinCodeMsg]                  ; else send next PIN code message
 0FD  2021C                                  CALL 21C[SendMessageToBluegiga]
 0FE  203D2                                  CALL 3D2[delay_10ms]
 0FF  01635                                  LOAD s6, 35[PairReqMsg]                     ; then send PAIR message for this PIN code
 100  2021C                                  CALL 21C[SendMessageToBluegiga]
 101  22076                                  JUMP 076[_ProcMessClean]
 102                 HandlePairReplyAllFail: 
 102                                         ; ;; could tell user in some way = LCD display
 102  01F0A                                  LOAD sF, 0A[10'd]                           ; restart INQUIRY messages
 103  2FF00                                  STORE sF, 00[InquiryPeriodDelay]            ; reset clocking
 104  22076                                  JUMP 076[_ProcMessClean]
 105                     HandleRingMsgReply: 
 105                                         ; ;; RING 0 fc:58:fa:e1:38:4a 4 HFP-AG
 105                                         ; ;; 00112233445566778899aabbccddeeff
 105                                         ; ;; 012345678901234567890123456789012345
 105                                         ; ;;           1         2         3
 105                                         ; ;;
 105  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 106  11C07                                  ADD sC, 07[7'd]                             ; point to the MAC address
 107  202C1                                  CALL 2C1[StoreMACByLink]                    ; copy the MAC in sC address from Bluegiga buffer to the MAC store
 108  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; Bluegiga buffer
 109  11C1B                                  ADD sC, 1B[27'd]                            ; point at type
 10A  2FC49                                  STORE sC, 49[BufferPointer]
 10B  2012F                                  CALL 12F[GetConnectionString]
 10C  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 10D  11C05                                  ADD sC, 05[5'd]                             ; point to control channel
 10E  0AFC0                                  FETCH sF, (sC)                              ; recover Control channel
 10F  2FF54                                  STORE sF, 54[CurrentChannel]
 110  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 111  11C19                                  ADD sC, 19[25'd]                            ; point to the audio channel
 112  0AEC0                                  FETCH sE, (sC)                              ; recover audio channel
 113  2FE55                                  STORE sE, 55[CurrentAudio]
 114  1D001                                  COMPARE s0, 01                              ; first slot?
 115  3611A                                  JUMP NZ, 11A[HandleRingMsgReply_B]
 116  2F14A                                  STORE s1, 4A[ConnectType1]
 117  2FF4D                                  STORE sF, 4D[ControlChannel1]
 118  2FE50                                  STORE sE, 50[AudioChannel1]
 119  22126                                  JUMP 126[HandleRingMsgReply_D]
 11A                   HandleRingMsgReply_B: 
 11A  1D002                                  COMPARE s0, 02                              ; second slot?
 11B  36120                                  JUMP NZ, 120[HandleRingMsgReply_C]
 11C  2F14B                                  STORE s1, 4B[ConnectType2]
 11D  2FF4E                                  STORE sF, 4E[ControlChannel2]
 11E  2FE51                                  STORE sE, 51[AudioChannel2]
 11F  22126                                  JUMP 126[HandleRingMsgReply_D]
 120                   HandleRingMsgReply_C: 
 120  1D003                                  COMPARE s0, 03                              ; third slot?
 121  36076                                  JUMP NZ, 076[_ProcMessClean]
 122  2F14C                                  STORE s1, 4C[ConnectType3]
 123  2FF4F                                  STORE sF, 4F[ControlChannel3]
 124  2FE52                                  STORE sE, 52[AudioChannel3]
 125  22126                                  JUMP 126[HandleRingMsgReply_D]
 126                   HandleRingMsgReply_D: 
 126  20322                                  CALL 322[DebugReport]
 127                                         ;LOAD      s6, OKMsg           ;
 127                                         ;CALL      SendMessageToBluegiga
 127                                         ;CALL      delay_10ms
 127                                         ;LOAD      s6, SCO_Open        ;
 127                                         ;CALL      SendMessageToBluegiga
 127                                         ;CALL      delay_10ms
 127  01636                                  LOAD s6, 36[KillMsg]                        ;
 128  2021C                                  CALL 21C[SendMessageToBluegiga]
 129  203C0                                  CALL 3C0[delay_1s]
 12A  01F01                                  LOAD sF, 01
 12B  2FF00                                  STORE sF, 00[InquiryPeriodDelay]            ; reset INQUIRY message clocking
 12C  01F06                                  LOAD sF, 06                                 ; restart inquiry - 6 per minute so this takes 1 minutes
 12D  2FF08                                  STORE sF, 08[InquiryPollingTimeout]         ; maximum attempts to connect = about 5 minutes
 12E                                         ;LOAD      s6, PairReqMsg        ;
 12E                                         ;CALL      SendMessageToBluegiga
 12E                                         ;CALL      delay_10ms
 12E                                         ; JUMP       SendCallMessage
 12E  22076                                  JUMP 076[_ProcMessClean]
 12F                                         ; ;;
 12F                    GetConnectionString: 
 12F                                         ; ;;
 12F                                         ; ;; Determine connection type
 12F                                         ; ;;
 12F                                         ; FETCH  sA, sC
 12F                                         ; CALL      SendToUserPico
 12F                                         ; ADD sC, 1
 12F                                         ; FETCH  sA, sC
 12F                                         ; CALL      SendToUserPico
 12F  0BC49                                  FETCH sC, 49[BufferPointer]
 130  01663                                  LOAD s6, 63[BT_HFP_AG_STRING]               ; is this an Headset ID string
 131  20371                                  CALL 371[MatchMessageToString]
 132  3613C                                  JUMP NZ, 13C[_GetConnectionString_2]        ; jump to process INQUIRY reply
 133                                         ; ;; remember this link is HFP
 133  01101                                  LOAD s1, 01[HFP_AG_Type]
 134  2F156                                  STORE s1, 56[CurrentType]
 135  01A68                                  LOAD sA, 68["h"]                            ; debug
 136  201F0                                  CALL 1F0[SendToUserPico]
 137  01A66                                  LOAD sA, 66["f"]
 138  201F0                                  CALL 1F0[SendToUserPico]
 139  01A70                                  LOAD sA, 70["p"]
 13A  201F0                                  CALL 1F0[SendToUserPico]
 13B  25000                                  RETURN 
 13C                                         ; ;;
 13C                 _GetConnectionString_2: 
 13C  0BC49                                  FETCH sC, 49[BufferPointer]
 13D  01664                                  LOAD s6, 64[BT_HSP_AG_STRING]               ; is this an Headset ID string
 13E  20371                                  CALL 371[MatchMessageToString]
 13F  36149                                  JUMP NZ, 149[_GetConnectionString_3]        ; jump to process INQUIRY reply
 140                                         ; ;; remember this link is HSP
 140  01102                                  LOAD s1, 02[HSP_AG_Type]
 141  2F156                                  STORE s1, 56[CurrentType]
 142  01A68                                  LOAD sA, 68["h"]                            ; debug
 143  201F0                                  CALL 1F0[SendToUserPico]
 144  01A73                                  LOAD sA, 73["s"]
 145  201F0                                  CALL 1F0[SendToUserPico]
 146  01A70                                  LOAD sA, 70["p"]
 147  201F0                                  CALL 1F0[SendToUserPico]
 148  25000                                  RETURN 
 149                 _GetConnectionString_3: 
 149                                         ; ;; Look for computer connections, keyboards ...
 149  0BC49                                  FETCH sC, 49[BufferPointer]
 14A  01665                                  LOAD s6, 65[BT_COMPUTER_STRING]             ; is this an computer connection
 14B  20371                                  CALL 371[MatchMessageToString]
 14C  35000                                  RETURN NZ                                   ; jump to process INQUIRY reply
 14D                                         ; ;; remember this link is computer connection
 14D  01103                                  LOAD s1, 03[ComputerType]
 14E  2F156                                  STORE s1, 56[CurrentType]
 14F  01A63                                  LOAD sA, 63["c"]                            ; debug
 150  201F0                                  CALL 1F0[SendToUserPico]
 151                                         ; LOAD      sA, 'o'
 151                                         ; CALL      SendToUserPico
 151  01A6D                                  LOAD sA, 6D["m"]
 152  201F0                                  CALL 1F0[SendToUserPico]
 153  25000                                  RETURN 
 154                     HandleCallMsgReply: 
 154                                         ; ;; CALL 0
 154                                         ; ;; CALL 00:23:7f:b7:36:68 1108 HSP-AG
 154                                         ; ;; 00112233445566778899aabbccddeeff
 154                                         ; ;; 012345678901234567890123456789012345
 154                                         ; ;;           1         2         3
 154                                         ; ;;
 154                                         ; ;; sC points at next character in message
 154  0BF48                                  FETCH sF, 48[BluegigaCharCount]
 155  1DF06                                  COMPARE sF, 06                              ; is message length of CALL that for CALL x message
 156  36176                                  JUMP NZ, 176[HandleCallMsgReplyLong]        ; jump if long message
 157  0A7C0                                  FETCH s7, (sC)                              ; fetch the control channel from the message
 158  0B053                                  FETCH s0, 53[IndexSelected]                 ; get current channel
 159  1D001                                  COMPARE s0, 01                              ; first channel?
 15A  36162                                  JUMP NZ, 162[HandleCallMsgReply1]
 15B  0BF4D                                  FETCH sF, 4D[ControlChannel1]               ; make sure not used
 15C  11F00                                  ADD sF, 00
 15D  36162                                  JUMP NZ, 162[HandleCallMsgReply1]
 15E  2F74D                                  STORE s7, 4D[ControlChannel1]               ; save the control channel allocated
 15F  01A58                                  LOAD sA, 58["X"]                            ; debug
 160  201F0                                  CALL 1F0[SendToUserPico]
 161  22076                                  JUMP 076[_ProcMessClean]
 162                    HandleCallMsgReply1: 
 162  1D002                                  COMPARE s0, 02                              ; second channel?
 163  3616C                                  JUMP NZ, 16C[HandleCallMsgReply2]
 164  0BF4E                                  FETCH sF, 4E[ControlChannel2]               ; make sure not used
 165  11F00                                  ADD sF, 00
 166  3616C                                  JUMP NZ, 16C[HandleCallMsgReply2]
 167  2F74E                                  STORE s7, 4E[ControlChannel2]               ; save the control channel allocated
 168  01A59                                  LOAD sA, 59["Y"]                            ; debug
 169  201F0                                  CALL 1F0[SendToUserPico]
 16A  20322                                  CALL 322[DebugReport]
 16B  22076                                  JUMP 076[_ProcMessClean]
 16C                    HandleCallMsgReply2: 
 16C  1D003                                  COMPARE s0, 03                              ; third channel?
 16D  36076                                  JUMP NZ, 076[_ProcMessClean]
 16E  0BF4F                                  FETCH sF, 4F[ControlChannel3]               ; make sure not used
 16F  11F00                                  ADD sF, 00
 170  36076                                  JUMP NZ, 076[_ProcMessClean]
 171  2F74F                                  STORE s7, 4F[ControlChannel3]               ; save the control channel allocated
 172  01A5A                                  LOAD sA, 5A["Z"]                            ; debug
 173  201F0                                  CALL 1F0[SendToUserPico]
 174  20322                                  CALL 322[DebugReport]
 175  22076                                  JUMP 076[_ProcMessClean]
 176                 HandleCallMsgReplyLong: 
 176                                         ; ;; CALL 00:23:7f:b7:36:68 1108 HSP-AG
 176                                         ; ;; 00112233445566778899aabbccddeeff
 176                                         ; ;; 012345678901234567890123456789012345
 176                                         ; ;;           1         2         3
 176                                         ; ;;
 176  01A57                                  LOAD sA, 57["W"]                            ; debug
 177  201F0                                  CALL 1F0[SendToUserPico]
 178  22076                                  JUMP 076[_ProcMessClean]
 179                                         ; ;;============================================================================
 179                                         ; ;; Handle CONNECT reply
 179                                         ; ;;  Either:
 179                                         ; ;; CONNECT 0 HFP-AG 3    or
 179                                         ; ;; CONNECT 0 HSP 6       or
 179                                         ; ;; CONNECT 1 SCO
 179                                         ; ;; 001122334455667788
 179                                         ; ;; 012345678901234567890
 179                                         ; ;;           1         2
 179                                         ; ;; need to separate out the 'SCO' message and bypass overwriting database
 179               HandleConnectHSPMsgReply: 
 179  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 17A  11C08                                  ADD sC, 08[8'd]
 17B  01E5A                                  LOAD sE, 5A[BluegigaInStart]                ; beginning of message
 17C  11E0E                                  ADD sE, 0E[14'd]
 17D  0A7C0                                  FETCH s7, (sC)
 17E  0A8E0                                  FETCH s8, (sE)
 17F  22183                                  JUMP 183[ConnectCommon]
 180                  HandleConnectMsgReply: 
 180  0A7C0                                  FETCH s7, (sC)                              ; get the control channel
 181                                         ; ADD       sC, 8    ; to be improved
 181  11C06                                  ADD sC, 06[6'd]                             ; to be improved
 182  0A8C0                                  FETCH s8, (sC)                              ; get the audio RFCOMM channel
 183                          ConnectCommon: 
 183  0B94D                                  FETCH s9, 4D[ControlChannel1]               ; get the first channel
 184  1C790                                  COMPARE s7, s9                              ; is it the first channel?
 185  3618E                                  JUMP NZ, 18E[HandleConnectMsgReply2]        ; jump if not
 186  2F954                                  STORE s9, 54[CurrentChannel]
 187  01901                                  LOAD s9, 01                                 ; save the channel number
 188  2F953                                  STORE s9, 53[IndexSelected]                 ; remember the channel
 189  2F850                                  STORE s8, 50[AudioChannel1]                 ; save the audio channel
 18A  2F855                                  STORE s8, 55[CurrentAudio]                  ; and in current
 18B                                         ; LOAD      sA, '+'
 18B                                         ; CALL      SendToUserPico
 18B  00A80                                  LOAD sA, s8
 18C  201F0                                  CALL 1F0[SendToUserPico]
 18D  221A0                                  JUMP 1A0[HandleConnectMsgReply0]
 18E                 HandleConnectMsgReply2: 
 18E  0B94E                                  FETCH s9, 4E[ControlChannel2]               ; get the second channel
 18F  1C790                                  COMPARE s7, s9                              ; is it the second channel?
 190  36197                                  JUMP NZ, 197[HandleConnectMsgReply3]        ; jump if not
 191  2F954                                  STORE s9, 54[CurrentChannel]
 192  01902                                  LOAD s9, 02                                 ; save the channel number
 193  2F953                                  STORE s9, 53[IndexSelected]                 ; remember the channel
 194  2F851                                  STORE s8, 51[AudioChannel2]                 ; save the audio channel
 195  2F855                                  STORE s8, 55[CurrentAudio]                  ; and in current
 196                                         ; LOAD      sA, 'y'
 196                                         ; CALL      SendToUserPico
 196  221A0                                  JUMP 1A0[HandleConnectMsgReply0]
 197                 HandleConnectMsgReply3: 
 197  0B94F                                  FETCH s9, 4F[ControlChannel3]               ; get the second channel
 198  1C790                                  COMPARE s7, s9                              ; is it the seecond channel?
 199  36076                                  JUMP NZ, 076[_ProcMessClean]                ; abort if not
 19A  2F954                                  STORE s9, 54[CurrentChannel]
 19B  01903                                  LOAD s9, 03                                 ; save the channel number
 19C  2F953                                  STORE s9, 53[IndexSelected]                 ; remember the channel
 19D  2F852                                  STORE s8, 52[AudioChannel3]                 ; save the audio channel
 19E  2F855                                  STORE s8, 55[CurrentAudio]                  ; and in current
 19F                                         ; LOAD      sA, 'z'
 19F                                         ; CALL      SendToUserPico
 19F  221A0                                  JUMP 1A0[HandleConnectMsgReply0]
 1A0                 HandleConnectMsgReply0: 
 1A0  01640                                  LOAD s6, 40[SCO_Open]                       ;
 1A1  2021C                                  CALL 21C[SendMessageToBluegiga]
 1A2  20322                                  CALL 322[DebugReport]
 1A3  22076                                  JUMP 076[_ProcMessClean]
 1A4           Handle_HFP_AG_Ready_MsgReply: 
 1A4                                         ; ;; HFP-AG 0 READY
 1A4                                         ; ;; 012345678901234567890
 1A4                                         ; ;;           1         2
 1A4  01628                                  LOAD s6, 28[StatusService1Msg]              ;
 1A5  2021C                                  CALL 21C[SendMessageToBluegiga]
 1A6  22076                                  JUMP 076[_ProcMessClean]
 1A7                  Handle_HSP_Button_Msg: 
 1A7                                         ; ;; HSP-AG 0 BUTTON
 1A7                                         ; ;; 012345678901234567890
 1A7                                         ; ;;           1         2
 1A7  01A39                                  LOAD sA, 39["9"]
 1A8  201F0                                  CALL 1F0[SendToUserPico]
 1A9  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 1AA  11C07                                  ADD sC, 07[7'd]
 1AB  0AEC0                                  FETCH sE, (sC)
 1AC  2026C                                  CALL 26C[GetChannelFromControl]
 1AD  0B657                                  FETCH s6, 57[Transmitting]                  ; can only transmit if no other is transmitting
 1AE  11600                                  ADD s6, 00                                  ;
 1AF  321BB                                  JUMP Z, 1BB[Handle_HSP_Button_Msg_Continue] ; if not transmitting then we can try now
 1B0  01A38                                  LOAD sA, 38["8"]
 1B1  201F0                                  CALL 1F0[SendToUserPico]
 1B2                                         ; ; ; else for HSP stop transmitting now.
 1B2  01A15                                  LOAD sA, 15[TRANSMIT_OFF]                   ; tell User Pico we are not transmitting
 1B3  201F0                                  CALL 1F0[SendToUserPico]
 1B4  01A00                                  LOAD sA, 00                                 ; remember we are not transmitting
 1B5  2FA57                                  STORE sA, 57[Transmitting]
 1B6                                         ; LOAD      s6, SCO_Open     ; re-open SCO for incoming messages
 1B6                                         ; CALL      SendMessageToBluegiga
 1B6  22076                                  JUMP 076[_ProcMessClean]
 1B7             Handle_HFP_AG_DialLast_Msg: 
 1B7                                         ; ;; HFP-AG 0 DIAL LAST
 1B7                                         ; ;; 012345678901234567890
 1B7                                         ; ;;           1         2
 1B7  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 1B8  11C07                                  ADD sC, 07[7'd]
 1B9  0AEC0                                  FETCH sE, (sC)                              ; get
 1BA  2026C                                  CALL 26C[GetChannelFromControl]
 1BB         Handle_HSP_Button_Msg_Continue: 
 1BB                                         ;LOAD      sA, "7"             ; debug ?
 1BB                                         ;CALL      SendToUserPico
 1BB  0B658                                  FETCH s6, 58[Receiving]                     ; can only transmit if not receiving
 1BC  11600                                  ADD s6, 00                                  ; set code
 1BD                                         ; JUMP      NZ, _ProcMessClean ; skip out if receiving.
 1BD                                         ;LOAD      sA, '#'             ; debug
 1BD                                         ;CALL      SendToUserPico
 1BD  0B657                                  FETCH s6, 57[Transmitting]                  ; can only transmit if no other is transmitting
 1BE  11600                                  ADD s6, 00                                  ; set code
 1BF  36076                                  JUMP NZ, 076[_ProcMessClean]                ; skip out if already transmitting.
 1C0                                         ;LOAD      sA, '+'; debug ?
 1C0                                         ;CALL      SendToUserPico
 1C0  01646                                  LOAD s6, 46[OKMsg]                          ;
 1C1  2021C                                  CALL 21C[SendMessageToBluegiga]
 1C2                                         ; LOAD      s6, SCO_Close      ;
 1C2                                         ; CALL      SendMessageToBluegiga
 1C2  01A14                                  LOAD sA, 14[TRANSMIT_ON]                    ; tell User Pico we are transmitting
 1C3  201F0                                  CALL 1F0[SendToUserPico]
 1C4  01A01                                  LOAD sA, 01                                 ; remember we are transmitting
 1C5  2FA57                                  STORE sA, 57[Transmitting]
 1C6  22076                                  JUMP 076[_ProcMessClean]
 1C7              Handle_HFPAG_NoCarrierMsg: 
 1C7  01A15                                  LOAD sA, 15[TRANSMIT_OFF]                   ; tell User Pico we are not transmitting
 1C8  201F0                                  CALL 1F0[SendToUserPico]
 1C9  01A00                                  LOAD sA, 00                                 ; remember we are not transmitting
 1CA  2FA57                                  STORE sA, 57[Transmitting]
 1CB                                         ; LOAD      s6, OKMsg      ;
 1CB                                         ; CALL      SendMessageToBluegiga
 1CB                                         ; LOAD      s6, SCO_Open     ; re-open SCO for incoming messages
 1CB                                         ; CALL      SendMessageToBluegiga
 1CB                                         ;LOAD      sA, "z"             ; debug?
 1CB                                         ;CALL      SendToUserPico
 1CB  22076                                  JUMP 076[_ProcMessClean]
 1CC                    Handle_NoCarrierMsg: 
 1CC                                         ; ;; NO CARRIER 0 ERROR 0
 1CC                                         ; ;; 012345678901234567890
 1CC                                         ; ;;           1         2
 1CC  01C5A                                  LOAD sC, 5A[BluegigaInStart]                ; beginning of message
 1CD  11C0B                                  ADD sC, 0B[11'd]
 1CE  0AEC0                                  FETCH sE, (sC)
 1CF  2026C                                  CALL 26C[GetChannelFromControl]
 1D0  01F00                                  LOAD sF, 00
 1D1  1D001                                  COMPARE s0, 01                              ; first Bluetooth gone?
 1D2  361D8                                  JUMP NZ, 1D8[Handle_NoCarrierMsg_2]         ; jump if not
 1D3                                         ; clean out first connection
 1D3                                         ;LOAD      sA, '&'             ; debug
 1D3                                         ;CALL      SendToUserPico
 1D3  2FF4A                                  STORE sF, 4A[ConnectType1]
 1D4  2FF50                                  STORE sF, 50[AudioChannel1]
 1D5  2FF4A                                  STORE sF, 4A[ConnectType1]
 1D6  01E0A                                  LOAD sE, 0A[HeadsetMACAddress1]
 1D7  221E7                                  JUMP 1E7[Handle_NoCarrierMsg_10]
 1D8                  Handle_NoCarrierMsg_2: 
 1D8  1D002                                  COMPARE s0, 02                              ; second Bluetooth gone?
 1D9  361DF                                  JUMP NZ, 1DF[Handle_NoCarrierMsg_3]         ; jump if not
 1DA                                         ; clean out second connection
 1DA                                         ;LOAD      sA, '$'             ; debug
 1DA                                         ;CALL      SendToUserPico
 1DA  2FF4B                                  STORE sF, 4B[ConnectType2]
 1DB  2FF51                                  STORE sF, 51[AudioChannel2]
 1DC  2FF4B                                  STORE sF, 4B[ConnectType2]
 1DD  01E1E                                  LOAD sE, 1E[HeadsetMACAddress2]
 1DE  221E7                                  JUMP 1E7[Handle_NoCarrierMsg_10]
 1DF                  Handle_NoCarrierMsg_3: 
 1DF  1D003                                  COMPARE s0, 03                              ; third Bluetooth gone?
 1E0  361E6                                  JUMP NZ, 1E6[Handle_NoCarrierMsg_4]         ; jump if not
 1E1                                         ; clean out third connection
 1E1                                         ;LOAD      sA, '%'             ; debug
 1E1                                         ;CALL      SendToUserPico
 1E1  2FF4C                                  STORE sF, 4C[ConnectType3]
 1E2  2FF52                                  STORE sF, 52[AudioChannel3]
 1E3  2FF4C                                  STORE sF, 4C[ConnectType3]
 1E4  01E32                                  LOAD sE, 32[HeadsetMACAddress3]
 1E5  221E7                                  JUMP 1E7[Handle_NoCarrierMsg_10]
 1E6                  Handle_NoCarrierMsg_4: 
 1E6  22076                                  JUMP 076[_ProcMessClean]
 1E7                 Handle_NoCarrierMsg_10: 
 1E7  01C11                                  LOAD sC, 11[17'd]                           ; clear the stored MAC address
 1E8                 Handle_NoCarrierMsg_11: 
 1E8  2EFE0                                  STORE sF, (sE)
 1E9  19C01                                  SUB sC, 01
 1EA  361E8                                  JUMP NZ, 1E8[Handle_NoCarrierMsg_11]
 1EB                                         ; ensure transmit is off
 1EB  01A15                                  LOAD sA, 15[TRANSMIT_OFF]                   ; tell User Pico we are not transmitting
 1EC  201F0                                  CALL 1F0[SendToUserPico]
 1ED  01A00                                  LOAD sA, 00                                 ; remember we are not transmitting
 1EE  2FA57                                  STORE sA, 57[Transmitting]
 1EF  22076                                  JUMP 076[_ProcMessClean]
 1F0                                         ; ;;============================================================================
 1F0                                         ; ;;============================================================================
 1F0                                         ; ;;============================================================================
 1F0                                         ; ;; Send character to User pico
 1F0                                         ; ;;
 1F0                                         ; ;; Sends character in sA to the User Pico
 1F0                                         ; ;;
 1F0                                         ; ;; Uses sF
 1F0                                         ; ;;
 1F0                        SendToUserPicoW: 
 1F0                         SendToUserPico: 
 1F0  09F04                                  INPUT sF, 04[BT_STATUS_REG]
 1F1  03F08                                  AND sF, 08[USER_TX_FULL]                    ; look for FIFO to user filling up
 1F2  1DF08                                  COMPARE sF, 08[USER_TX_FULL]                ; if so wait till user Pico catches up
 1F3  321F0                                  JUMP Z, 1F0[SendToUserPicoW]                ; if state not zero then wait
 1F4  2DA03                                  OUTPUT sA, 03[USER_TX_REG]                  ; send byte back to user Pico
 1F5  25000                                  RETURN 
 1F6                                         ; ;;============================================================================
 1F6                                         ; ;;============================================================================
 1F6                                         ; ;;============================================================================
 1F6                                         ; ;; Read message from Bluegiga
 1F6                                         ; ;;
 1F6                                         ; ;;    Reads a message from the Bluegiga and stores in the incoming buffer
 1F6                                         ; ;;
 1F6                                         ; ;;    Uses sA, sF
 1F6                                         ; ;;
 1F6                                         ; ;;    Returns Z if message ready to process; returns B+NZ otherwise
 1F6                ReadMessageFromBluegiga: 
 1F6  2020C                                  CALL 20C[ReadCharFromBluegiga]              ; read a character
 1F7  35000                                  RETURN NZ                                   ; no character received this time
 1F8  1DA0A                                  COMPARE sA, 0A[10'd]                        ; is this the end of message
 1F9  321F6                                  JUMP Z, 1F6[ReadMessageFromBluegiga]        ; ignore line feeds
 1FA  1DA0D                                  COMPARE sA, 0D[13'd]                        ; is this the end of message
 1FB  31000                                  RETURN Z
 1FC  0BF46                                  FETCH sF, 46[BluegigaCurrentPos]            ; current buffer position
 1FD  1DF7E                                  COMPARE sF, 7E[BluegigaInEnd]               ; check if buffer full
 1FE  32206                                  JUMP Z, 206[_ReadBG_1]                      ; do not move on if full
 1FF  2EAF0                                  STORE sA, (sF)                              ; store the received character
 200                                         ; LOAD      sA, sF    ; debug
 200                                         ; CALL      ByteToCharsToUser
 200  11F01                                  ADD sF, 01                                  ; next buffer position
 201  2FF46                                  STORE sF, 46[BluegigaCurrentPos]            ; store position back
 202  0BF48                                  FETCH sF, 48[BluegigaCharCount]             ; character received count
 203  11F01                                  ADD sF, 01                                  ; increment
 204  2FF48                                  STORE sF, 48[BluegigaCharCount]             ; character received count
 205  221F6                                  JUMP 1F6[ReadMessageFromBluegiga]           ; loop if not end of message
 206                              _ReadBG_1: 
 206                                         ; LOAD      sA, $BB
 206                                         ; CALL      ByteToCharsToUser
 206  0BF48                                  FETCH sF, 48[BluegigaCharCount]             ; character received count
 207  11F01                                  ADD sF, 01                                  ; increment
 208  2FF48                                  STORE sF, 48[BluegigaCharCount]             ; character received count
 209  01F00                                  LOAD sF, 00
 20A  11F00                                  ADD sF, 00
 20B  221F6                                  JUMP 1F6[ReadMessageFromBluegiga]           ; loop if not end of message
 20C                                         ; RET             ;
 20C                                         ; ;;============================================================================
 20C                                         ; ;;============================================================================
 20C                                         ; ;;============================================================================
 20C                                         ; ;; Read character from Bluegiga
 20C                                         ; ;;
 20C                                         ; ;;    Reads character in sA to Bluegiga
 20C                                         ; ;;
 20C                                         ; ;;    Uses sF
 20C                   ReadCharFromBluegiga: 
 20C  09F04                                  INPUT sF, 04[BT_STATUS_REG]                 ; Is there a byte available
 20D  03F01                                  AND sF, 01[BT_RX_DATA]                      ; check if there is anything there
 20E  1DF01                                  COMPARE sF, 01[BT_RX_DATA]
 20F  35000                                  RETURN NZ                                   ; return if no character from Blue Giga
 210  09A03                                  INPUT sA, 03[BT_RX_REG]                     ; read the character
 211                                         ; ;; need to check if in diag mode  TBD
 211  201F0                                  CALL 1F0[SendToUserPico]
 212  01F00                                  LOAD sF, 00                                 ; make sure condition code is set
 213  11F00                                  ADD sF, 00
 214  25000                                  RETURN 
 215                                         ; ;;============================================================================
 215                                         ; ;;============================================================================
 215                                         ; ;;============================================================================
 215                                         ; ;; Send character to Bluegiga
 215                                         ; ;;
 215                                         ; ;;    Transmits character in sA to Bluegiga
 215                                         ; ;;
 215                                         ; ;;    Uses sF
 215                     SendCharToBluegiga: 
 215  09F04                                  INPUT sF, 04[BT_STATUS_REG]                 ; get status word
 216  03F02                                  AND sF, 02[BT_TX_FULL]                      ; mask to full flag
 217  1DF02                                  COMPARE sF, 02[BT_TX_FULL]                  ; check it
 218  32215                                  JUMP Z, 215[SendCharToBluegiga]             ; if set wait till goes to 0
 219  2DA02                                  OUTPUT sA, 02[BT_TX_REG]                    ; we can send the character now
 21A                                         ; ;;
 21A                                         ; ;; if this code is enabled then messages from User to BT *must* be short else
 21A                                         ; ;; we get a FIFO full and program is blocked.
 21A                                         ; ;;
 21A                                         ; COMP      s1, 'A'
 21A                                         ; JUMP      C, _SendCharToBGa
 21A                                         ; OR        s1, $60
 21A                         _SendCharToBGa: 
 21A  201F0                                  CALL 1F0[SendToUserPico]                    ; send character in sA to User Pico (debugging)
 21B  25000                                  RETURN 
 21C                                         ; ;;
 21C                                         ; ;; SendMessageToBluegiga:
 21C                                         ; ;;
 21C                                         ; ;; Send message to Bluegiga
 21C                                         ; ;;
 21C                                         ; ;; s6 is the string number of the message in the Bluetooth RAM area
 21C                                         ; ;;
 21C                  SendMessageToBluegiga: 
 21C  20388                                  CALL 388[ComputeRAMAddress]                 ; get RAM address into s6, s7
 21D                          _SendToBGLoop: 
 21D  00E60                                  LOAD sE, s6                                 ; copy the message address
 21E  00F70                                  LOAD sF, s7
 21F  2038E                                  CALL 38E[ReadFromRAMBlock]                  ; reads from RAM address IN: sE(low), sF; RETURNS chars in sA (low) and sB (high)
 220  1DA00                                  COMPARE sA, 00                              ; check if end of message
 221  32230                                  JUMP Z, 230[_SendToBGFinish]                ; NULL indicates end of message
 222  1DA10                                  COMPARE sA, 10[16'd]                        ; if LT 16 then special handling
 223  38236                                  CALL C, 236[_SendSpecialBG]                 ; decode and send to Bluegiga
 224  11A00                                  ADD sA, 00                                  ; check something to send
 225  34215                                  CALL NZ, 215[SendCharToBluegiga]            ; send the character ( or space from decoded )
 226  00AB0                                  LOAD sA, sB                                 ; copy second character for transmission
 227  1DA00                                  COMPARE sA, 00                              ; check if end of message
 228  32230                                  JUMP Z, 230[_SendToBGFinish]                ; NULL indicates end of message
 229  1DA10                                  COMPARE sA, 10[16'd]                        ; if LT 16 then special handling
 22A  38236                                  CALL C, 236[_SendSpecialBG]                 ; decode and send to Bluegiga
 22B  11A00                                  ADD sA, 00                                  ; check something to send
 22C  34215                                  CALL NZ, 215[SendCharToBluegiga]            ; send the character ( or space from decoded )
 22D  11601                                  ADD s6, 01                                  ; next character pair in message
 22E  13700                                  ADDCY s7, 00                                ; 16 bit address
 22F  2221D                                  JUMP 21D[_SendToBGLoop]                     ; loop round
 230                        _SendToBGFinish: 
 230  01A0A                                  LOAD sA, 0A[10'd]                           ; carriage return
 231  20215                                  CALL 215[SendCharToBluegiga]                ; send it
 232  01A0D                                  LOAD sA, 0D[13'd]                           ; carriage return
 233  20215                                  CALL 215[SendCharToBluegiga]                ; send it
 234  203D2                                  CALL 3D2[delay_10ms]
 235  25000                                  RETURN                                      ; to caller
 236                         _SendSpecialBG: 
 236                            _SendSpec_1: 
 236  1DA01                                  COMPARE sA, 01                              ; is it send the MAC address?
 237  36241                                  JUMP NZ, 241[_SendSpec_2]                   ; skip if not
 238  0BE53                                  FETCH sE, 53[IndexSelected]                 ; get the selected message channel
 239  202A7                                  CALL 2A7[GetMACFromLink]                    ; returns address of MAC address in sE
 23A                           _SendSpec_1a: 
 23A  0AAE0                                  FETCH sA, (sE)                              ; reads from RAM address sE to sA
 23B  1DA00                                  COMPARE sA, 00                              ; is it the last character
 23C  32269                                  JUMP Z, 269[_SendSpecialBGEnd]              ; finish if so
 23D  20215                                  CALL 215[SendCharToBluegiga]                ; send character in sA
 23E  203E6                                  CALL 3E6[delay_1us]
 23F                                         ; LOAD  sA, '~'
 23F                                         ; CALL   SendCharToBluegiga
 23F  11E01                                  ADD sE, 01                                  ; next character
 240  2223A                                  JUMP 23A[_SendSpec_1a]
 241                            _SendSpec_2: 
 241  1DA02                                  COMPARE sA, 02                              ; is it send the Audio Channel number
 242  36246                                  JUMP NZ, 246[_SendSpec_3]                   ; skip if not
 243  0BA55                                  FETCH sA, 55[CurrentAudio]                  ; get the selected audio message channel
 244  20215                                  CALL 215[SendCharToBluegiga]                ; send character in sA
 245  22269                                  JUMP 269[_SendSpecialBGEnd]
 246                            _SendSpec_3: 
 246  1DA03                                  COMPARE sA, 03                              ; is it send tbd?
 247  3624B                                  JUMP NZ, 24B[_SendSpec_4]                   ; skip if not
 248  0BA54                                  FETCH sA, 54[CurrentChannel]                ; get the selected control message channel
 249  20215                                  CALL 215[SendCharToBluegiga]                ; send character in sA
 24A  22269                                  JUMP 269[_SendSpecialBGEnd]
 24B                            _SendSpec_4: 
 24B  1DA04                                  COMPARE sA, 04                              ; is it send tbd?
 24C  3624E                                  JUMP NZ, 24E[_SendSpec_9]                   ; skip if not
 24D  22269                                  JUMP 269[_SendSpecialBGEnd]
 24E                            _SendSpec_9: 
 24E  1DA09                                  COMPARE sA, 09                              ; is it send Pin code?
 24F  36269                                  JUMP NZ, 269[_SendSpecialBGEnd]             ; skip if not
 250  01E00                                  LOAD sE, 00[Pin1]
 251  0BD59                                  FETCH sD, 59[PinCodeSelected]
 252  1DD00                                  COMPARE sD, 00                              ; first PIN
 253  36255                                  JUMP NZ, 255[_SendSpec_9_a]
 254                                         ; LOAD   sE, Pin1   ; done above
 254  3625D                                  JUMP NZ, 25D[_SendSpec_9_1]
 255                          _SendSpec_9_a: 
 255  1DD01                                  COMPARE sD, 01                              ; second PIN
 256  36259                                  JUMP NZ, 259[_SendSpec_9_b]
 257  01E03                                  LOAD sE, 03[Pin2]
 258  3625D                                  JUMP NZ, 25D[_SendSpec_9_1]
 259                          _SendSpec_9_b: 
 259  1DD02                                  COMPARE sD, 02                              ; third PIN
 25A  3625D                                  JUMP NZ, 25D[_SendSpec_9_1]
 25B  01E00                                  LOAD sE, 00[Pin1]
 25C  3625D                                  JUMP NZ, 25D[_SendSpec_9_1]
 25D                          _SendSpec_9_1: 
 25D  01F00                                  LOAD sF, 00
 25E                       _SendSpec_9_Loop: 
 25E  2038E                                  CALL 38E[ReadFromRAMBlock]                  ; reads from RAM address IN: sE(low), sF; RETURNS chars in sA (low) and sB (high)
 25F  1DA00                                  COMPARE sA, 00                              ; is it the last character
 260  32269                                  JUMP Z, 269[_SendSpecialBGEnd]              ; finish if so
 261  20215                                  CALL 215[SendCharToBluegiga]                ; send character in sA
 262  00AB0                                  LOAD sA, sB                                 ; copy second character
 263  1DA00                                  COMPARE sA, 00                              ; is it the last character
 264  32269                                  JUMP Z, 269[_SendSpecialBGEnd]              ; finish if so
 265  20215                                  CALL 215[SendCharToBluegiga]                ; send character in sA
 266  11E01                                  ADD sE, 01                                  ; next
 267  13F00                                  ADDCY sF, 00
 268  2225E                                  JUMP 25E[_SendSpec_9_Loop]
 269                      _SendSpecialBGEnd: 
 269  01A00                                  LOAD sA, 00
 26A  11A00                                  ADD sA, 00                                  ; make sure return code is Z always
 26B  25000                                  RETURN 
 26C                                         ; ;; sE has control channel from Message
 26C                                         ; ;; stores currentAudio, currentChannel and currentType and returns in sD, sE and sF
 26C                  GetChannelFromControl: 
 26C  0BF4D                                  FETCH sF, 4D[ControlChannel1]               ; check Control Channel 1
 26D  1CEF0                                  COMPARE sE, sF                              ; compare with that from message
 26E  32286                                  JUMP Z, 286[GetChannelFromMAC1]             ; jump if so to load parameters
 26F  0BF4E                                  FETCH sF, 4E[ControlChannel2]               ; check Control Channel 2
 270  1CEF0                                  COMPARE sE, sF                              ; compare with that from message
 271  3228D                                  JUMP Z, 28D[GetChannelFromMAC2]             ; jump if so to load parameters
 272  0BF4F                                  FETCH sF, 4F[ControlChannel3]               ; check Control Channel 3
 273  1CEF0                                  COMPARE sE, sF                              ; compare with that from message
 274  32294                                  JUMP Z, 294[GetChannelFromMAC3]             ; jump if so to load parameters
 275  22282                                  JUMP 282[GetChannelFromMAC9]                ; set 0 and store parameters
 276                                         ; ;; sC points to the MAC address
 276                                         ; ;; stores currentAudio, currentChannel and currentType and returns in sD, sE and sF
 276                                         ; ;; corrupts sC
 276                      GetChannelFromMAC: 
 276  2FC09                                  STORE sC, 09[TempStore]
 277  01A0A                                  LOAD sA, 0A[HeadsetMACAddress1]             ; is it the first MAC
 278  20361                                  CALL 361[MatchSimpleString]
 279  32286                                  JUMP Z, 286[GetChannelFromMAC1]
 27A  0BC09                                  FETCH sC, 09[TempStore]                     ; recover sC
 27B  01A1E                                  LOAD sA, 1E[HeadsetMACAddress2]             ; is it the second MAC
 27C  20361                                  CALL 361[MatchSimpleString]
 27D  3228D                                  JUMP Z, 28D[GetChannelFromMAC2]
 27E  0BC09                                  FETCH sC, 09[TempStore]                     ; recover sC
 27F  01A32                                  LOAD sA, 32[HeadsetMACAddress3]             ; is it the second MAC
 280  20361                                  CALL 361[MatchSimpleString]
 281  32294                                  JUMP Z, 294[GetChannelFromMAC3]
 282                     GetChannelFromMAC9: 
 282  01D00                                  LOAD sD, 00
 283  01E00                                  LOAD sE, 00
 284  01C00                                  LOAD sC, 00
 285  2229A                                  JUMP 29A[GetChannelFromCommon]
 286                     GetChannelFromMAC1: 
 286  01A31                                  LOAD sA, 31["1"]
 287  201F0                                  CALL 1F0[SendToUserPico]
 288  01001                                  LOAD s0, 01
 289  0BD50                                  FETCH sD, 50[AudioChannel1]
 28A  0BE4D                                  FETCH sE, 4D[ControlChannel1]
 28B  0BF4A                                  FETCH sF, 4A[ConnectType1]
 28C  2229A                                  JUMP 29A[GetChannelFromCommon]
 28D                     GetChannelFromMAC2: 
 28D  01A32                                  LOAD sA, 32["2"]
 28E  201F0                                  CALL 1F0[SendToUserPico]
 28F  01002                                  LOAD s0, 02
 290  0BD51                                  FETCH sD, 51[AudioChannel2]
 291  0BE4E                                  FETCH sE, 4E[ControlChannel2]
 292  0BF4B                                  FETCH sF, 4B[ConnectType2]
 293  2229A                                  JUMP 29A[GetChannelFromCommon]
 294                     GetChannelFromMAC3: 
 294  01A33                                  LOAD sA, 33["3"]
 295  201F0                                  CALL 1F0[SendToUserPico]
 296  01003                                  LOAD s0, 03
 297  0BD52                                  FETCH sD, 52[AudioChannel3]
 298  0BE4F                                  FETCH sE, 4F[ControlChannel3]
 299  0BF4C                                  FETCH sF, 4C[ConnectType3]
 29A                   GetChannelFromCommon: 
 29A  003F0                                  LOAD s3, sF                                 ; debug
 29B  01A40                                  LOAD sA, 40["@"]                            ; debug
 29C  201F0                                  CALL 1F0[SendToUserPico]
 29D  00A00                                  LOAD sA, s0
 29E  11A30                                  ADD sA, 30["0"]
 29F  201F0                                  CALL 1F0[SendToUserPico]
 2A0  00F30                                  LOAD sF, s3                                 ; debug
 2A1  2F053                                  STORE s0, 53[IndexSelected]
 2A2  2FD55                                  STORE sD, 55[CurrentAudio]
 2A3  2FE54                                  STORE sE, 54[CurrentChannel]
 2A4  2FF56                                  STORE sF, 56[CurrentType]
 2A5  0BC09                                  FETCH sC, 09[TempStore]
 2A6  25000                                  RETURN 
 2A7                                         ; ; ;
 2A7                                         ; ; ; Get the MAC string pointer according to the currently selected channel
 2A7                                         ; ; ;
 2A7                                         ; ; ; sE is the current MAC address selected
 2A7                                         ; ; ;
 2A7                                         ; ; ;    returns address in sE
 2A7                         GetMACFromLink: 
 2A7  1DE01                                  COMPARE sE, 01[FIRST_CHANNEL]               ; test first link
 2A8  322B0                                  JUMP Z, 2B0[_Link1]                         ; is first link
 2A9  1DE02                                  COMPARE sE, 02[SECOND_CHANNEL]              ; test second link
 2AA  322B4                                  JUMP Z, 2B4[_Link2]                         ; is second link
 2AB  1DE03                                  COMPARE sE, 03[THIRD_CHANNEL]               ; test third link
 2AC  322B8                                  JUMP Z, 2B8[_Link3]                         ; is third link
 2AD                                         ; invalid call - do nothing - log error?
 2AD  01F00                                  LOAD sF, 00
 2AE  2FF53                                  STORE sF, 53[IndexSelected]
 2AF  25000                                  RETURN 
 2B0                                 _Link1: 
 2B0  01E0A                                  LOAD sE, 0A[HeadsetMACAddress1]             ; load address of first MAC
 2B1  01F01                                  LOAD sF, 01
 2B2  2FF53                                  STORE sF, 53[IndexSelected]
 2B3  25000                                  RETURN                                      ; return address
 2B4                                 _Link2: 
 2B4  01E1E                                  LOAD sE, 1E[HeadsetMACAddress2]             ; load address of first MAC
 2B5  01F02                                  LOAD sF, 02
 2B6  2FF53                                  STORE sF, 53[IndexSelected]
 2B7  25000                                  RETURN                                      ; return address
 2B8                                 _Link3: 
 2B8  01E32                                  LOAD sE, 32[HeadsetMACAddress3]             ; load address of first MAC
 2B9  01F03                                  LOAD sF, 03
 2BA  2FF53                                  STORE sF, 53[IndexSelected]
 2BB  25000                                  RETURN                                      ; return address
 2BC                                         ; ;;
 2BC                                         ; ;; Copy the MAC string according to the currently selected channel
 2BC                                         ; ;;
 2BC                        CopyMACFromLink: 
 2BC  202A7                                  CALL 2A7[GetMACFromLink]                    ; get the MAC address pointer
 2BD                       _CopyLinkExecute: 
 2BD  00D60                                  LOAD sD, s6                                 ; copy target address
 2BE  01C12                                  LOAD sC, 12[MAC_ADDRESS_LENGTH]             ; length to copy = 18 including end space char
 2BF  20394                                  CALL 394[CopyFromRAMtoScratchpad]           ; copy from BT RAM area to scratchpad
 2C0  25000                                  RETURN 
 2C1                                         ; sC is the incoming MAC address
 2C1                                         ; ;; Checks whether the callers MAC address in sC matches any of the 3 MACs we have stored
 2C1                                         ; ;;
 2C1                                         ; ;; If so then the current Index selected is set to this channel.
 2C1                                         ; ;;
 2C1                                         ; ;; If there is no match then the MAC address will be stored in the first available slot
 2C1                                         ; ;; and the Current Index set to this slot.
 2C1                                         ; ;;
 2C1                         StoreMACByLink: 
 2C1  008C0                                  LOAD s8, sC                                 ; remember the MAC address in the buffer from sC to s8
 2C2  0BF0A                                  FETCH sF, 0A[HeadsetMACAddress1]            ; get the first char of first MAC
 2C3  11F00                                  ADD sF, 00                                  ; check for empty
 2C4  322D3                                  JUMP Z, 2D3[_StoreMac_1]                    ; No mac in first slot
 2C5  01711                                  LOAD s7, 11[17'd]                           ; count of characters
 2C6  0190A                                  LOAD s9, 0A[HeadsetMACAddress1]             ; address of first MAC
 2C7                            _CheckLoopA: 
 2C7  0AF80                                  FETCH sF, (s8)                              ; get character from buffer
 2C8  0AE90                                  FETCH sE, (s9)                              ; get character from MAC address
 2C9  1CFE0                                  COMPARE sF, sE
 2CA  362D7                                  JUMP NZ, 2D7[_StoreMac_Not1]                ; not MAC 1
 2CB  11801                                  ADD s8, 01
 2CC  11901                                  ADD s9, 01
 2CD  19701                                  SUB s7, 01
 2CE  362C7                                  JUMP NZ, 2C7[_CheckLoopA]                   ; loop round
 2CF                                         ; LOAD  sA, 'r'       ; debug - 'r' = MAC already in first slot
 2CF                                         ; CALL  SendToUserPico
 2CF  01001                                  LOAD s0, 01                                 ; MAC matches that in first slot
 2D0  2F053                                  STORE s0, 53[IndexSelected]                 ; remember the channel
 2D1  11000                                  ADD s0, 00                                  ; set return code to NZ
 2D2  25000                                  RETURN                                      ; MAC is channel 1 already stored
 2D3                            _StoreMac_1: 
 2D3  01001                                  LOAD s0, 01                                 ; MAC matches that in first slot
 2D4  2F053                                  STORE s0, 53[IndexSelected]                 ; remember the channel
 2D5                                         ; LOAD      sA, 'a'                 ; debug - 'a' = storing MAC in first slot
 2D5                                         ; CALL      SendToUserPico
 2D5  0190A                                  LOAD s9, 0A[HeadsetMACAddress1]             ; address of first MAC
 2D6  22315                                  JUMP 315[_StoreMac_UseThis]                 ; store the incoming MAC address
 2D7                         _StoreMac_Not1: 
 2D7  008C0                                  LOAD s8, sC                                 ; remember the MAC address in the buffer
 2D8  0B91E                                  FETCH s9, 1E[HeadsetMACAddress2]            ; get the first char of second MAC
 2D9  11900                                  ADD s9, 00                                  ; check for empty
 2DA  322E9                                  JUMP Z, 2E9[_StoreMac_2]                    ; NO mac in second slot
 2DB  01711                                  LOAD s7, 11[17'd]                           ; count of characters
 2DC  0191E                                  LOAD s9, 1E[HeadsetMACAddress2]             ; address of second MAC
 2DD                        _StoreMac_LoopB: 
 2DD  0AF80                                  FETCH sF, (s8)                              ; get character from buffer
 2DE  0AE90                                  FETCH sE, (s9)                              ; get character from MAC address
 2DF  1CFE0                                  COMPARE sF, sE
 2E0  362ED                                  JUMP NZ, 2ED[_StoreMac_Not2]                ; not MAC 2
 2E1  11801                                  ADD s8, 01
 2E2  11901                                  ADD s9, 01
 2E3  19701                                  SUB s7, 01
 2E4  362DD                                  JUMP NZ, 2DD[_StoreMac_LoopB]               ; loop round
 2E5                                         ; LOAD  sA, 's'    ; debug message - use link 2
 2E5                                         ; CALL  SendToUserPico
 2E5  01002                                  LOAD s0, 02                                 ; MAC matches that in second slot
 2E6  2F053                                  STORE s0, 53[IndexSelected]                 ; remember the channel
 2E7  11000                                  ADD s0, 00                                  ; set return code to NZ
 2E8  25000                                  RETURN                                      ; MAC is channel 2
 2E9                            _StoreMac_2: 
 2E9                                         ; LOAD  sA, 'b'                 ; debug
 2E9                                         ; CALL  SendToUserPico
 2E9  01002                                  LOAD s0, 02                                 ; MAC matches that in second slot
 2EA  2F053                                  STORE s0, 53[IndexSelected]                 ; remember the channel
 2EB  0191E                                  LOAD s9, 1E[HeadsetMACAddress2]             ; address of second MAC
 2EC  22315                                  JUMP 315[_StoreMac_UseThis]                 ; store the incoming MAC address
 2ED                         _StoreMac_Not2: 
 2ED  008C0                                  LOAD s8, sC                                 ; remember the MAC address in the buffer
 2EE  0B932                                  FETCH s9, 32[HeadsetMACAddress3]            ; get the first char of third MAC
 2EF  11900                                  ADD s9, 00                                  ; check for empty
 2F0  322FF                                  JUMP Z, 2FF[_StoreMac_3]                    ; NO mac in third slot
 2F1  01711                                  LOAD s7, 11[17'd]                           ; count of characters
 2F2  01932                                  LOAD s9, 32[HeadsetMACAddress3]             ; address of third MAC
 2F3                        _StoreMac_LoopC: 
 2F3  0AF80                                  FETCH sF, (s8)                              ; get character from buffer
 2F4  0AE90                                  FETCH sE, (s9)                              ; get character from MAC address
 2F5  1CFE0                                  COMPARE sF, sE
 2F6  36303                                  JUMP NZ, 303[_StoreMac_Not3]                ; not MAC 3
 2F7  11801                                  ADD s8, 01
 2F8  11901                                  ADD s9, 01
 2F9  19701                                  SUB s7, 01
 2FA  362F3                                  JUMP NZ, 2F3[_StoreMac_LoopC]               ; loop round
 2FB                                         ; LOAD  sA, 't'                 ; debug
 2FB                                         ; CALL  SendToUserPico
 2FB  01003                                  LOAD s0, 03                                 ; MAC matches that in third slot
 2FC  2F053                                  STORE s0, 53[IndexSelected]                 ; remember the channel
 2FD  11000                                  ADD s0, 00                                  ; set return code to NZ
 2FE  25000                                  RETURN                                      ; MAC is channel 3
 2FF                            _StoreMac_3: 
 2FF                                         ; LOAD  sA, 'c'                 ; debug
 2FF                                         ; CALL  SendToUserPico
 2FF  01003                                  LOAD s0, 03                                 ; MAC matches that in third slot
 300  2F053                                  STORE s0, 53[IndexSelected]                 ; remember the channel
 301  01932                                  LOAD s9, 32[HeadsetMACAddress3]             ; address of third MAC
 302  22315                                  JUMP 315[_StoreMac_UseThis]                 ; store the incoming MAC address
 303                         _StoreMac_Not3: 
 303  01001                                  LOAD s0, 01                                 ; assume first slot
 304  0190A                                  LOAD s9, 0A[HeadsetMACAddress1]             ; get the first char of first MAC
 305  0AF90                                  FETCH sF, (s9)                              ; get first character
 306  11F00                                  ADD sF, 00                                  ; check for empty
 307  32315                                  JUMP Z, 315[_StoreMac_UseThis]              ; NO mac in first slot
 308  01002                                  LOAD s0, 02                                 ; assume second slot
 309  0191E                                  LOAD s9, 1E[HeadsetMACAddress2]             ; get the first char of second MAC
 30A  0AF90                                  FETCH sF, (s9)                              ; get first character
 30B  11F00                                  ADD sF, 00                                  ; check for empty
 30C  32315                                  JUMP Z, 315[_StoreMac_UseThis]              ; NO mac in second slot
 30D  01003                                  LOAD s0, 03                                 ; assume third slot
 30E  0191E                                  LOAD s9, 1E[HeadsetMACAddress2]             ; get the first char of third MAC
 30F  0AF90                                  FETCH sF, (s9)                              ; get first character
 310  11F00                                  ADD sF, 00                                  ; check for empty
 311  32315                                  JUMP Z, 315[_StoreMac_UseThis]              ; NO mac in second slot
 312  01000                                  LOAD s0, 00                                 ; return no slot free
 313  11000                                  ADD s0, 00                                  ; set return code = Z for no slots
 314  25000                                  RETURN 
 315                      _StoreMac_UseThis: ; s9 points to MAC address storage
 315  2F053                                  STORE s0, 53[IndexSelected]                 ; set current message channel
 316                                         ; LOAD  sA, 'k'                 ; debug - say we are storing MAC address
 316                                         ; CALL  SendToUserPico
 316  008C0                                  LOAD s8, sC                                 ; remember the MAC address in the buffer
 317  01711                                  LOAD s7, 11[17'd]                           ; count of characters
 318                 _StoreMac_UseThis_Loop: 
 318  0AF80                                  FETCH sF, (s8)                              ; read MAC from Bluegiga buffer
 319  2EF90                                  STORE sF, (s9)                              ; store in MAC buffer
 31A  11801                                  ADD s8, 01                                  ; next Bluegiga buffer address
 31B  11901                                  ADD s9, 01                                  ; next MAC storage address
 31C  19701                                  SUB s7, 01                                  ; count down
 31D  36318                                  JUMP NZ, 318[_StoreMac_UseThis_Loop]        ; loop till all copied
 31E  01F00                                  LOAD sF, 00                                 ; store 0 to terminate
 31F  2EF90                                  STORE sF, (s9)                              ; store in MAC buffer
 320  11F01                                  ADD sF, 01                                  ; set return code to NZ
 321  25000                                  RETURN                                      ; MAC copied and IndexSelected set
 322                            DebugReport: 
 322  203A0                                  CALL 3A0[Send_CR_LF_ToUser]
 323                                         ; LOAD      sA, '<'
 323                                         ; CALL      SendToUserPico
 323  0190A                                  LOAD s9, 0A[HeadsetMACAddress1]             ; get the first MAC
 324  01711                                  LOAD s7, 11[17'd]                           ; count of characters
 325                      _DebugReportLoop1: 
 325  0AA90                                  FETCH sA, (s9)                              ; get character from MAC 1
 326  11A00                                  ADD sA, 00
 327  3232C                                  JUMP Z, 32C[_DebugReportDone1]
 328  201F0                                  CALL 1F0[SendToUserPico]
 329  11901                                  ADD s9, 01
 32A  19701                                  SUB s7, 01                                  ; next
 32B  36325                                  JUMP NZ, 325[_DebugReportLoop1]             ;
 32C                      _DebugReportDone1: 
 32C                                         ; LOAD      sA, '>'
 32C                                         ; CALL      SendToUserPico
 32C  01A2E                                  LOAD sA, 2E["."]
 32D  201F0                                  CALL 1F0[SendToUserPico]
 32E  0BA4A                                  FETCH sA, 4A[ConnectType1]
 32F  11A30                                  ADD sA, 30["0"]
 330  201F0                                  CALL 1F0[SendToUserPico]
 331  01A2E                                  LOAD sA, 2E["."]
 332  201F0                                  CALL 1F0[SendToUserPico]
 333  0BA4D                                  FETCH sA, 4D[ControlChannel1]
 334  201F0                                  CALL 1F0[SendToUserPico]
 335  01A2E                                  LOAD sA, 2E["."]
 336  201F0                                  CALL 1F0[SendToUserPico]
 337  0BA50                                  FETCH sA, 50[AudioChannel1]
 338  201F0                                  CALL 1F0[SendToUserPico]
 339  01A2E                                  LOAD sA, 2E["."]
 33A  201F0                                  CALL 1F0[SendToUserPico]
 33B  203A0                                  CALL 3A0[Send_CR_LF_ToUser]
 33C  203D2                                  CALL 3D2[delay_10ms]
 33D                                         ; LOAD      sA, '<'
 33D                                         ; CALL      SendToUserPico
 33D  0191E                                  LOAD s9, 1E[HeadsetMACAddress2]             ; get the second MAC
 33E  01711                                  LOAD s7, 11[17'd]                           ; count of characters
 33F                      _DebugReportLoop2: 
 33F  0AA90                                  FETCH sA, (s9)                              ; get character from MAC 1
 340  11A00                                  ADD sA, 00
 341  32346                                  JUMP Z, 346[_DebugReportDone2]
 342  201F0                                  CALL 1F0[SendToUserPico]
 343  11901                                  ADD s9, 01
 344  19701                                  SUB s7, 01                                  ; next
 345  3633F                                  JUMP NZ, 33F[_DebugReportLoop2]             ;
 346                      _DebugReportDone2: 
 346                                         ; LOAD      sA, '>'
 346                                         ; CALL      SendToUserPico
 346  01A2E                                  LOAD sA, 2E["."]
 347  201F0                                  CALL 1F0[SendToUserPico]
 348  0BA4B                                  FETCH sA, 4B[ConnectType2]
 349  11A30                                  ADD sA, 30["0"]
 34A  201F0                                  CALL 1F0[SendToUserPico]
 34B  01A2E                                  LOAD sA, 2E["."]
 34C  201F0                                  CALL 1F0[SendToUserPico]
 34D  0BA4E                                  FETCH sA, 4E[ControlChannel2]
 34E  201F0                                  CALL 1F0[SendToUserPico]
 34F  01A2E                                  LOAD sA, 2E["."]
 350  201F0                                  CALL 1F0[SendToUserPico]
 351  0BA51                                  FETCH sA, 51[AudioChannel2]
 352  201F0                                  CALL 1F0[SendToUserPico]
 353  203A0                                  CALL 3A0[Send_CR_LF_ToUser]
 354  203D2                                  CALL 3D2[delay_10ms]
 355                                         ; LOAD      sA, '<'
 355                                         ; CALL      SendToUserPico
 355  01932                                  LOAD s9, 32[HeadsetMACAddress3]             ; get the third MAC
 356  01711                                  LOAD s7, 11[17'd]                           ; count of characters
 357                      _DebugReportLoop3: 
 357  0AA90                                  FETCH sA, (s9)                              ; get character from MAC 1
 358  11A00                                  ADD sA, 00
 359  3235E                                  JUMP Z, 35E[_DebugReportDone3]
 35A  201F0                                  CALL 1F0[SendToUserPico]
 35B  11901                                  ADD s9, 01
 35C  19701                                  SUB s7, 01                                  ; next
 35D  36357                                  JUMP NZ, 357[_DebugReportLoop3]             ;
 35E                      _DebugReportDone3: 
 35E                                         ; LOAD      sA, '>'
 35E                                         ; CALL      SendToUserPico
 35E                                         ;LOAD      sA, "."
 35E                                         ;CALL      SendToUserPico
 35E                                         ;FETCH     sA, ConnectType3
 35E                                         ;ADD       sA, '0'
 35E                                         ;CALL      SendToUserPico
 35E                                         ; LOAD      sA, '.'
 35E                                         ; CALL  SendToUserPico
 35E                                         ; FETCH     sA, ControlChannel3
 35E                                         ; CALL  SendToUserPico
 35E                                         ; LOAD      sA, '.'
 35E                                         ; CALL  SendToUserPico
 35E                                         ; FETCH     sA, AudioChannel3
 35E                                         ; CALL  SendToUserPico
 35E  203A0                                  CALL 3A0[Send_CR_LF_ToUser]
 35F  203D2                                  CALL 3D2[delay_10ms]
 360                                         ; CALL      Send_CR_LF_ToUser
 360                                         ; CALL      Delay1ms
 360  25000                                  RETURN 
 361                                         ; ;; ===========================================================================
 361                                         ; ;;;
 361                                         ; ;; Match a string
 361                                         ; ;;
 361                                         ; ;;  sA = address in scratchpad RAM; sC = match against in scratchpad
 361                                         ; ;;
 361                                         ; ;;  Returns Z if matched;  sA and sC points to next character in scratchpad
 361                                         ; ;;
 361                                         ; ;;
 361                      MatchSimpleString: 
 361  00BA0                                  LOAD sB, sA
 362                                         ; LOAD sA, '<'
 362                                         ; CALL      SendToUserPico
 362                                         ; LOAD sD, sC
 362                                         ; MatchSimpleStringDeb1:
 362                                         ; FETCH sA, sD
 362                                         ; ADD  sA, 0
 362                                         ; JUMP   Z, MatchSimpleStringDeb2
 362                                         ; CALL      SendToUserPico
 362                                         ; ADD  sD, 1
 362                                         ; JUMP  MatchSimpleStringDeb1
 362                                         ; MatchSimpleStringDeb2:
 362                                         ; LOAD sA, '>'
 362                                         ; CALL      SendToUserPico
 362                                         ; LOAD sA, '{'
 362                                         ; CALL      SendToUserPico
 362                                         ; LOAD sD, sB
 362                                         ; MatchSimpleStringDeb3:
 362                                         ; FETCH sA, sD
 362                                         ; ADD  sA, 0
 362                                         ; JUMP   Z, MatchSimpleStringDeb4
 362                                         ; CALL      SendToUserPico
 362                                         ; ADD  sD, 1
 362                                         ; JUMP  MatchSimpleStringDeb3
 362                                         ; MatchSimpleStringDeb4:
 362                                         ; LOAD sA, '}'
 362                                         ; CALL      SendToUserPico
 362                                         ; LOAD sA, '@'
 362                                         ; CALL      SendToUserPico
 362                  MatchSimpleStringLoop: 
 362                                         ; LOAD sA, '<'
 362                                         ; CALL      SendToUserPico
 362                                         ; FETCH sA, sC      ; message character
 362                                         ; CALL      SendToUserPico
 362                                         ; LOAD sA, ' '
 362                                         ; CALL      SendToUserPico
 362                                         ; FETCH sA, sB      ; MAC address character
 362                                         ; CALL      SendToUserPico
 362                                         ; LOAD sA, '>'
 362                                         ; CALL      SendToUserPico
 362  0AEC0                                  FETCH sE, (sC)                              ; message character
 363  0AFB0                                  FETCH sF, (sB)                              ; MAC address character
 364  11F00                                  ADD sF, 00                                  ; finished?
 365  3236B                                  JUMP Z, 36B[MatchSimpleStringEq]
 366  1CFE0                                  COMPARE sF, sE                              ;
 367  35000                                  RETURN NZ
 368  11C01                                  ADD sC, 01
 369  11B01                                  ADD sB, 01
 36A  22362                                  JUMP 362[MatchSimpleStringLoop]
 36B                    MatchSimpleStringEq: 
 36B  11E00                                  ADD sE, 00                                  ; if other string also 0 then matched
 36C  31000                                  RETURN Z                                    ; so return Z
 36D  1DE20                                  COMPARE sE, 20[" "]                         ; else make sure the character is space
 36E  31000                                  RETURN Z                                    ; return Z if OK
 36F                                         ; LOAD sA, '*'   ; debug
 36F                                         ; CALL      SendToUserPico
 36F  11F00                                  ADD sF, 00                                  ; else make NZ
 370  25000                                  RETURN 
 371                                         ; ;; ===========================================================================
 371                                         ; ;;;
 371                                         ; ;; Match a string
 371                                         ; ;;
 371                                         ; ;;  s6 = message number in RAM; sC = match against in scratchpad
 371                                         ; ;;
 371                                         ; ;;  Returns Z if matched;  sC points to next character in scratchpad
 371                                         ; ;;
 371                                         ; ;;
 371                   MatchMessageToString: ; match a received message against a string
 371                           _MatchString: 
 371  20388                                  CALL 388[ComputeRAMAddress]                 ; Takes address in s6, and converts to address in RAM in s6, s7
 372                       _MatchStringNext: 
 372  00E60                                  LOAD sE, s6                                 ; address in RAM
 373  00F70                                  LOAD sF, s7                                 ; address in RAM
 374  2038E                                  CALL 38E[ReadFromRAMBlock]                  ; reads from RAM address IN: sE(low), sF; RETURNS chars in sA (low) and sB (high)
 375  11A00                                  ADD sA, 00                                  ; set condition code
 376  31000                                  RETURN Z                                    ; return Z if all done
 377  0AFC0                                  FETCH sF, (sC)                              ; get character from scratchpad
 378  1DA3F                                  COMPARE sA, 3F["?"]                         ; ignore this one?
 379  3237C                                  JUMP Z, 37C[_MatchStringNextA]              ; skip if so
 37A  1CFA0                                  COMPARE sF, sA                              ; does it match
 37B  35000                                  RETURN NZ                                   ; return if not
 37C                      _MatchStringNextA: 
 37C  11C01                                  ADD sC, 01                                  ; next address in scratchpad
 37D  11B00                                  ADD sB, 00                                  ; set condition code
 37E  31000                                  RETURN Z                                    ; return Z if all done
 37F  0AFC0                                  FETCH sF, (sC)                              ; get character from scratchpad
 380  1DB3F                                  COMPARE sB, 3F["?"]                         ; ignore this one?
 381  32384                                  JUMP Z, 384[_MatchStringNextB]              ; skip if so
 382  1CFB0                                  COMPARE sF, sB                              ; does it match
 383  35000                                  RETURN NZ                                   ; return if not
 384                      _MatchStringNextB: 
 384  11C01                                  ADD sC, 01                                  ; next address in scratchpad
 385  11601                                  ADD s6, 01                                  ; next pair in RAM
 386  13700                                  ADDCY s7, 00                                ; ditto
 387  22372                                  JUMP 372[_MatchStringNext]                  ; next pair
 388                                         ; ;; ===========================================================================
 388                                         ; ;;;
 388                                         ; ;;                                                ComputeRAMAddress
 388                                         ; ;;
 388                                         ; ;; Takes address in s6, and converts to address in RAM in s6, s7
 388                                         ; ;; by multiplying by 4.
 388                                         ;
 388                      ComputeRAMAddress: 
 388  01700                                  LOAD s7, 00                                 ; upper RAM address
 389  14606                                  SL0 s6                                      ; multiply by 2
 38A  14700                                  SLA s7
 38B  14606                                  SL0 s6                                      ; by 4, but not by 8 as BT RAM stores in pairs
 38C  14700                                  SLA s7
 38D  25000                                  RETURN 
 38E                                         ; read from the RAM block to registers
 38E                                         ; sE lower address in RAM
 38E                                         ; sF is upper address in RAM
 38E                                         ; returns lower byte in sA, upper byte in sB
 38E                                         ; ReadFromRAMBlock    ; reads from RAM address IN: sE(low), sF; RETURNS chars in sA (low) and sB (high)
 38E                       ReadFromRAMBlock: 
 38E  2DE05                                  OUTPUT sE, 05[RAM_Addr_LSB]
 38F  2DF04                                  OUTPUT sF, 04[RAM_Addr_MSB]
 390  01A00                                  LOAD sA, 00                                 ; give the FPGA time to retrieve from RAM
 391  09B01                                  INPUT sB, 01[RAM_DataIn_LSB]
 392  09A02                                  INPUT sA, 02[RAM_DataIn_MSB]
 393  25000                                  RETURN 
 394                                         ; ;; ===========================================================================
 394                                         ; ;; ===========================================================================
 394                                         ; ;;
 394                                         ; ;;                                                ReadFromRAMBlock
 394                                         ; ;;
 394                                         ; sE lower address in RAM
 394                                         ; sF is upper address in RAM
 394                                         ; sD - target address in scratchpad
 394                                         ;
 394                                         ; sC - number of characters
 394                                         ; characters read from RAM is returned in stored in scratchpad at sB
 394                                         ;
 394                                         ; uses sA and SB
 394                                         ; CopyFromRAMtoScratchpad  ; copy from RAM; IN: addr sE(low), sF(high)  SD target sC byte count ; returns copied
 394                CopyFromRAMtoScratchpad: 
 394           _CopyFromRAMtoScratchpadLoop: 
 394  2038E                                  CALL 38E[ReadFromRAMBlock]                  ; reads from RAM address sE, sF to registers sA (low) and sB (high)
 395  2EAD0                                  STORE sA, (sD)                              ; store first byte
 396  11D01                                  ADD sD, 01                                  ; next scratchpad address
 397  19C01                                  SUB sC, 01                                  ; count down
 398  3239F                                  JUMP Z, 39F[_CopyFromRAMtoScratchpadFinish]
 399  2EBD0                                  STORE sB, (sD)                              ; store second byte
 39A  11D01                                  ADD sD, 01                                  ; next scratchpad address
 39B  11E01                                  ADD sE, 01                                  ; next RAM address
 39C  13F00                                  ADDCY sF, 00                                ; 16 bit arithmetic
 39D  19C01                                  SUB sC, 01                                  ; count down
 39E  36394                                  JUMP NZ, 394[_CopyFromRAMtoScratchpadLoop]
 39F         _CopyFromRAMtoScratchpadFinish: 
 39F  25000                                  RETURN 
 3A0                                         ; ;; ===========================================================================
 3A0                                         ; ;; ===========================================================================
 3A0                                         ; ;  DEBUGGING - TAKE CHARACTER and CONVERT to 2 HEX DIGITS
 3A0                                         ; Byte2Chars:  takes data in sA and returns two ascii codes in sD (upper) ,sC (lower 4 bits)
 3A0                                         ;
 3A0                                         ; Uses sF
 3A0                      Send_CR_LF_ToUser: 
 3A0  01A0D                                  LOAD sA, 0D[13'd]                           ; carriage return
 3A1  201F0                                  CALL 1F0[SendToUserPico]                    ; must be supplied outside
 3A2  01A0A                                  LOAD sA, 0A[10'd]                           ; line feed
 3A3  201F0                                  CALL 1F0[SendToUserPico]                    ; ditto
 3A4  25000                                  RETURN 
 3A5                      ByteToCharsToUser: 
 3A5  2FA7F                                  STORE sA, 7F[127'd]                         ; store sA
 3A6  203AD                                  CALL 3AD[ByteToChars]                       ; convert to characters in sC and sD
 3A7  00AD0                                  LOAD sA, sD                                 ; second character
 3A8  201F0                                  CALL 1F0[SendToUserPico]                    ; send
 3A9  00AC0                                  LOAD sA, sC                                 ; first character
 3AA  201F0                                  CALL 1F0[SendToUserPico]                    ; send
 3AB  0BA7F                                  FETCH sA, 7F[127'd]                         ; restore sA
 3AC  25000                                  RETURN 
 3AD                            ByteToChars: 
 3AD  00FA0                                  LOAD sF, sA                                 ; assumes 8 bit data is in sA
 3AE  14F0E                                  SR0 sF                                      ; / 2
 3AF  14F0E                                  SR0 sF                                      ; / 4
 3B0  14F0E                                  SR0 sF                                      ; / 8
 3B1  14F0E                                  SR0 sF                                      ; shift right 4 bits to get first (upper) hex character
 3B2  203B9                                  CALL 3B9[_GetChar]                          ; make ascii
 3B3  00DF0                                  LOAD sD, sF                                 ; return to caller
 3B4  00FA0                                  LOAD sF, sA                                 ; copy again
 3B5  03F0F                                  AND sF, 0F                                  ; mask to lower nibble
 3B6  203B9                                  CALL 3B9[_GetChar]                          ; make ascii
 3B7  00CF0                                  LOAD sC, sF                                 ; return to caller
 3B8  25000                                  RETURN 
 3B9                                         ; routine to convert 4bit value in s5 to an ascii code, returned in s5
 3B9  19F0A                        _GetChar: SUB sF, 0A[10'd]                            ; Test if sC greater than 9
 3BA  3A3BD                                  JUMP C, 3BD[_is_0_9]                        ; Hex character is 0_9
 3BB  11F41                                  ADD sF, 41["A"]                             ; offset for Ascii code 'A'
 3BC  25000                                  RETURN 
 3BD  11F0A                         _is_0_9: ADD sF, 0A[10'd]                            ; return to range 0-9
 3BE  11F30                                  ADD sF, 30["0"]                             ; offset to Ascii code for '0'
 3BF  25000                                  RETURN 
 3C0                                         ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 3C0                                         ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 3C0                                         ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 3C0                                         ;
 3C0                                         ;  Timer routines
 3C0                                         ;
 3C0                                         ; Registers used sB, sC, sD, sE and sF.
 3C0                                         ;
 3C0                                         CONSTANT delay_1us_constant, 12'd           ; Value (13)19 or 12? decimal suitable for 50MHz clock � about 8 for 20MHz
 3C0                                         CONSTANT count_1000_lsb, E8                 ; lower 8-bits of 1000 count value
 3C0                                         CONSTANT count_1000_msb, 03                 ; upper 8-bits of 1000 count value
 3C0                           Delay1Second: 
 3C0  01B00                        delay_1s: LOAD sB, 00                                 ; clear cycle counter
 3C1  01C00                                  LOAD sC, 00
 3C2  203D7                         wait_1s: CALL 3D7[delay_1ms]
 3C3  11C01                                  ADD sC, 01                                  ; increment cycle counter
 3C4  13B00                                  ADDCY sB, 00
 3C5  1DCE8                                  COMPARE sC, E8[count_1000_lsb]              ; test for 1000ms
 3C6  363C2                                  JUMP NZ, 3C2[wait_1s]
 3C7  1DB03                                  COMPARE sB, 03[count_1000_msb]
 3C8  363C2                                  JUMP NZ, 3C2[wait_1s]
 3C9  25000                                  RETURN 
 3CA                                         ;
 3CA                                         ; Delays of approximately 200ms and 300ms used for LCD display scrolling
 3CA                                         ;
 3CA                                         ;
 3CA                                         ; Registers used sB through sF
 3CA                                         ;
 3CA  203CE                     delay_300ms: CALL 3CE[delay_100ms]
 3CB  203CE                     delay_200ms: CALL 3CE[delay_100ms]
 3CC  203CE                                  CALL 3CE[delay_100ms]
 3CD  25000                                  RETURN 
 3CE                                         ;
 3CE                                         ; Delay of approximately 100ms used for switch debounce
 3CE                                         ;
 3CE                                         ; Registers used s0, s1, s2, s3 and s4.
 3CE                                         ;
 3CE  01C64                     delay_100ms: LOAD sC, 64[100'd]                          ; repeat 1ms delay 100 times
 3CF  203D7                      wait_100ms: CALL 3D7[delay_1ms]
 3D0  19C01                                  SUB sC, 01
 3D1  363CF                                  JUMP NZ, 3CF[wait_100ms]
 3D2  01C0A                      delay_10ms: LOAD sC, 0A[10'd]                           ; repeat 1ms delay 100 times
 3D3  203D7                       wait_10ms: CALL 3D7[delay_1ms]
 3D4  19C01                                  SUB sC, 01
 3D5  363D3                                  JUMP NZ, 3D3[wait_10ms]
 3D6                                         ;
 3D6  25000                                  RETURN 
 3D7                                         ;
 3D7                                         ; Delay of approximately 1ms required by LCD display
 3D7                                         ;
 3D7                                         ; Registers used s0, s1, s2 and s3.
 3D7                                         ;
 3D7                               Delay1ms: 
 3D7  01D00                       delay_1ms: LOAD sD, 00                                 ; clear cycle counter
 3D8  01E00                                  LOAD sE, 00
 3D9  203E6                        wait_1ms: CALL 3E6[delay_1us]
 3DA  11E01                                  ADD sE, 01                                  ; increment cycle counter
 3DB  13D00                                  ADDCY sD, 00
 3DC  1DEE8                                  COMPARE sE, E8[count_1000_lsb]              ; test for 1000us
 3DD  363D9                                  JUMP NZ, 3D9[wait_1ms]
 3DE  1DD03                                  COMPARE sD, 03[count_1000_msb]
 3DF  363D9                                  JUMP NZ, 3D9[wait_1ms]
 3E0  25000                                  RETURN 
 3E1                                         ;
 3E1                                         ; Delay of approximately 50us required by LCD display
 3E1                                         ;
 3E1                                         ; Registers used s0 and s1.
 3E1                                         ;
 3E1  01E32                      delay_50us: LOAD sE, 32[50'd]                           ; repeat 1us delay 50 times
 3E2  203E6                       wait_50us: CALL 3E6[delay_1us]
 3E3  19E01                                  SUB sE, 01
 3E4  363E2                                  JUMP NZ, 3E2[wait_50us]
 3E5  25000                                  RETURN 
 3E6                                         ; Delay of approximately 1us used to provide timing reference for
 3E6                                         ; LCD operations. This must be adjusted to reflect the clock
 3E6                                         ; applied to KCPSM3. The provided code is for a 50MHz clock rate.
 3E6                                         ;
 3E6                                         ; The software delay loop is formed using register s0. This register
 3E6                                         ; must be loaded with an integer value close to the result of....
 3E6                                         ;
 3E6                                         ; value =  (clock_rate - 4)/4          Where 'clock_rate' is in MHz
 3E6                                         ;
 3E6                                         ; So for a 50MHz clock the value is (50-4)/4 = 11.5 and 12 would be used.
 3E6                                         ; For clock rates below 8MHz the value of 1 must be used and the I2C bus
 3E6                                         ; operation will become lower than the 100KHz target intended.
 3E6                                         ;
 3E6                                         ; Register used s0.
 3E6                                         ;
 3E6  01F0C                       delay_1us: LOAD sF, 0C[delay_1us_constant]             ; delay value of 12 decimal for a 50MHz clock
 3E7  19F01                        wait_1us: SUB sF, 01
 3E8  363E7                                  JUMP NZ, 3E7[wait_1us]
 3E9  25000                                  RETURN 
 3EA                                         ;
 3EA                                         CONSTANT Pin1, 0'd
 3EA                                         CONSTANT Pin2, 3'd
 3EA                                         CONSTANT Pin3, 6'd
 3EA                                         CONSTANT StartupMessages, 9'd
 3EA                                         CONSTANT StartupMessagesLower, 0'd
 3EA                                         CONSTANT EmptyMessage, 7'd
 3EA                                         CONSTANT N3Name, 8'd
 3EA                                         CONSTANT SetClassMsg, 11'd
 3EA                                         CONSTANT SetEchoReq, 14'd
 3EA                                         CONSTANT SetPinCodeMsg, 17'd
 3EA                                         CONSTANT SetBTPairNone, 19'd
 3EA                                         CONSTANT SetControlConfig, 21'd
 3EA                                         CONSTANT SetProfileHandsFreeMsg, 24'd
 3EA                                         CONSTANT SetAD2PProfileON, 27'd
 3EA                                         CONSTANT SetProfileHFPMsg, 30'd
 3EA                                         CONSTANT SetProfileHSPMsg, 33'd
 3EA                                         CONSTANT SetControlPCMMsg, 36'd
 3EA                                         CONSTANT StatusService1Msg, 40'd
 3EA                                         CONSTANT SCOEnableMsg, 43'd
 3EA                                         CONSTANT SCO_Multiple_Msg, 45'd
 3EA                                         CONSTANT ResetMsg, 50'd
 3EA                                         CONSTANT InquiryMsg, 51'd
 3EA                                         CONSTANT PairReqMsg, 53'd
 3EA                                         CONSTANT KillMsg, 54'd
 3EA                                         CONSTANT CallHFP_AGMsg, 55'd
 3EA                                         CONSTANT CallHSP_AGMsg, 58'd
 3EA                                         CONSTANT CallA2DPMsg, 61'd
 3EA                                         CONSTANT SETInquiryMsg, 63'd
 3EA                                         CONSTANT SCO_Open, 64'd
 3EA                                         CONSTANT SCO_OpenRFCOMM, 66'd
 3EA                                         CONSTANT SCO_Close, 68'd
 3EA                                         CONSTANT OKMsg, 70'd
 3EA                                         CONSTANT InquiryReply, 71'd
 3EA                                         CONSTANT ConnectMsg, 73'd
 3EA                                         CONSTANT ConnectHSPMsg, 75'd
 3EA                                         CONSTANT ConnectSCOMsg, 77'd
 3EA                                         CONSTANT CallReplyMsg, 79'd
 3EA                                         CONSTANT RingMsg, 80'd
 3EA                                         CONSTANT HFP_AG_Ready_Msg, 81'd
 3EA                                         CONSTANT HFP_AG_Dial_Last, 83'd
 3EA                                         CONSTANT HSP_Button_Msg, 86'd
 3EA                                         CONSTANT PairReply, 88'd
 3EA                                         CONSTANT HFP_AG_NoCarrierMsg, 89'd
 3EA                                         CONSTANT NoCarrierMsg, 92'd
 3EA                                         CONSTANT ReadyMsg, 95'd
 3EA                                         CONSTANT BT_HFP_AG, 96'd
 3EA                                         CONSTANT BT_HSP_AG, 97'd
 3EA                                         CONSTANT BT_COMPUTER, 98'd
 3EA                                         CONSTANT BT_HFP_AG_STRING, 99'd
 3EA                                         CONSTANT BT_HSP_AG_STRING, 100'd
 3EA                                         CONSTANT BT_COMPUTER_STRING, 101'd
 3EA                                         CONSTANT BT_RFCOMM_STRING, 102'd
 3EA                                         CONSTANT N3COMMAND, 103'd
 3EA                                         CONSTANT PC_READ_PAGE_MSG, 104'd
 3EA                                         CONSTANT PC_WRITE_PAGE_MSG, 105'd
 3EA                                         CONSTANT PC_WRITE_TXT_MSG, 106'd
 3EA                                         CONSTANT PC_READ_MSG, 107'd
 3EA                                         CONSTANT PC_ESC_MSG, 108'd
 3EA                                         CONSTANT PC_ACK_MSG, 109'd
 3EA                                         CONSTANT PC_NAK_MSG, 110'd
 3EA                                         CONSTANT PC_WRITE_MSG, 111'd
 3EA                                         CONSTANT PC_ERASE_MSG, 112'd


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

C:\Users\gnaylor\Dropbox\N3workingG\TE0722Rebuild\BluetoothMainShort.psm



List of defined constants

 CONSTANT name          Value        Source PSM File

 timestamp_hours        17'd         
 timestamp_minutes      42'd         
 timestamp_seconds      42'd         
 datestamp_year         15'd         
 datestamp_month        12'd         
 datestamp_day          13'd         
 NUL                    00           
 BEL                    07           
 BS                     08           
 HT                     09           
 LF                     0A           
 VT                     0B           
 CR                     0D           
 ESC                    1B           
 DEL                    7F           
 DCS                    90           
 ST                     9C           
 TRANSMIT_ON            14           BluetoothMainShort.psm
 TRANSMIT_OFF           15           BluetoothMainShort.psm
 FIRST_CHANNEL          1'd          BluetoothMainShort.psm
 SECOND_CHANNEL         2'd          BluetoothMainShort.psm
 THIRD_CHANNEL          3'd          BluetoothMainShort.psm
 MAC_ADDRESS_LENGTH     18'd         BluetoothMainShort.psm
 USER_RX_REG            00           BluetoothMainShort.psm
 RAM_DataIn_LSB         01           BluetoothMainShort.psm
 RAM_DataIn_MSB         02           BluetoothMainShort.psm
 BT_RX_REG              03           BluetoothMainShort.psm
 BT_STATUS_REG          04           BluetoothMainShort.psm
 BT_RX_DATA             01           BluetoothMainShort.psm
 BT_TX_FULL             02           BluetoothMainShort.psm
 BT_RTS                 04           BluetoothMainShort.psm
 USER_TX_FULL           08           BluetoothMainShort.psm
 BT_TX_REG              02           BluetoothMainShort.psm
 USER_TX_REG            03           BluetoothMainShort.psm
 RAM_Addr_MSB           04           BluetoothMainShort.psm
 RAM_Addr_LSB           05           BluetoothMainShort.psm
 InquiryPeriodDelay     0'd          BluetoothMainShort.psm
 GlobalTimerLow         1'd          BluetoothMainShort.psm
 GlobalTimerMiddle      2'd          BluetoothMainShort.psm
 GlobalTimerUpper       3'd          BluetoothMainShort.psm
 InquiryPollingTimeout  8'd          BluetoothMainShort.psm
 TempStore              9'd          BluetoothMainShort.psm
 HeadsetMACAddress1     10'd         BluetoothMainShort.psm
 HeadsetMACAddress2     30'd         BluetoothMainShort.psm
 HeadsetMACAddress3     50'd         BluetoothMainShort.psm
 NextSlot               70'd         BluetoothMainShort.psm
 BluegigaCurrentPos     70'd         BluetoothMainShort.psm
 ProcessBGMessage       71'd         BluetoothMainShort.psm
 BluegigaCharCount      72'd         BluetoothMainShort.psm
 BufferPointer          73'd         BluetoothMainShort.psm
 HFP_AG_Type            1'd          BluetoothMainShort.psm
 HSP_AG_Type            2'd          BluetoothMainShort.psm
 ComputerType           3'd          BluetoothMainShort.psm
 ConnectType1           74'd         BluetoothMainShort.psm
 ConnectType2           75'd         BluetoothMainShort.psm
 ConnectType3           76'd         BluetoothMainShort.psm
 ControlChannel1        77'd         BluetoothMainShort.psm
 ControlChannel2        78'd         BluetoothMainShort.psm
 ControlChannel3        79'd         BluetoothMainShort.psm
 AudioChannel1          80'd         BluetoothMainShort.psm
 AudioChannel2          81'd         BluetoothMainShort.psm
 AudioChannel3          82'd         BluetoothMainShort.psm
 IndexSelected          83'd         BluetoothMainShort.psm
 CurrentChannel         84'd         BluetoothMainShort.psm
 CurrentAudio           85'd         BluetoothMainShort.psm
 CurrentType            86'd         BluetoothMainShort.psm
 Transmitting           87'd         BluetoothMainShort.psm
 Receiving              88'd         BluetoothMainShort.psm
 PinCodeSelected        89'd         BluetoothMainShort.psm
 BluegigaInStart        90'd         BluetoothMainShort.psm
 BLUEGIGA_IN_BUF_SIZE   36'd         BluetoothMainShort.psm
 BluegigaInEnd          126'd        BluetoothMainShort.psm
 delay_1us_constant     12'd         BluetoothMainShort.psm
 count_1000_lsb         E8           BluetoothMainShort.psm
 count_1000_msb         03           BluetoothMainShort.psm
 Pin1                   0'd          BluetoothMainShort.psm
 Pin2                   3'd          BluetoothMainShort.psm
 Pin3                   6'd          BluetoothMainShort.psm
 StartupMessages        9'd          BluetoothMainShort.psm
 StartupMessagesLower   0'd          BluetoothMainShort.psm
 EmptyMessage           7'd          BluetoothMainShort.psm
 N3Name                 8'd          BluetoothMainShort.psm
 SetClassMsg            11'd         BluetoothMainShort.psm
 SetEchoReq             14'd         BluetoothMainShort.psm
 SetPinCodeMsg          17'd         BluetoothMainShort.psm
 SetBTPairNone          19'd         BluetoothMainShort.psm
 SetControlConfig       21'd         BluetoothMainShort.psm
 SetProfileHandsFreeMsg 24'd         BluetoothMainShort.psm
 SetAD2PProfileON       27'd         BluetoothMainShort.psm
 SetProfileHFPMsg       30'd         BluetoothMainShort.psm
 SetProfileHSPMsg       33'd         BluetoothMainShort.psm
 SetControlPCMMsg       36'd         BluetoothMainShort.psm
 StatusService1Msg      40'd         BluetoothMainShort.psm
 SCOEnableMsg           43'd         BluetoothMainShort.psm
 SCO_Multiple_Msg       45'd         BluetoothMainShort.psm
 ResetMsg               50'd         BluetoothMainShort.psm
 InquiryMsg             51'd         BluetoothMainShort.psm
 PairReqMsg             53'd         BluetoothMainShort.psm
 KillMsg                54'd         BluetoothMainShort.psm
 CallHFP_AGMsg          55'd         BluetoothMainShort.psm
 CallHSP_AGMsg          58'd         BluetoothMainShort.psm
 CallA2DPMsg            61'd         BluetoothMainShort.psm
 SETInquiryMsg          63'd         BluetoothMainShort.psm
 SCO_Open               64'd         BluetoothMainShort.psm
 SCO_OpenRFCOMM         66'd         BluetoothMainShort.psm
 SCO_Close              68'd         BluetoothMainShort.psm
 OKMsg                  70'd         BluetoothMainShort.psm
 InquiryReply           71'd         BluetoothMainShort.psm
 ConnectMsg             73'd         BluetoothMainShort.psm
 ConnectHSPMsg          75'd         BluetoothMainShort.psm
 ConnectSCOMsg          77'd         BluetoothMainShort.psm
 CallReplyMsg           79'd         BluetoothMainShort.psm
 RingMsg                80'd         BluetoothMainShort.psm
 HFP_AG_Ready_Msg       81'd         BluetoothMainShort.psm
 HFP_AG_Dial_Last       83'd         BluetoothMainShort.psm
 HSP_Button_Msg         86'd         BluetoothMainShort.psm
 PairReply              88'd         BluetoothMainShort.psm
 HFP_AG_NoCarrierMsg    89'd         BluetoothMainShort.psm
 NoCarrierMsg           92'd         BluetoothMainShort.psm
 ReadyMsg               95'd         BluetoothMainShort.psm
 BT_HFP_AG              96'd         BluetoothMainShort.psm
 BT_HSP_AG              97'd         BluetoothMainShort.psm
 BT_COMPUTER            98'd         BluetoothMainShort.psm
 BT_HFP_AG_STRING       99'd         BluetoothMainShort.psm
 BT_HSP_AG_STRING       100'd        BluetoothMainShort.psm
 BT_COMPUTER_STRING     101'd        BluetoothMainShort.psm
 BT_RFCOMM_STRING       102'd        BluetoothMainShort.psm
 N3COMMAND              103'd        BluetoothMainShort.psm
 PC_READ_PAGE_MSG       104'd        BluetoothMainShort.psm
 PC_WRITE_PAGE_MSG      105'd        BluetoothMainShort.psm
 PC_WRITE_TXT_MSG       106'd        BluetoothMainShort.psm
 PC_READ_MSG            107'd        BluetoothMainShort.psm
 PC_ESC_MSG             108'd        BluetoothMainShort.psm
 PC_ACK_MSG             109'd        BluetoothMainShort.psm
 PC_NAK_MSG             110'd        BluetoothMainShort.psm
 PC_WRITE_MSG           111'd        BluetoothMainShort.psm
 PC_ERASE_MSG           112'd        BluetoothMainShort.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.63"        
 datestamp$        "13 Dec 2015"  
 timestamp$        "17:42:42"     



List of line labels

   Label                            Addr  Source PSM File

 * EntryPoint                       000   BluetoothMainShort.psm
   ClearScratchpad                  002   BluetoothMainShort.psm
 * L1                               009   BluetoothMainShort.psm
   _InitialMessagesNext             00B   BluetoothMainShort.psm
   _InitialMessagesDone             01D   BluetoothMainShort.psm
   MainProcessingLoop               026   BluetoothMainShort.psm
   ProcessOneSecond                 02C   BluetoothMainShort.psm
   _GlobalTimeNOTExpired            043   BluetoothMainShort.psm
   ReadMessageFromUserPico          044   BluetoothMainShort.psm
   ProcessMessageFromUserPico       047   BluetoothMainShort.psm
   ProcessMessageFromBluegiga       048   BluetoothMainShort.psm
   _ProcMessClean                   076   BluetoothMainShort.psm
   _ProcMessCleanLoop               079   BluetoothMainShort.psm
   SendInquiryMessage               081   BluetoothMainShort.psm
   HandleInquiryReply               092   BluetoothMainShort.psm
   _HandleInquiry_3a                0A5   BluetoothMainShort.psm
   _HandleInquiry_3b                0A9   BluetoothMainShort.psm
   _HandleInquiry_3d                0AD   BluetoothMainShort.psm
   GetConnectionType                0B8   BluetoothMainShort.psm
   _GetConnectionType_2             0C4   BluetoothMainShort.psm
   _GetConnectionType_3             0D0   BluetoothMainShort.psm
   HandlePairReply                  0D7   BluetoothMainShort.psm
 * SendCallMessage                  0E5   BluetoothMainShort.psm
   HandlePairReplyA                 0EB   BluetoothMainShort.psm
   HandlePairReplyB                 0F0   BluetoothMainShort.psm
   HandlePairReplyC                 0F6   BluetoothMainShort.psm
   HandlePairReplyFail              0F7   BluetoothMainShort.psm
   HandlePairReplyAllFail           102   BluetoothMainShort.psm
   HandleRingMsgReply               105   BluetoothMainShort.psm
   HandleRingMsgReply_B             11A   BluetoothMainShort.psm
   HandleRingMsgReply_C             120   BluetoothMainShort.psm
   HandleRingMsgReply_D             126   BluetoothMainShort.psm
   GetConnectionString              12F   BluetoothMainShort.psm
   _GetConnectionString_2           13C   BluetoothMainShort.psm
   _GetConnectionString_3           149   BluetoothMainShort.psm
   HandleCallMsgReply               154   BluetoothMainShort.psm
   HandleCallMsgReply1              162   BluetoothMainShort.psm
   HandleCallMsgReply2              16C   BluetoothMainShort.psm
   HandleCallMsgReplyLong           176   BluetoothMainShort.psm
   HandleConnectHSPMsgReply         179   BluetoothMainShort.psm
   HandleConnectMsgReply            180   BluetoothMainShort.psm
   ConnectCommon                    183   BluetoothMainShort.psm
   HandleConnectMsgReply2           18E   BluetoothMainShort.psm
   HandleConnectMsgReply3           197   BluetoothMainShort.psm
   HandleConnectMsgReply0           1A0   BluetoothMainShort.psm
   Handle_HFP_AG_Ready_MsgReply     1A4   BluetoothMainShort.psm
   Handle_HSP_Button_Msg            1A7   BluetoothMainShort.psm
   Handle_HFP_AG_DialLast_Msg       1B7   BluetoothMainShort.psm
   Handle_HSP_Button_Msg_Continue   1BB   BluetoothMainShort.psm
 * Handle_HFPAG_NoCarrierMsg        1C7   BluetoothMainShort.psm
   Handle_NoCarrierMsg              1CC   BluetoothMainShort.psm
   Handle_NoCarrierMsg_2            1D8   BluetoothMainShort.psm
   Handle_NoCarrierMsg_3            1DF   BluetoothMainShort.psm
   Handle_NoCarrierMsg_4            1E6   BluetoothMainShort.psm
   Handle_NoCarrierMsg_10           1E7   BluetoothMainShort.psm
   Handle_NoCarrierMsg_11           1E8   BluetoothMainShort.psm
   SendToUserPicoW                  1F0   BluetoothMainShort.psm
   SendToUserPico                   1F0   BluetoothMainShort.psm
   ReadMessageFromBluegiga          1F6   BluetoothMainShort.psm
   _ReadBG_1                        206   BluetoothMainShort.psm
   ReadCharFromBluegiga             20C   BluetoothMainShort.psm
   SendCharToBluegiga               215   BluetoothMainShort.psm
 * _SendCharToBGa                   21A   BluetoothMainShort.psm
   SendMessageToBluegiga            21C   BluetoothMainShort.psm
   _SendToBGLoop                    21D   BluetoothMainShort.psm
   _SendToBGFinish                  230   BluetoothMainShort.psm
   _SendSpecialBG                   236   BluetoothMainShort.psm
 * _SendSpec_1                      236   BluetoothMainShort.psm
   _SendSpec_1a                     23A   BluetoothMainShort.psm
   _SendSpec_2                      241   BluetoothMainShort.psm
   _SendSpec_3                      246   BluetoothMainShort.psm
   _SendSpec_4                      24B   BluetoothMainShort.psm
   _SendSpec_9                      24E   BluetoothMainShort.psm
   _SendSpec_9_a                    255   BluetoothMainShort.psm
   _SendSpec_9_b                    259   BluetoothMainShort.psm
   _SendSpec_9_1                    25D   BluetoothMainShort.psm
   _SendSpec_9_Loop                 25E   BluetoothMainShort.psm
   _SendSpecialBGEnd                269   BluetoothMainShort.psm
   GetChannelFromControl            26C   BluetoothMainShort.psm
   GetChannelFromMAC                276   BluetoothMainShort.psm
   GetChannelFromMAC9               282   BluetoothMainShort.psm
   GetChannelFromMAC1               286   BluetoothMainShort.psm
   GetChannelFromMAC2               28D   BluetoothMainShort.psm
   GetChannelFromMAC3               294   BluetoothMainShort.psm
   GetChannelFromCommon             29A   BluetoothMainShort.psm
   GetMACFromLink                   2A7   BluetoothMainShort.psm
   _Link1                           2B0   BluetoothMainShort.psm
   _Link2                           2B4   BluetoothMainShort.psm
   _Link3                           2B8   BluetoothMainShort.psm
 * CopyMACFromLink                  2BC   BluetoothMainShort.psm
 * _CopyLinkExecute                 2BD   BluetoothMainShort.psm
   StoreMACByLink                   2C1   BluetoothMainShort.psm
   _CheckLoopA                      2C7   BluetoothMainShort.psm
   _StoreMac_1                      2D3   BluetoothMainShort.psm
   _StoreMac_Not1                   2D7   BluetoothMainShort.psm
   _StoreMac_LoopB                  2DD   BluetoothMainShort.psm
   _StoreMac_2                      2E9   BluetoothMainShort.psm
   _StoreMac_Not2                   2ED   BluetoothMainShort.psm
   _StoreMac_LoopC                  2F3   BluetoothMainShort.psm
   _StoreMac_3                      2FF   BluetoothMainShort.psm
   _StoreMac_Not3                   303   BluetoothMainShort.psm
   _StoreMac_UseThis                315   BluetoothMainShort.psm
   _StoreMac_UseThis_Loop           318   BluetoothMainShort.psm
   DebugReport                      322   BluetoothMainShort.psm
   _DebugReportLoop1                325   BluetoothMainShort.psm
   _DebugReportDone1                32C   BluetoothMainShort.psm
   _DebugReportLoop2                33F   BluetoothMainShort.psm
   _DebugReportDone2                346   BluetoothMainShort.psm
   _DebugReportLoop3                357   BluetoothMainShort.psm
   _DebugReportDone3                35E   BluetoothMainShort.psm
   MatchSimpleString                361   BluetoothMainShort.psm
   MatchSimpleStringLoop            362   BluetoothMainShort.psm
   MatchSimpleStringEq              36B   BluetoothMainShort.psm
   MatchMessageToString             371   BluetoothMainShort.psm
 * _MatchString                     371   BluetoothMainShort.psm
   _MatchStringNext                 372   BluetoothMainShort.psm
   _MatchStringNextA                37C   BluetoothMainShort.psm
   _MatchStringNextB                384   BluetoothMainShort.psm
   ComputeRAMAddress                388   BluetoothMainShort.psm
   ReadFromRAMBlock                 38E   BluetoothMainShort.psm
   CopyFromRAMtoScratchpad          394   BluetoothMainShort.psm
   _CopyFromRAMtoScratchpadLoop     394   BluetoothMainShort.psm
   _CopyFromRAMtoScratchpadFinish   39F   BluetoothMainShort.psm
   Send_CR_LF_ToUser                3A0   BluetoothMainShort.psm
 * ByteToCharsToUser                3A5   BluetoothMainShort.psm
   ByteToChars                      3AD   BluetoothMainShort.psm
   _GetChar                         3B9   BluetoothMainShort.psm
   _is_0_9                          3BD   BluetoothMainShort.psm
   Delay1Second                     3C0   BluetoothMainShort.psm
   delay_1s                         3C0   BluetoothMainShort.psm
   wait_1s                          3C2   BluetoothMainShort.psm
 * delay_300ms                      3CA   BluetoothMainShort.psm
 * delay_200ms                      3CB   BluetoothMainShort.psm
   delay_100ms                      3CE   BluetoothMainShort.psm
   wait_100ms                       3CF   BluetoothMainShort.psm
   delay_10ms                       3D2   BluetoothMainShort.psm
   wait_10ms                        3D3   BluetoothMainShort.psm
 * Delay1ms                         3D7   BluetoothMainShort.psm
   delay_1ms                        3D7   BluetoothMainShort.psm
   wait_1ms                         3D9   BluetoothMainShort.psm
 * delay_50us                       3E1   BluetoothMainShort.psm
   wait_50us                        3E2   BluetoothMainShort.psm
   delay_1us                        3E6   BluetoothMainShort.psm
   wait_1us                         3E7   BluetoothMainShort.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD            222
 STAR              -

 AND               4
 OR                -
 XOR               -

 ADD              86
 ADDCY             9
 SUB              17
 SUBCY             -

 TEST              -
 TESTCY            -
 COMPARE          74
 COMPARECY         -

 SL0               2
 SL1               -
 SLX               -
 SLA               2
 RL                -
 SR0               4
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             6
 OUTPUT            4
 OUTPUTK           -

 STORE            89
 FETCH            89

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP            165
 JUMP@             -
 CALL            156
 CALL@             -
 RETURN           59
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
