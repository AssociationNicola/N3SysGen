
function memory_interface_config(this_block)

  % Revision History:
  %
  %   09-Dec-2013  (13:57 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     C:\FPGAapplications\Boards\Nexys4\MicronMemController\memory_interface.vhd
  %
  %

  this_block.setTopLevelLanguage('VHDL');

  this_block.setEntityName('memory_interface');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('wait_i');
  this_block.addSimulinkInport('addr_i');
  this_block.addSimulinkInport('we_i');
  this_block.addSimulinkInport('data_i');
  this_block.addSimulinkInport('clk_i');
  this_block.addSimulinkInport('go_i');

  this_block.addSimulinkOutport('addr_o');
  this_block.addSimulinkOutport('clk_o');
  this_block.addSimulinkOutport('addr_valid_o');
  this_block.addSimulinkOutport('cntl_reg_enable_o');
  this_block.addSimulinkOutport('chip_enable_o');
  this_block.addSimulinkOutport('output_enable_o');
  this_block.addSimulinkOutport('write_en_o');
  this_block.addSimulinkOutport('lower_byte_en_o');
  this_block.addSimulinkOutport('upper_byte_en_o');
  this_block.addSimulinkOutport('data_o');

  clk_o_port = this_block.port('clk_o');
  clk_o_port.setType('UFix_1_0');
  clk_o_port.useHDLVector(false);
  addr_valid_o_port = this_block.port('addr_valid_o');
  addr_valid_o_port.setType('UFix_1_0');
  addr_valid_o_port.useHDLVector(false);
  cntl_reg_enable_o_port = this_block.port('cntl_reg_enable_o');
  cntl_reg_enable_o_port.setType('UFix_1_0');
  cntl_reg_enable_o_port.useHDLVector(false);
  chip_enable_o_port = this_block.port('chip_enable_o');
  chip_enable_o_port.setType('UFix_1_0');
  chip_enable_o_port.useHDLVector(false);
  output_enable_o_port = this_block.port('output_enable_o');
  output_enable_o_port.setType('UFix_1_0');
  output_enable_o_port.useHDLVector(false);
  write_en_o_port = this_block.port('write_en_o');
  write_en_o_port.setType('UFix_1_0');
  write_en_o_port.useHDLVector(false);
  lower_byte_en_o_port = this_block.port('lower_byte_en_o');
  lower_byte_en_o_port.setType('UFix_1_0');
  lower_byte_en_o_port.useHDLVector(false);
  upper_byte_en_o_port = this_block.port('upper_byte_en_o');
  upper_byte_en_o_port.setType('UFix_1_0');
  upper_byte_en_o_port.useHDLVector(false);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('wait_i').width ~= 1);
      this_block.setError('Input data type for port "wait_i" must have width=1.');
    end

    this_block.port('wait_i').useHDLVector(false);

    % (!) Port 'addr_i' appeared to have dynamic type in the HDL -- please add type checking as appropriate;

    if (this_block.port('we_i').width ~= 1);
      this_block.setError('Input data type for port "we_i" must have width=1.');
    end

    this_block.port('we_i').useHDLVector(false);

    % (!) Port 'data_i' appeared to have dynamic type in the HDL -- please add type checking as appropriate;

    if (this_block.port('clk_i').width ~= 1);
      this_block.setError('Input data type for port "clk_i" must have width=1.');
    end

    this_block.port('clk_i').useHDLVector(false);

    if (this_block.port('go_i').width ~= 1);
      this_block.setError('Input data type for port "go_i" must have width=1.');
    end

    this_block.port('go_i').useHDLVector(false);

  % (!) Port 'addr_o' appeared to have dynamic type in the HDL
  % --- you must add an appropriate type setting for this port
  % (!) Port 'data_o' appeared to have dynamic type in the HDL
  % --- you must add an appropriate type setting for this port
  end  % if(inputTypesKnown)
  % -----------------------------

  % System Generator found no apparent clock signals in the HDL, assuming combinational logic.
  % -----------------------------
   if (this_block.inputRatesKnown)
     inputRates = this_block.inputRates; 
     uniqueInputRates = unique(inputRates); 
     outputRate = uniqueInputRates(1);
     for i = 2:length(uniqueInputRates)
       if (uniqueInputRates(i) ~= Inf)
         outputRate = gcd(outputRate,uniqueInputRates(i));
       end
     end  % for(i)
     for i = 1:this_block.numSimulinkOutports 
       this_block.outport(i).setRate(outputRate); 
     end  % for(i)
   end  % if(inputRatesKnown)
  % -----------------------------

  config_phase = this_block.getConfigPhaseString;
  if (strcmpi(config_phase,'config_netlist_interface'))
    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);
    this_block.addInoutport('data_io');

  end % End if config_netlist_interface

  % (!) Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  this_block.addGeneric('addr_width','natural','26');
  this_block.addGeneric('data_width','natural','16');

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('C:/FPGAapplications/Boards/Nexys4/MicronMemController/memory_interface.vhd');

return;


