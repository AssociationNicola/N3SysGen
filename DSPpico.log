KCPSM6 Assembler log file for program 'Z:\home\gnaylor\Dropbox\N3SysGen\DSPpico.psm'.
Generated by KCPSM6 version v2.63
Ken Chapman - Xilinx Ltd - 20th December 2013

Assembly datestamp: 18 Nov 2017
Assembly timestamp: 16:17:20

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 2B1 hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 690
Memory locations available: 3406


Assembly listing

 Addr Code                             Instruction

 000                                   ;GV0B  To add code to take into account amplitude of start tone detected to adjust AGC, attack 32ms decay 1024ms BT mic routed through AGC MUX
 000                                   ;GV07 correct incorrect data archive and demod peak display problem (MSB/LSB mixup!)
 000                                   ;GV06 increase SSB amplitude on TX
 000                                   ;GV03 corrected OutAmp doubling and increased speaker volume
 000                                   ;GV02 Halved AGC thresholds to avoid clipping
 000                                   ;GV01 Reduce Speaker volume by increasing AGC value to 63 on startup
 000                                   ;GV00 return counter to zero for new Zynq design
 000                                   ;GVA5 for TE0722, with RX/TX frequencies adjusted for 32.768MHz (mod in Keypad assembler)
 000                                   ;GVA4 correct bad setting of AvesignalMSB instead of USB (caused crashing)
 000                                   ;GVA2 BT input from mic is taken externally in logic - also removed audio double so as not to saturate voice on transmission (but will drop volume on handset ~6dB)
 000                                   ;AND over haul AGC to use 24 bit average level registering so level is monitored with AveSignalUSB
 000                                   ;GVA1 Try to implement tone detect parts
 000                                   ;GVA0 Project to get AGC to act on external MUX, but still use last 4 bits for decrease 3dB and 1.5dB in the Pico
 000                                   ;GV9B to do - mods to detect start and end tones
 000                                   ;GV96 readjust AGC settings and bit offsets
 000                                   ;GV93add back divide by 2 on transmit line 567
 000                                   ; GV51 remove level divide by 2 on transmit to compensate for drop in AGC level (so only reduces level for receive)
 000                                   ;GV50, drop DSP AGC levels back to just below as in GV45
 000                                   ;GV47 increase DSP AGC thresholds
 000                                   ;GV46 added further double on RF out amplitude
 000                                   ;GV45 Corrected resetting of AveSignalMSB to middle value so as to avoid double jump and increased allowable rang to avoid unnecessary jumps (abd corrected AGC wrapping in GV44 when limiting if greater than 44 rather than to 44 ie CALL Z not CALL NC !!!)
 000                                   ;GV44 add 1_5dB decrease - still need to correct AGC range (increase another factor 2) and decrease limits
 000                                   ;GV43 correct beacon phase wander
 000                                   ;GV42 disable UART streaming
 000                                   ;GV3F Add streaming over UART on TX (State bit 2 set)
 000                                   ;GV3E try adding small sine wave - not yet implemented
 000                                   ;For GV3D, need to add further routines, increaseAGC2 and increaseAGC4 that increase attenuation 6dB and 12dB respectively (within limits) - look at how AveSignalMSB is reset.
 000                                   ;For GV3B try to correct incorrect AGC operation with twice as many values
 000                                   ;store TX AGCvalue before warble (or when stable) and add 3dB steps to AGCvalue
 000                                   ;31/1/13 Added 12dB to BT mic level using Audiodouble
 000                                   ;GV38 Use audio double on transmitpath
 000                                   ;For GV37 Adjusted AGC thresholds and increased time constant a factor 8.
 000                                   ;31/12/12 increase volume and transmitted power by increasing AGC setting a factor of 2 (from 4,12 to 8,24 - AGCupp/lowthreshold). Also set AGCvalue to 06 INITIALY (may need to be adjusted) recall last AGCvalue when switch mode. Line 439 increase TX modulation.
 000                                   ;removed LPF
 000                                   ;Increased AGC setting -36 OK, 72 too high (bad clipping noise)
 000                                   ;Slow saturation of SSBamp
 000                                   ;Added BT signal not present flag (16/1/12)
 000                                   ;Try to fix failure to un-block DSP problem (18/11/11 in DSPblock routine)
 000                                   ;Uses phase representation of TX audio - works in study OK 18/11/11
 000                                   ;29/8/11 Increased audio frequency resolution to 16 bits
 000                                   ;19/8/11, tweaked audio scaling of TX
 000                                   ;Modified vor BT input
 000                                   ;This needs to be modified for COTS version at 49.152MHz - in particular calibration of audio frequency output to SSB modulator has been modified see line 398
 000                                   ; Inputs sine wave as audio
 000                                   ; 20/7 updated input and output ports for multipico version
 000                                   ; Feb 09 Start testing AGC part of streamed signal
 000                                   ; Now implementing on SSBN.mdl
 000                                   ;
 000                                   ; DSP routine for SSB picoblaze
 000                                   ;
 000                                   ; Implemented commands:
 000                                   ; 0 = RX mode
 000                                   ;Different AGC threshold values are now used for RX and TX
 000                                   ;CONSTANT AGClowthreshold,  6'd      ;;These are thresholds for the measured signal - Increase a factor of 2 17/4/14
 000                                   ;CONSTANT AGClowthreshold2,  2'd      ;;These are thresholds for the measured signal
 000                                   ;CONSTANT AGCInitial,  8'd      ;;This is mid way between thresholds Is upperthreshold2> SR0> minus 2
 000                                   ;CONSTANT AGCuppthreshold,  10'd
 000                                   ;CONSTANT AGCuppthreshold2,  16'd   ;3dB above first threshold
 000                                   ;CONSTANT AGCuppthreshold4,  22'd
 000                                   ;CONSTANT AGCuppthresholdRX2,  10'd   ;Change to 10 (June2017 after BCRC) Upp2 = 10 Upp =5 Initial = 4 low=2 low2=1
 000                                   ;CONSTANT AGCuppthresholdTX2,  6'd   ;Upp2=6 Upp=3 Initial=2 low=2 low2=1
 000                                   CONSTANT AGChigh, 40'd                              ;High threshold for AGC (accumulated over 32ms) (reduced back to 40)
 000                                   CONSTANT AGClow, 50'd                               ;Low threshold for AGC (accumulated over 1024ms) (increased from 20 with 512ms accumulation)
 000                                   CONSTANT AGClow2, 25'd                              ;Even lower threshold for AGC (accumulated over 1024ms)
 000                                   CONSTANT delay_1us_constant, 06                     ; Value (13)19 or 12? decimal suitable for 50MHz clock – about 6 for 33MHz?
 000                                   CONSTANT m, 8'd                                     ; No. of iterations for cordic
 000                                   CONSTANT m_plus_1, 9'd                              ; No. of iterations for cordic
 000                                   CONSTANT count_1000_lsb, E8                         ; lower 8-bits of 1000 count value
 000                                   CONSTANT count_1000_msb, 03                         ; upper 8-bits of 1000 count value
 000                                   CONSTANT half_pi_LSB, 00                            ;
 000                                   CONSTANT half_pi_MSB, 40                            ; 360 degrees = $10000
 000                                   CONSTANT audioTest, 2'd                             ; Frequency 2=800Hz, 3=1200Hz, 4=1.6kHz 7=2.8kHz
 000                                   ;Frequency values for start and stop tones
 000                                   ;CONSTANT StrtToneAInc,   9F
 000                                   ;CONSTANT StrtToneBInc,   69
 000                                   ;CONSTANT StopToneAInc,   5A
 000                                   ;CONSTANT StopToneBInc,   78
 000                                   ; FIR coefficients for 0 and 90 degree filterred signals, these are SIGNED values!!
 000                                   CONSTANT coeffI0MSB, F6                             ; Smallest coefficient (negative value!)
 000                                   CONSTANT coeffI0LSB, 92
 000                                   CONSTANT coeffI1MSB, F4
 000                                   CONSTANT coeffI1LSB, 8A
 000                                   CONSTANT coeffI2MSB, F2
 000                                   CONSTANT coeffI2LSB, CC
 000                                   CONSTANT coeffI3MSB, F1
 000                                   CONSTANT coeffI3LSB, 77
 000                                   CONSTANT coeffI4MSB, F0
 000                                   CONSTANT coeffI4LSB, A1
 000                                   CONSTANT coeffI5MSB, 40                             ; Actualy half value of peak
 000                                   CONSTANT coeffI5LSB, 00
 000                                   ; Q values are still signed but are all positive
 000                                   CONSTANT coeffQ0MSB, 00                             ; Smallest coefficient
 000                                   CONSTANT coeffQ0LSB, A7
 000                                   CONSTANT coeffQ1MSB, 05
 000                                   CONSTANT coeffQ1LSB, 2D
 000                                   CONSTANT coeffQ2MSB, 0C
 000                                   CONSTANT coeffQ2LSB, 83
 000                                   CONSTANT coeffQ3MSB, 1B
 000                                   CONSTANT coeffQ3LSB, 4F
 000                                   CONSTANT coeffQ4MSB, 5C
 000                                   CONSTANT coeffQ4LSB, 2F
 000                                   ; Registers
 000                                   NAMEREG sF, AveSignal1024ms                         ; In fact accumulate of magnitude over 1024ms
 000                                   NAMEREG sE, AveSignalMSB                            ;average up to 32ms
 000                                   NAMEREG sD, AveSignalLSB
 000                                   ;NAMEREG  sD, BaselineMSB                  ; In fact average of signed signal
 000                                   ;NAMEREG  sC, BaselineLSB
 000                                   NAMEREG sC, SineCtr                                 ;Aargh sB is used by the Cordic!! - but not used now
 000                                   ; registers sA-sD are used for longish term storage...!
 000                                   ; sA used for cordic calcs and FIR work for relative pos of roving ptr
 000                                   ; Scratch pad
 000                                   ; registers 0-8 used for cordic table:
 000                                   ; reg 0=45degrees
 000                                   ; ..
 000                                   ; reg 7=0.44761degrees
 000                                   ; Input port
 000                                   CONSTANT AudioMSB, 0'd
 000                                   CONSTANT AudioLSB, 1'd
 000                                   CONSTANT Strobe, 2'd                                ;     bit0=6kHz square wave - the rest are now zeros
 000                                   CONSTANT Command, 3'd                               ; From interface pico
 000                                   CONSTANT MltplyMSB, 4'd                             ; Top significant byte of multiplier output
 000                                   CONSTANT MltplyLSB, 5'd                             ; (only 16 bits retained)
 000                                   CONSTANT BTaudioMSB, 6'd                            ; Input from headset micro
 000                                   CONSTANT BTaudioLSB, 7'd                            ;
 000                                   CONSTANT SaturationBits, 8'd                        ;lowest 3 bits are the top 3 bits of the 18bit demod signal (indicate saturation) - the top 5 bits are zeros
 000                                   CONSTANT RAMdataLSB, 9'd
 000                                   CONSTANT Status, 10'd                               ;bit 0 is DSP2user fifo full, bit 1 is no BT audio stream from headset microphone, bit 2 is TX_high, bit 3 is signal received on (from tone detect not used Nov 2017)
 000                                   CONSTANT StartToneAmp, 11'd
 000                                   ; Output ports
 000                                   CONSTANT MSBAudio, 0'd
 000                                   CONSTANT LSBAudio, 1'd
 000                                   CONSTANT SSBAmp, 2'd
 000                                   CONSTANT CmdToUser, 3'd
 000                                   CONSTANT CoeffMSB, 4'd
 000                                   CONSTANT CoeffLSB, 5'd
 000                                   CONSTANT SignalMSB, 6'd
 000                                   CONSTANT SignalLSB, 7'd
 000                                   CONSTANT Data2archiveMSB, 10'd
 000                                   CONSTANT Data2archiveLSB, 11'd
 000                                   CONSTANT Controlbits, 12'd                          ; BIT OFFSETS:
 000                                   ; Bit offsets:
 000                                   CONSTANT EnMult, 1'd
 000                                   CONSTANT AckFIFO, 32'd                              ;   5 Acknowledge FIFO (present character)
 000                                   CONSTANT PhaseIncrement, 13'd
 000                                   CONSTANT AudioFreqLSB, 14'd
 000                                   CONSTANT AudioPhaseMSB, 15'd
 000                                   CONSTANT AudioPhaseLSB, 16'd
 000                                   CONSTANT EnableSpeaker, 17'd
 000                                   CONSTANT MUXport, 18'd                              ;New port to drive AGC MUX (middle 4 bits)- called AGCvalue in Sysgen model
 000                                   ;CONSTANT StartToneA,   19'd
 000                                   ;CONSTANT StartToneALong,   20'd
 000                                   ;CONSTANT StartToneB,   21'd
 000                                   ;CONSTANT StartToneBLong,   22'd
 000                                   ;CONSTANT NotUsed,   23'd
 000                                   CONSTANT AveSignal1024msport, 24'd
 000                                   CONSTANT AveSignalMSBport, 25'd
 000                                   CONSTANT AveSignalLSBport, 26'd
 000                                   CONSTANT MSBBTAudio, 27'd
 000                                   CONSTANT LSBBTAudio, 28'd
 000                                   ; Scratchpad registers
 000                                   ; 0-8 used for Cordic Table!
 000                                   CONSTANT AmpMSB, 10'd
 000                                   CONSTANT AmpLSB, 11'd                               ; Bit 0 toggles at 16kHz
 000                                   CONSTANT PhaseMSB, 12'd
 000                                   CONSTANT PhaseLSB, 13'd                             ; Is this necessary?
 000                                   CONSTANT AGCvalue, 14'd                             ; four times number of bits to shift (63-0) 63 is max attenuation
 000                                   CONSTANT VolSetting, 15'd
 000                                   CONSTANT OldPhaseMSB, 16'd
 000                                   CONSTANT AudioScratch, 17'd
 000                                   CONSTANT State, 18'd                                ; Bit 1 0=RX, 1=TX (TX_high), Bit 2 set is streaming TX data from UART, Bit 3 is 'Receiving' ie 0 when idle.
 000                                   ;CONSTANT NormalisedSignalMSB,   19'd                  ; Current signal MSB after AGC
 000                                   CONSTANT LVPtr, 20'd                                ; From HistoryStart to HistoryStart+41 (place to store most recent signal value)
 000                                   CONSTANT IaccuMSB, 21'd
 000                                   CONSTANT IaccuLSB, 22'd
 000                                   CONSTANT QaccuMSB, 23'd
 000                                   CONSTANT QaccuLSB, 24'd
 000                                   CONSTANT OldPhaseLSB, 25'd
 000                                   ; Scratch pad 30-69 used for sinewave - 20 values for sinewave, 40 for dirac
 000                                   CONSTANT startsine, 30'd
 000                                   CONSTANT endsine, 45'd
 000                                   CONSTANT HistoryStart, 70'd                         ; 2 bytes per historical sample - 21 2byte history values
 000                                   CONSTANT HistoryStart42, 112'd                      ; 2 bytes per historical sample - 21 2byte history values
 000                                   ; History values up to and including 111
 000                                   CONSTANT AGCvalueTX, 112'd
 000                                   CONSTANT AGCvalueRX, 113'd
 000                                   CONSTANT AGCcounter, 114'd                          ;store counter 0 to 255 to only perform AGC calc every 1 in 4 audio samples and sinewave increment every 8 samples
 000                                   ;Removed Tone related scratchregisters
 000                                   CONSTANT NormalisedMagMSB, 115'd                    ;Absolute value of current signal
 000                                   CONSTANT NormalisedMagLSB, 116'd                    ;Absolute value of current signal
 000                                   ;CONSTANT AGCupperThresholdRX2, 117'd ;This is in fact twice the Upper threshold SR0 for Upper threshold, SRO and +1 for lower threshold and SR0 again for lower threshold2
 000                                   ;CONSTANT AGCupperThresholdTX2, 118'd ;This is in fact twice the Upper threshold
 000                                   ;CONSTANT    AGCupperThresholdInUse, 119'd ;This is the value relevent to the current mode (RX/TX)
 000                                   CONSTANT AGCcounterMSB, 117'd                       ;Uses for 1024ms accumulation
 000                                   ;256 scratchpad addresses available
 000                                   ;GenerateCode        MEM       "S3eDSPprog.mem"
 000                                   ;start:              JUMP      cold_start       -Try without jump to $20 offset - should work!?
 000                                   ; Start of program (Jump instruction in preloaded memory!)
 000                                   ;                   ORG       $20
 000                                   ; pre-load scratchpad with cordic table.. 360 degrees is $0800 - then *32=$10000
 000  010FF                cold_start: LOAD s0, FF[255'd]                                  ; phase for 45 degrees- actually a bit less!
 001  2F000                            STORE s0, 00
 002  01097                            LOAD s0, 97[151'd]                                  ; phase for 26.565 degrees
 003  2F001                            STORE s0, 01
 004  01050                            LOAD s0, 50[80'd]                                   ; phase for 14.036 degrees
 005  2F002                            STORE s0, 02
 006  01029                            LOAD s0, 29[41'd]                                   ; phase for 7.125 degrees
 007  2F003                            STORE s0, 03
 008  01014                            LOAD s0, 14[20'd]                                   ; phase for 3.576 degrees
 009  2F004                            STORE s0, 04
 00A  0100A                            LOAD s0, 0A[10'd]                                   ; phase for 1.79 degrees
 00B  2F005                            STORE s0, 05
 00C  01005                            LOAD s0, 05[5'd]                                    ; phase for 0.895 degrees
 00D  2F006                            STORE s0, 06
 00E  01003                            LOAD s0, 03[3'd]                                    ; phase for 0.448 degrees
 00F  2F007                            STORE s0, 07
 010  01001                            LOAD s0, 01[1'd]                                    ; phase for 0.224 degrees
 011  2F008                            STORE s0, 08
 012                                   ;Do still need this with new AGC !!
 012  01032                            LOAD s0, 32[50'd]
 013  2F070                            STORE s0, 70[AGCvalueTX]
 014  01034                            LOAD s0, 34[52'd]
 015  2F071                            STORE s0, 71[AGCvalueRX]                            ;set to lowish value for RX
 016                                   ;    LOAD   s0,AGCuppthresholdRX2
 016                                   ;    STORE     s0,AGCupperThresholdRX2
 016                                   ;    LOAD   s0,AGCuppthresholdTX2
 016                                   ;    STORE     s0,AGCupperThresholdTX2
 016                                   ;Sinewave table: Step through this 1 in 8 loops to give 62.5Hz sinewave on transmission
 016  01002                            LOAD s0, 02[2'd]                                    ; 1st element of sinewave
 017  2F01E                            STORE s0, 1E[30'd]
 018  01003                            LOAD s0, 03[3'd]                                    ; 2nd element of sinewave
 019  2F01F                            STORE s0, 1F[31'd]
 01A  01004                            LOAD s0, 04[4'd]                                    ; 3rd element of sinewave
 01B  2F020                            STORE s0, 20[32'd]
 01C  01004                            LOAD s0, 04[4'd]                                    ; etc
 01D  2F021                            STORE s0, 21[33'd]
 01E  01004                            LOAD s0, 04[4'd]                                    ; etc
 01F  2F022                            STORE s0, 22[34'd]
 020  01003                            LOAD s0, 03[3'd]                                    ;
 021  2F023                            STORE s0, 23[35'd]
 022  01002                            LOAD s0, 02[2'd]                                    ; etc
 023  2F024                            STORE s0, 24[36'd]
 024  01000                            LOAD s0, 00[0'd]                                    ; etc
 025  2F025                            STORE s0, 25[37'd]
 026  010FE                            LOAD s0, FE[254'd]                                  ; etc
 027  2F026                            STORE s0, 26[38'd]
 028  010FD                            LOAD s0, FD[253'd]                                  ;
 029  2F027                            STORE s0, 27[39'd]
 02A  010FC                            LOAD s0, FC[252'd]                                  ; etc
 02B  2F028                            STORE s0, 28[40'd]
 02C  010FC                            LOAD s0, FC[252'd]                                  ; etc
 02D  2F029                            STORE s0, 29[41'd]
 02E  010FC                            LOAD s0, FC[252'd]                                  ; etc
 02F  2F02A                            STORE s0, 2A[42'd]
 030  010FD                            LOAD s0, FD[253'd]                                  ;
 031  2F02B                            STORE s0, 2B[43'd]
 032  010FE                            LOAD s0, FE[254'd]                                  ; etc
 033  2F02C                            STORE s0, 2C[44'd]
 034  01000                            LOAD s0, 00[0'd]                                    ; etc
 035  2F02D                            STORE s0, 2D[45'd]
 036                                   ;                LOAD      s0, 254'd             ; etc
 036                                   ;                   STORE     s0, 46'd
 036                                   ;                  LOAD      s0, 0'd             ;
 036                                   ;                 STORE     s0, 47'd
 036                                   ;                LOAD      s0, 247'd             ; etc
 036                                   ;               STORE     s0, 48'd
 036                                   ;              LOAD      s0, 0'd               ; etc
 036                                   ;             STORE     s0, 49'd
 036  0102A                            LOAD s0, 2A[42'd]
 037  2D002                            OUTPUT s0, 02[SSBAmp]
 038  01000                            LOAD s0, 00
 039  2F012                            STORE s0, 12[State]                                 ; Set state to 0 ie receive
 03A  01C1E                            LOAD sC[SineCtr], 1E[startsine]                     ; reset SineCtr
 03B  01046                            LOAD s0, 46[HistoryStart]                           ;aargh - had commented this out!!!! May2013
 03C  2F014                            STORE s0, 14[LVPtr]
 03D                                   ; Initialise AGC
 03D  010FF                            LOAD s0, FF[255'd]                                  ; - 1
 03E  2F00F                            STORE s0, 0F[VolSetting]
 03F  01020                            LOAD s0, 20[32'd]                                   ;Start with medium attenuation (max 63) value for external AGC MUX version
 040  2F00E                            STORE s0, 0E[AGCvalue]                              ;maybe start with 16 (was 8)?
 041                                   ; Routine to look at lowest bit of Strobe to detect rising edge.
 041  09002             AwaitAudioVal: INPUT s0, 02[Strobe]
 042  03001                            AND s0, 01                                          ; look only at lowest bit
 043  1D001                            COMPARE s0, 01
 044  32041                            JUMP Z, 041[AwaitAudioVal]                          ; if 1 wait...
 045  09002                 AwaitRise: INPUT s0, 02[Strobe]
 046  03001                            AND s0, 01                                          ; look only at lowest bit
 047  1D000                            COMPARE s0, 00
 048  32045                            JUMP Z, 045[AwaitRise]                              ; if 0 still, wait a bit more...
 049  09008                            INPUT s0, 08[SaturationBits]                        ;to get 3 "saturation bits"
 04A  1D007                            COMPARE s0, 07
 04B  32056                            JUMP Z, 056[Allswell]
 04C  1D000                            COMPARE s0, 00
 04D  32056                            JUMP Z, 056[Allswell]
 04E                                   ;So is hitting the rails!! but don't act on AGC as causes too much of a jump! - just clip instead!
 04E                                   ;     FETCH s1,AGCvalue
 04E                                   ;     COMPARE s1,60'd
 04E                                   ;     JUMP NC,isTopAGCalready  ;if AGCvalue 60,61,62 or 63
 04E                                   ;     ADD  s1,04
 04E                                   ;     AND  s1,FC ;Get rid of lower 2 bits
 04E                                   ;     STORE s1,AGCvalue ;increase attenuation!
 04E  1D004           isTopAGCalready: COMPARE s0, 04
 04F  3A053                            JUMP C, 053[SaturatedPositive]
 050  01000                            LOAD s0, 00                                         ;Is actually saturated negative
 051  01180                            LOAD s1, 80                                         ;This is the most negative number
 052  22058                            JUMP 058[HaveInput]
 053  010FF         SaturatedPositive: LOAD s0, FF
 054  0117F                            LOAD s1, 7F
 055  22058                            JUMP 058[HaveInput]
 056  09001                  Allswell: INPUT s0, 01[AudioLSB]                              ; Now have the new value (different addresses from before!)
 057  09100                            INPUT s1, 00[AudioMSB]
 058                                   ; perform automatic gain contrl
 058  0B30E                 HaveInput: FETCH s3, 0E[AGCvalue]                              ;This needs to be corrected from the value from tone detect when 'Receiving'
 059  2011A                            CALL 11A[AGC]                                       ;Now with external MUX to adjust AGC
 05A  200FC                            CALL 0FC[Abs16Val]
 05B  2F373                            STORE s3, 73[NormalisedMagMSB]
 05C  2F274                            STORE s2, 74[NormalisedMagLSB]
 05D                                   ;Now check if we are transmitting this value!
 05D  0B212                            FETCH s2, 12[State]
 05E  03202                            AND s2, 02
 05F  1D202                            COMPARE s2, 02                                      ; Check if transmit mode
 060  320D6                            JUMP Z, 0D6[TransmitAudio]
 061  2D100                            OUTPUT s1, 00[MSBAudio]
 062  2D001                            OUTPUT s0, 01[LSBAudio]
 063  200B7                            CALL 0B7[AudioDouble]                               ;Add 12dB back in Nov 2017 to increase received BT volume
 064  200B7                            CALL 0B7[AudioDouble]                               ;increase volume 12 dB! Add may 16
 065                                   ;      CALL AudioDouble     ;increase volume 12 dB!
 065                                   ;      AND s0, f8   ;Make bottom 3 bits zero in case is 13 bit linear and these are attenuation bits
 065  2D11B                            OUTPUT s1, 1B[MSBBTAudio]
 066  2D01C                            OUTPUT s0, 1C[LSBBTAudio]
 067                                   ;Display demodulated values only in receive
 067  2D10A                            OUTPUT s1, 0A[Data2archiveMSB]                      ;This is received demodulated data
 068  2D00B                            OUTPUT s0, 0B[Data2archiveLSB]
 069  14000                            SLA s0                                              ;shift top bit into carry
 06A  13100                            ADDCY s1, 00                                        ;s1 now rounded value of upper 8 bits (but s0 wasted!)
 06B                                   ; Check if there is a command from the User, return here with JUMP command from TransmitAudio macro
 06B  09003      BackfromTransmitting: INPUT s0, 03[Command]                               ; Check if FIFO character present
 06C  1D080                            COMPARE s0, 80[128'd]                               ; is there a character?
 06D  38241                            CALL C, 241[Respond2Fifo]
 06E                                   ; Accumulate magnitudes over 32 and 1024ms
 06E                                   ;__________________________________________________________________________________________
 06E  0B373                            FETCH s3, 73[NormalisedMagMSB]
 06F  10D30                            ADD sD[AveSignalLSB], s3
 070  13E00                            ADDCY sE[AveSignalMSB], 00
 071  3808C                            CALL C, 08C[FourTimestooBig]                        ; Has saturated so need to go and cool it! - increase AGC by 16 steps!
 072  0B30E                            FETCH s3, 0E[AGCvalue]                              ;put AGCvalue in s3 incase we call BitTooBig
 073  1DE28                            COMPARE sE[AveSignalMSB], 28[AGChigh]
 074  3C094                            CALL NC, 094[BitTooBig]                             ;Accumulated magnitude during 32ms period is too big
 075  0B372                            FETCH s3, 72[AGCcounter]
 076  11301                            ADD s3, 01
 077  2F372                            STORE s3, 72[AGCcounter]
 078  1D300                            COMPARE s3, 00                                      ;Has it overflowed - ie after 32ms
 079  36041                            JUMP NZ, 041[AwaitAudioVal]                         ;Loop back if not
 07A                                   ;The following executes every 32ms
 07A                                   ;Add another counter here to go to 32x32ms
 07A  0B30E                            FETCH s3, 0E[AGCvalue]                              ;put AGCvalue in s3 incase we call BitTooBig
 07B  10FE0                            ADD sF[AveSignal1024ms], sE[AveSignalMSB]           ;accumulate 32ms sum into this register
 07C  38094                            CALL C, 094[BitTooBig]                              ;If 1s average goes over 255, then increase AGCvalue (added 7 July2017)
 07D  2DE19                            OUTPUT sE[AveSignalMSB], 19[AveSignalMSBport]       ;AveSignalMSB is actually a register 32ms average! - before resetting to zero!
 07E  2DD1A                            OUTPUT sD[AveSignalLSB], 1A[AveSignalLSBport]       ;AveSignalMSB is actually a register!
 07F  01E00                            LOAD sE[AveSignalMSB], 00                           ;and reset 32ms sum to zero
 080  0B375                            FETCH s3, 75[AGCcounterMSB]
 081  11301                            ADD s3, 01
 082  2F375                            STORE s3, 75[AGCcounterMSB]                         ;Increment second byte counter
 083  0331F                            AND s3, 1F                                          ;get 0-31 count of 32ms
 084  1D300                            COMPARE s3, 00                                      ;Are we at 1024ms
 085  36041                            JUMP NZ, 041[AwaitAudioVal]
 086                                   ;Have reached 1024ms
 086                                   ;Output AveSignalMSB to PS - ever ~0.5s AveSignal1024ms
 086  2DF18                            OUTPUT sF[AveSignal1024ms], 18[AveSignal1024msport] ;1024ms average
 087  0B30E                            FETCH s3, 0E[AGCvalue]
 088                                   ;AGCvalue still in s3
 088  1DF32                            COMPARE sF[AveSignal1024ms], 32[AGClow]
 089  380A6                            CALL C, 0A6[BitTooLow]
 08A  01F00                            LOAD sF[AveSignal1024ms], 00                        ;and reset 1024ms sum to zero (had forgotten this!!)
 08B                                   ;disable the following 7 lines for the moment
 08B                                   ;Don't do this if Speaker is ON - ie is receiving a message, but on first time that Speaker on is high do a correction of AGCvalue
 08B                                   ;   INPUT s0,Status
 08B                                   ;   AND s0,08  ;Look at speaker on bit - this is information from the tone detect pico!
 08B                                   ;   COMPARE s0,08
 08B                                   ;   JUMP Z,Receiving ;Check if receiving state is alread latched or whether this is first time to notice that we are receiving
 08B                                   ;If not receiving a signal better reset state bit 3
 08B                                   ;   FETCH     s1, State
 08B                                   ;              AND        s1, F7  ;bit 3 zero
 08B                                   ;             STORE     s1, State           ; reset bit 3 (ie set internal DSP state to 'not receiving')
 08B                                   ;ContinueReceiving:
 08B                                   ; Now adjust AGC value if necessary
 08B  22041                            JUMP 041[AwaitAudioVal]
 08C                                   ; -------------This is end of main loop--------------------------------
 08C                                   ;Well big!!
 08C  0B30E           FourTimestooBig: FETCH s3, 0E[AGCvalue]
 08D  01E00                            LOAD sE[AveSignalMSB], 00                           ;reset 32ms accumulation - so only increase once!
 08E  01204             FourTimesLoop: LOAD s2, 04
 08F  20110                            CALL 110[increaseAGC]                               ;need to do this just 4 times!
 090  19201                            SUB s2, 01                                          ;decrement counter
 091  1D200                            COMPARE s2, 00                                      ;Has counter reached zero
 092  3608E                            JUMP NZ, 08E[FourTimesLoop]
 093  25000                            RETURN                                              ;Return after 16 loops
 094                                   ; So need to adjust AGCvalue:
 094                                   ;Enter with AGCvalue in s3
 094  01E00                 BitTooBig: LOAD sE[AveSignalMSB], 00                           ;and reset 32ms sum to zero
 095  20110                            CALL 110[increaseAGC]                               ; signal slightly too big, increase attenuation by 1_5dB
 096  25000                            RETURN                                              ;keep to a single step
 097  2009B                            CALL 09B[reduceAveSignalMSB_1_5dB]                  ;reduce magnitude of
 098  1DE28                            COMPARE sE[AveSignalMSB], 28[AGChigh]               ;see if we need to reduce the level (ie increase AGC) some more
 099  3E094                            JUMP NC, 094[BitTooBig]                             ;loop back if still too big
 09A  25000                            RETURN 
 09B                                   ;this effectively multiplies AveSignalMSB by 0.84375 (ie reduces it by 1.5dB) - maybe don't need?
 09B  14E0E  reduceAveSignalMSB_1_5dB: SR0 sE[AveSignalMSB]                                ;half of AveSignalMSB
 09C  002E0                            LOAD s2, sE[AveSignalMSB]
 09D  14E0E                            SR0 sE[AveSignalMSB]                                ;quarter of AveSignalMSB
 09E  102E0                            ADD s2, sE[AveSignalMSB]
 09F  14E0E                            SR0 sE[AveSignalMSB]                                ;eighth of AveSignalMSB
 0A0  14E0E                            SR0 sE[AveSignalMSB]                                ;16th of AveSignalMSB
 0A1  102E0                            ADD s2, sE[AveSignalMSB]
 0A2  14E0E                            SR0 sE[AveSignalMSB]                                ;32nd of AveSignalMSB
 0A3  102E0                            ADD s2, sE[AveSignalMSB]                            ;now should be about 0.84375 times original value
 0A4  00E20                            LOAD sE[AveSignalMSB], s2                           ;put back in AveSignalMSB
 0A5  25000                            RETURN 
 0A6                                   ;Again enter with AGCvalue in s3
 0A6  20115                 BitTooLow: CALL 115[decreaseAGC]
 0A7  1DF19                            COMPARE sF[AveSignal1024ms], 19[AGClow2]            ;Is the level 2 times too low?
 0A8  3D000                            RETURN NC                                           ;Return in Ave level over 1024ms is greater than the half the lower threshold
 0A9  20115                            CALL 115[decreaseAGC]
 0AA  20115                            CALL 115[decreaseAGC]
 0AB  20115                            CALL 115[decreaseAGC]                               ;make up to a drop in AGCvalue of 4 (reduce attenuation a factor 2) to bring volume up quickly
 0AC  25000                            RETURN 
 0AD                                   ;Receiving: FETCH     s1, State
 0AD                                   ;   AND       s1,08 ;look at current state of 'receiving' bit.
 0AD                                   ;   COMPARE   s1,08   ;This is looking at the internal recorded state rather than the 'Status' input which takes bit 3 input from the TD pico
 0AD                                   ;   JUMP     Z,Somewhere??; ;Carry on if already acnowledged in receive mode (and still perform AGC)
 0AD                                   ;   FETCH     s1, State
 0AD                                   ;
 0AD                                   ;           OR        s1, 08
 0AD                                   ;          STORE     s1, State           ; set bit 3 (ie set internal DSP state to 'receiving')
 0AD                                   ;!!!!!!!!!!!!!!!!!!!!!!!!! is this really needed??? - maybe need to return here, or jump??
 0AD                                   ;Now update AGC value
 0AD                                   ;First check if received tone is too strong and need to increase attenuation - Need to check Target values!!!!!!!!!!!!!!!!!!!!!!!!!!!!! (23/4/17)
 0AD                                   ;   FETCH s3, AGCvalue
 0AD                                   ;   INPUT s1,StartToneAmp
 0AD                                   ;   COMPARE s1,36'd  ;is it 36 of bigger (ie 1.5dB above target value of 30)
 0AD                                   ;   CALL NC,increaseAGC
 0AD                                   ;   COMPARE s1,43'd  ;is it 43 of bigger
 0AD                                   ;   CALL NC,increaseAGC
 0AD                                   ;   COMPARE s1,51'd  ;is it 51 of bigger
 0AD                                   ;   CALL NC,increaseAGC
 0AD                                   ;   COMPARE s1,61'd  ;is it 61 of bigger
 0AD                                   ;   CALL NC,increaseAGC
 0AD                                   ;   COMPARE s1,72'd  ;is it 72 of bigger
 0AD                                   ;   CALL NC,increaseAGC
 0AD                                   ;   COMPARE s1,85'd  ;is it 85 of bigger
 0AD                                   ;   CALL NC,increaseAGC
 0AD                                   ;   COMPARE s1,101'd  ;is it 101 of bigger
 0AD                                   ;   CALL NC,increaseAGC
 0AD                                   ;   COMPARE s1,121'd  ;is it 121 of bigger
 0AD                                   ;   CALL NC,increaseAGC
 0AD                                   ;   COMPARE s1,143'd  ;is it 143 of bigger
 0AD                                   ;   CALL NC,increaseAGC
 0AD                                   ;   COMPARE s1,170'd  ;is it 170 of bigger
 0AD                                   ;   CALL NC,increaseAGC
 0AD                                   ;   COMPARE s1,202'd  ;is it 202 of bigger
 0AD                                   ;   CALL NC,increaseAGC
 0AD                                   ;   COMPARE s1,241'd  ;is it 241 of bigger
 0AD                                   ;   CALL NC,increaseAGC
 0AD                                   ;
 0AD                                   ;   COMPARE s1,26'd  ;is it less than 26 (ie 1.5dB below target value of 30)
 0AD                                   ;   CALL C,decreaseAGC
 0AD                                   ;   COMPARE s1,22'd  ;is it less than 22
 0AD                                   ;   CALL C,decreaseAGC
 0AD                                   ;   COMPARE s1,18'd  ;is it less than 18
 0AD                                   ;   CALL C,decreaseAGC
 0AD                                   ;   COMPARE s1,15'd  ;is it less than 15
 0AD                                   ;   CALL C,decreaseAGC
 0AD                                   ;   COMPARE s1,13'd  ;is it less than 13
 0AD                                   ;   CALL C,decreaseAGC
 0AD                                   ;   COMPARE s1,11'd  ;is it less than 11
 0AD                                   ;   CALL C,decreaseAGC
 0AD                                   ;   COMPARE s1,9'd  ;is it less than 9
 0AD                                   ;   CALL C,decreaseAGC
 0AD                                   ;   COMPARE s1,8'd  ;is it less than 8
 0AD                                   ;   CALL C,decreaseAGC
 0AD                                   ;
 0AD                                   ;Now updata AGCvalue
 0AD                                   ;   STORE s3, AGCvalue
 0AD                                   ;LOOK carefully at this as may need to do AGC (and so do a return)
 0AD                                   ;            JUMP      AwaitAudioVal
 0AD                                   ;Routine to take 16 bit value in s3,s2 and shift right by 5 to divide by 32 and leave value in s3,s2
 0AD                                   ;Assumes this is an unsigned numbers - normally used on a magnitude.
 0AD  200B2                  Divide32: CALL 0B2[Divide4]
 0AE  200B2                            CALL 0B2[Divide4]
 0AF  1430E                            SR0 s3
 0B0  14208                            SRA s2
 0B1  25000                            RETURN 
 0B2  1430E                   Divide4: SR0 s3
 0B3  14208                            SRA s2
 0B4  1430E                            SR0 s3
 0B5  14208                            SRA s2
 0B6  25000                            RETURN 
 0B7                                   ;This routine aims to double the signed analogue value in s0,s1 by finding sign of the value and doubling if small, increasing magnitude by 32 if less than 95 but more than 32 then limiting to 127 if more than 95
 0B7  1D180               AudioDouble: COMPARE s1, 80[128'd]
 0B8  3A0C6                            JUMP C, 0C6[Posvalue]
 0B9                                   ;otherwise must be negative
 0B9  1D1E1                  Negvalue: COMPARE s1, E1[225'd]                               ;256-31
 0BA  3A0BE                            JUMP C, 0BE[islessthanneg31]
 0BB  14006                            SL0 s0
 0BC  14100                            SLA s1                                              ;double value
 0BD  25000                            RETURN 
 0BE  1D1C1           islessthanneg31: COMPARE s1, C1[193'd]                               ;256-63
 0BF  3A0C2                            JUMP C, 0C2[islessthanneg63]
 0C0  19120                            SUB s1, 20[32'd]
 0C1  25000                            RETURN 
 0C2  1410A           islessthanneg63: SRX s1
 0C3  14008                            SRA s0                                              ;half value
 0C4  19140                            SUB s1, 40[64'd]
 0C5  25000                            RETURN 
 0C6  1D120                  Posvalue: COMPARE s1, 20[32'd]
 0C7  3E0CB                            JUMP NC, 0CB[ismorethan31]
 0C8  14006                            SL0 s0
 0C9  14100                            SLA s1                                              ;double value
 0CA  25000                            RETURN 
 0CB  1D140              ismorethan31: COMPARE s1, 40[64'd]
 0CC  3E0CF                            JUMP NC, 0CF[ismorethan63]                          ;positive and 64 or greater
 0CD  11120                            ADD s1, 20[32'd]
 0CE  25000                            RETURN 
 0CF  1410A              ismorethan63: SRX s1                                              ;sign extension should be zero!
 0D0  14008                            SRA s0
 0D1  11140                            ADD s1, 40[64'd]
 0D2  25000                            RETURN 
 0D3                                   ;-----------End Audio double
 0D3                                   ;Divides 16 bit signed value in s0,s1 by 2.
 0D3  1410A                   Divide2: SRX s1
 0D4  14008                            SRA s0
 0D5  25000                            RETURN 
 0D6                                   ;SUB16bit:   SUB    s8,s0
 0D6                                   ;     SUBC   s9,s1    ;16 bit subtract
 0D6                                   ;     RETURN
 0D6                                   ;ADD16bit:   ADD    s8,s0
 0D6                                   ;     ADDC   s9,s1    ;16 bit addition
 0D6                                   ;     RETURN
 0D6                    TransmitAudio: 
 0D6                                   ;     IN  s2,Status
 0D6                                   ;     AND s2,2  ;look at bit 1
 0D6                                   ;In this version switching to BT input is through external multiplexer to go through emphasis filter
 0D6                                   ;     COMP s2,0  ;True if BT signal present
 0D6                                   ;     JUMP NZ,SkipNoBT   ;keep value from ADC if flag set
 0D6                                   ;     IN  s0,BTaudioLSB  ;Use BT values instead if present
 0D6                                   ;     IN  s1,BTaudioMSB
 0D6                                   ;     CALL AudioDouble     ;increase volume 6 dB!  14/3/15
 0D6                         SkipNoBT: 
 0D6                                   ;Nov 2014 - have reduced DSP AGC level, so shouldn't need to do this? -reinstate Feb2015
 0D6                                   ;                SRX  s1    ;halve value before FIR to keep I and Q below $30 limit after FIR for CORDIC
 0D6                                   ;                SRA  s0
 0D6                                   ;Store data in RAM
 0D6                                   ;       OUTPUT     s0,Data2archiveLSB
 0D6                                   ;       OUTPUT     s1,Data2archiveMSB
 0D6  2014B                            CALL 14B[PerformFIR]
 0D7                                   ;This should have decreased amplitude by about 6dB
 0D7  2D10A                            OUTPUT s1, 0A[Data2archiveMSB]
 0D8  2D00B                            OUTPUT s0, 0B[Data2archiveLSB]
 0D9                                   ;need to make sure that s3/s2 and s1/s0 DO NOT EXCEED $3000, ie 48 in the MSBs!
 0D9  201D6                            CALL 1D6[cordic]                                    ;This is upsettng the AGC when sinectr used sB!
 0DA                                   ;April 2017 try to stop tx saturation. - July cancel 2 of the doublings (in case a problem of noise at low mic signal!)
 0DA  200F0                            CALL 0F0[TryAndDouble]                              ;Bump amplitude to saturate! (Jan 2016)
 0DB  200F0                            CALL 0F0[TryAndDouble]
 0DC                                   ;     CALL TryAndDouble
 0DC                                   ;     CALL TryAndDouble
 0DC  200F0                            CALL 0F0[TryAndDouble]                              ;try add for upgrade of production code TRY ADDING AGAIN (Sept 17)
 0DD                           OutAmp: 
 0DD                                   ;_______________________________
 0DD                                   ;Test value by sending out to Uart - shift this section as required - but check s3 not used! Disable in GV44a to allow receipt of other values!
 0DD                                   ;       LOAD   s3,s1
 0DD                                   ;       SRX   s3             ;make sure am not spoiling s3!!!!!
 0DD                                   ;                     OUT       s3, CmdToUser    ;Send amp in 7 bits (divide by 2!) to user pico to send to UART
 0DD                                   ;__________________________________
 0DD  2D102                            OUTPUT s1, 02[SSBAmp]                               ;********************disable for beacon tests
 0DE  0B310                            FETCH s3, 10[OldPhaseMSB]
 0DF  0B219                            FETCH s2, 19[OldPhaseLSB]
 0E0  2F510                            STORE s5, 10[OldPhaseMSB]
 0E1  2F419                            STORE s4, 19[OldPhaseLSB]                           ;s2,3 old phase, s4,5 new phase
 0E2  2D30F                            OUTPUT s3, 0F[AudioPhaseMSB]                        ;send old phase directly
 0E3  2D210                            OUTPUT s2, 10[AudioPhaseLSB]                        ;send old phase directly
 0E4  18420                            SUB s4, s2
 0E5  1A530                            SUBCY s5, s3                                        ;New phase-old phase
 0E6  1450A                            SRX s5
 0E7  00350                            LOAD s3, s5                                         ;divide MSB by2 and copy
 0E8  1430A                            SRX s3
 0E9  1430A                            SRX s3                                              ;s5/4
 0EA  10530                            ADD s5, s3
 0EB  1430A                            SRX s3
 0EC  1430A                            SRX s3                                              ;s5/16, s5 should now be 4/3rds of Phase shift/2^9, or 2/3rds of phase shift/2^8 (should be 2/3rds of s5/2^11) so need further 2^3 attenuaion)
 0ED  10530                            ADD s5, s3
 0EE  2D50D                            OUTPUT s5, 0D[PhaseIncrement]
 0EF  2206B                            JUMP 06B[BackfromTransmitting]
 0F0  1D140              TryAndDouble: COMPARE s1, 40[64'd]                                ;see if it is not too big already
 0F1  3E0F5                            JUMP NC, 0F5[BiggerThan63]                          ;Skip if too big
 0F2  14006                            SL0 s0                                              ;add 6dB 4/10/11
 0F3  14100                            SLA s1
 0F4  25000                            RETURN 
 0F5  1D181              BiggerThan63: COMPARE s1, 81[129'd]
 0F6  3E0F9                            JUMP NC, 0F9[BiggerThan128]
 0F7  11140                            ADD s1, 40[64'd]
 0F8  25000                            RETURN 
 0F9  1410E             BiggerThan128: SR0 s1                                              ;half value (127 max value)
 0FA  11180                            ADD s1, 80[128'd]                                   ;add 128 (gives 255 max)
 0FB  25000                            RETURN 
 0FC                                   ;Enter with signed 16 bit value in s1,s0 and return magnitude in s3,s2
 0FC  00310                  Abs16Val: LOAD s3, s1
 0FD  00200                            LOAD s2, s0
 0FE  1D180                            COMPARE s1, 80[128'd]
 0FF  39000                            RETURN C
 100  01300                            LOAD s3, 00
 101  01200                            LOAD s2, 00
 102  18200                            SUB s2, s0
 103  1A310                            SUBCY s3, s1
 104  25000                            RETURN 
 105  1D380                    absval: COMPARE s3, 80[128'd]
 106  3C108                            CALL NC, 108[makeposval]
 107  25000                            RETURN 
 108                                   ; Turn negative value in s3 into a positive one (well will actualy make a positive value negative as well).
 108  01400                makeposval: LOAD s4, 00
 109  18430                            SUB s4, s3
 10A  00340                            LOAD s3, s4
 10B  25000                            RETURN 
 10C                                   ;invert value - actually same as makeposval, but works on s1
 10C  01400                 invertval: LOAD s4, 00
 10D  18410                            SUB s4, s1
 10E  00140                            LOAD s1, s4
 10F  25000                            RETURN 
 110                                   ;Feb 2013 icrease number of AGC steps factor 2 and another factor 2 July 2013 (now granularity 1.5dB)
 110                                   ; increment attenuation
 110  1D33F               increaseAGC: COMPARE s3, 3F[63'd]                                ; was44
 111  3D000                            RETURN NC                                           ; don't do anything if already 63 or bigger (was 44 (was 22, before that 11))
 112  11301                            ADD s3, 01[1'd]                                     ; so yes signal really has been too big for too long!
 113  2F30E                            STORE s3, 0E[AGCvalue]                              ;put s3 back in AGCvalue
 114  25000                            RETURN 
 115                                   ; decrement attenuation
 115  1D300               decreaseAGC: COMPARE s3, 00                                      ; was232
 116  31000                            RETURN Z                                            ; don't do anything if already  0   (was 232 ie -24 (was 244, before that 250 ie -6) )
 117                                   ;    LOAD      s2,AveSignalMSB - this didn't seem to do anything (A0)
 117  19301                            SUB s3, 01                                          ; so yes signal really has been too small for too long!
 118  2F30E                            STORE s3, 0E[AGCvalue]                              ;put s3 back in AGCvalue
 119  25000                            RETURN 
 11A                                   ; AGC takes 16 bit value, MSB in s1, LSB in s0 and returns normalised 16 bit value in s1,s0 using AGC value from s3, using external MUX for coarse control
 11A                                   ;AGC value in s3 should vary  0-63 in this version - higher value is higher attenuation so use higher significant bits on input MUX (4 bits - 16 inputs)
 11A                                   ; This routine can also be use for the volume setting if value put in s3 ????????
 11A  0920A                       AGC: INPUT s2, 0A[Status]
 11B  03206                            AND s2, 06                                          ;look at bit 1 and 2
 11C                                   ;In this version switching to BT input is through external multiplexer to go through emphasis filter
 11C  1D204                            COMPARE s2, 04                                      ;True if TX_high - only look at bit 2
 11D  31000                            RETURN Z                                            ;Don't do anything if TX_high
 11E  2D312                            OUTPUT s3, 12[MUXport]                              ;Now simply use middle 4 bits to drive the MUX (or 'AGCvalue' in sysgen model) (this had been lower in the program and used the lowest bits)
 11F  1430A                            SRX s3                                              ;divide s3 by 2 to get last AGC and put last bit into carry
 120  38133                            CALL C, 133[decrease1_5dB]                          ;if last bit set then reduce by 3dB
 121  1430A                            SRX s3                                              ;divide s3 by 2 to get old AGC and put last bit into carry
 122  38124                            CALL C, 124[decrease3dB]                            ;if last bit set then reduce by 3dB
 123  25000                            RETURN 
 124                                   ;AGCloop:            COMPARE      s3, 00
 124                                   ;                   RETURN       Z                   ; escape if AGC value zero
 124                                   ;                  SRX       s2
 124                                   ;                 SRA       s1
 124                                   ;                SRA       s0
 124                                   ;               SUB       s3, 1
 124                                   ;              JUMP      AGCloop
 124                                   ;negAGC:             COMP      s3, 0
 124                                   ;     RET       Z                   ; escape if AGC value zero
 124                                   ;                   SL0       s0      ;increase 24 bit value by 6dB
 124                                   ;                  SLA       s1
 124                                   ;                 SLA       s2
 124                                   ;                ADD       s3, 1
 124                                   ;               JUMP      negAGC
 124                                   ;this decreases value in (not s2),s1,s0 by factor 0.6875 (roughly 1/sqrt(2)) s2 not used with external MUX
 124  1410A               decrease3dB: SRX s1
 125  14008                            SRA s0
 126  00400                            LOAD s4, s0
 127  00510                            LOAD s5, s1
 128  1450A                            SRX s5
 129  14408                            SRA s4
 12A  1450A                            SRX s5
 12B  14408                            SRA s4
 12C  10040                            ADD s0, s4
 12D  12150                            ADDCY s1, s5
 12E  1450A                            SRX s5
 12F  14408                            SRA s4
 130  10040                            ADD s0, s4
 131  12150                            ADDCY s1, s5
 132  25000                            RETURN 
 133                                   ;multiply by 0.875 - modified for using only s1,s0
 133  1410A             decrease1_5dB: SRX s1
 134  14008                            SRA s0
 135  00400                            LOAD s4, s0
 136  00510                            LOAD s5, s1
 137  1450A                            SRX s5
 138  14408                            SRA s4
 139  10040                            ADD s0, s4
 13A  12150                            ADDCY s1, s5
 13B  1450A                            SRX s5
 13C  14408                            SRA s4
 13D  10040                            ADD s0, s4
 13E  12150                            ADDCY s1, s5
 13F  25000                            RETURN 
 140                                   ;multiply s2 by factor 1.25 (only used for AveSignalMSB) (not needed?)
 140                                   ;increase1_5dB:      LOAD   s6,s2
 140                                   ;     SRX       s6
 140                                   ;                   SRX       s6
 140                                   ;                  ADD    s2,s6
 140                                   ;
 140                                   ;     RET
 140                                   ;This is never called???????????????????
 140  01308                   AGCtest: LOAD s3, 08
 141  00010                            LOAD s0, s1
 142  00120                            LOAD s1, s2
 143  25000                            RETURN 
 144                                   ;This is never called???????????????????
 144  1D300                AGClooptst: COMPARE s3, 00
 145  31000                            RETURN Z                                            ; escape if AGC value zero
 146  1420A                            SRX s2
 147  14108                            SRA s1
 148  14008                            SRA s0
 149  19301                            SUB s3, 01
 14A  22144                            JUMP 144[AGClooptst]
 14B                                   ; Routine to perform FIR takes new signal value in s1,s0 (s1 is MSB) and puts into scratch buffer and then outputs new filterred values for I in s1,s0 and Q in s3,s2
 14B                                   ; First store latest value then increment LVptr
 14B                                   ;OK Sept 2010
 14B                                   ;reasonable match between I and Q components (within ~1dB), but about 6dB attenuation from input - OK.
 14B  2D106                PerformFIR: OUTPUT s1, 06[SignalMSB]
 14C  2D007                            OUTPUT s0, 07[SignalLSB]
 14D  0B414                            FETCH s4, 14[LVPtr]                                 ; value of the previous latest value
 14E  11402                            ADD s4, 02                                          ; advance LVptr
 14F  1D470                            COMPARE s4, 70[HistoryStart42]                      ; + 42
 150  3C1B7                            CALL NC, 1B7[resetLVptr]                            ; if gone past end of buffer reset pointer to start
 151  2F414                            STORE s4, 14[LVPtr]                                 ; update incremented value of LVptr (by step +2)
 152  2E140                            STORE s1, (s4)                                      ; Store signalMSB at LVptr in scratch
 153  11401                            ADD s4, 01
 154  2E040                            STORE s0, (s4)                                      ; Store signalLSB at LVptr+1 in scratch
 155  19401                            SUB s4, 01                                          ; return to LVptr
 156  01A00                            LOAD sA, 00                                         ; Reset the register used for the difference between LVptr and Rptr (diff)
 157  2FA16                            STORE sA, 16[IaccuLSB]
 158  2FA15                            STORE sA, 15[IaccuMSB]
 159  2FA18                            STORE sA, 18[QaccuLSB]
 15A  2FA17                            STORE sA, 17[QaccuMSB]                              ; Reset all accumulators
 15B                                   ; now start filter with roving pointer in s5 starting at LVptr
 15B                                   ; LOAD      s5, s4
 15B  201BC                            CALL 1BC[UpdateRptr]                                ; this should be equivalent to previous line!
 15C  017F6                            LOAD s7, F6[coeffI0MSB]                             ; Smallest coefficients of I FIR - load values to go to multiplier input.
 15D  01692                            LOAD s6, 92[coeffI0LSB]
 15E  20182                            CALL 182[Ibussiness]
 15F  01700                            LOAD s7, 00[coeffQ0MSB]                             ; Smallest coefficients of Q FIR
 160  016A7                            LOAD s6, A7[coeffQ0LSB]
 161  20188                            CALL 188[Qbussiness]
 162  017F4                            LOAD s7, F4[coeffI1MSB]                             ; coefficient of I FIR
 163  0168A                            LOAD s6, 8A[coeffI1LSB]
 164  20182                            CALL 182[Ibussiness]
 165  01705                            LOAD s7, 05[coeffQ1MSB]                             ; coefficient of Q FIR
 166  0162D                            LOAD s6, 2D[coeffQ1LSB]
 167  20188                            CALL 188[Qbussiness]
 168  017F2                            LOAD s7, F2[coeffI2MSB]                             ; coefficient of I FIR
 169  016CC                            LOAD s6, CC[coeffI2LSB]
 16A  20182                            CALL 182[Ibussiness]
 16B  0170C                            LOAD s7, 0C[coeffQ2MSB]                             ; coefficient of Q FIR
 16C  01683                            LOAD s6, 83[coeffQ2LSB]
 16D  20188                            CALL 188[Qbussiness]
 16E  017F1                            LOAD s7, F1[coeffI3MSB]                             ; coefficient of I FIR
 16F  01677                            LOAD s6, 77[coeffI3LSB]
 170  20182                            CALL 182[Ibussiness]
 171  0171B                            LOAD s7, 1B[coeffQ3MSB]                             ; coefficient of Q FIR
 172  0164F                            LOAD s6, 4F[coeffQ3LSB]
 173  20188                            CALL 188[Qbussiness]
 174  017F0                            LOAD s7, F0[coeffI4MSB]                             ; coefficient of I FIR
 175  016A1                            LOAD s6, A1[coeffI4LSB]
 176  20182                            CALL 182[Ibussiness]
 177  0175C                            LOAD s7, 5C[coeffQ4MSB]                             ; coefficient of Q FIR
 178  0162F                            LOAD s6, 2F[coeffQ4LSB]
 179  20188                            CALL 188[Qbussiness]
 17A  01740                            LOAD s7, 40[coeffI5MSB]                             ; half of middle coefficient of I FIR
 17B  01600                            LOAD s6, 00[coeffI5LSB]
 17C  20182                            CALL 182[Ibussiness]                                ; Roving pointer is advanced an 11th time but is reset before being used!
 17D  0B016                            FETCH s0, 16[IaccuLSB]
 17E  0B115                            FETCH s1, 15[IaccuMSB]
 17F  0B218                            FETCH s2, 18[QaccuLSB]
 180  0B317                            FETCH s3, 17[QaccuMSB]
 181  25000                            RETURN                                              ; return from PerformFIR
 182                                   ; These assume coefficient is in s6,7 (LSB,MSB)
 182  2018E                Ibussiness: CALL 18E[doIplus]
 183  201C2                            CALL 1C2[conjugateDiff]                             ; Roving, difference pointer in sA sent to conjugate value and update roving pointer s5
 184  2018E                            CALL 18E[doIplus]
 185  201C2                            CALL 1C2[conjugateDiff]                             ; Return difference pointer in sA from its conjugate value
 186  201B9                            CALL 1B9[AdvanceRptr]                               ; This is relative shift to roving pointer (0->10 x2 ie 20)
 187  25000                            RETURN 
 188  20196                Qbussiness: CALL 196[doQplus]
 189  201C2                            CALL 1C2[conjugateDiff]                             ; Roving, difference pointer in sA sent to conjugate value, also update roving pointer.
 18A  2019E                            CALL 19E[doQminus]
 18B  201C2                            CALL 1C2[conjugateDiff]                             ; Roving, difference pointer in sA sent to conjugate value, should go back to value before calling this function.
 18C  201B9                            CALL 1B9[AdvanceRptr]                               ; This uses relative shift to roving pointer (0->10x2 ie 20), sA used for difference value.
 18D  25000                            RETURN 
 18E                                   ; These assume coefficient is in s6,7 (LSB,MSB) for doMult, so make sure it doesn't pollute it for the next time!
 18E  201A6                   doIplus: CALL 1A6[doMult]
 18F  0B016                            FETCH s0, 16[IaccuLSB]
 190  0B115                            FETCH s1, 15[IaccuMSB]
 191  10080                            ADD s0, s8
 192  12190                            ADDCY s1, s9
 193  2F016                            STORE s0, 16[IaccuLSB]
 194  2F115                            STORE s1, 15[IaccuMSB]
 195  25000                            RETURN 
 196  201A6                   doQplus: CALL 1A6[doMult]
 197  0B018                            FETCH s0, 18[QaccuLSB]
 198  0B117                            FETCH s1, 17[QaccuMSB]
 199  10080                            ADD s0, s8
 19A  12190                            ADDCY s1, s9
 19B  2F018                            STORE s0, 18[QaccuLSB]
 19C  2F117                            STORE s1, 17[QaccuMSB]
 19D  25000                            RETURN 
 19E  201A6                  doQminus: CALL 1A6[doMult]
 19F  0B018                            FETCH s0, 18[QaccuLSB]
 1A0  0B117                            FETCH s1, 17[QaccuMSB]
 1A1  18080                            SUB s0, s8
 1A2  1A190                            SUBCY s1, s9
 1A3  2F018                            STORE s0, 18[QaccuLSB]
 1A4  2F117                            STORE s1, 17[QaccuMSB]
 1A5  25000                            RETURN 
 1A6                                   ; History signal is first output to SignalMSB and SignalLSB, the signal is then multiplied by the coefficient (provided in s6,7 - LSB,MSB) and the result is returned in s8,9 (LSB,MSB)
 1A6  201B2                    doMult: CALL 1B2[GetRovingHistoryValues]
 1A7  2D106                            OUTPUT s1, 06[SignalMSB]
 1A8  2D007                            OUTPUT s0, 07[SignalLSB]                            ; Historical signal sent to multiplier
 1A9  2D704                            OUTPUT s7, 04[CoeffMSB]
 1AA  2D605                            OUTPUT s6, 05[CoeffLSB]
 1AB  01000                            LOAD s0, 00
 1AC  01000                            LOAD s0, 00
 1AD  01000                            LOAD s0, 00                                         ; wait a bit (8 clock cycles enough?)
 1AE  01000                            LOAD s0, 00
 1AF  09904                            INPUT s9, 04[MltplyMSB]
 1B0  09805                            INPUT s8, 05[MltplyLSB]
 1B1  25000                            RETURN 
 1B2  0A150    GetRovingHistoryValues: FETCH s1, (s5)                                      ; Historical SignalMSB
 1B3  11501                            ADD s5, 01
 1B4  0A050                            FETCH s0, (s5)                                      ; Historical SignalLSB
 1B5  19501                            SUB s5, 01                                          ; return s5 vlue as there will be another mult before updating s5!!
 1B6  25000                            RETURN 
 1B7                                   ; To reset LVptr to start of history rolling buffer space. LVptr is 'Last Value Pointer'
 1B7  01446                resetLVptr: LOAD s4, 46[HistoryStart]
 1B8  25000                            RETURN 
 1B9                                   ; and Rptr (Rptr is 'Roving Pointer'), next value (back 2 places), using advance of diff (sA) diff takes even values 0-40 inclusive (10 steps, ie 11 values, should never go beyond!, at each value conjugate point is also used. 11 value is diff=20 repeats itself at conjugate point)
 1B9  11A02               AdvanceRptr: ADD sA, 02                                          ; advance diff (goes from 0 to 20)
 1BA  201BC                            CALL 1BC[UpdateRptr]
 1BB  25000                            RETURN 
 1BC                                   ; uses value of diff to update value of Rptr
 1BC  00540                UpdateRptr: LOAD s5, s4                                         ; put LVptr in Rptr
 1BD  185A0                            SUB s5, sA                                          ; take off value of diff (sA)
 1BE  1D546                            COMPARE s5, 46[HistoryStart]
 1BF  3D000                            RETURN NC                                           ; if not gone below bottom of buffer return!, else....
 1C0  1152A                            ADD s5, 2A[42'd]                                    ; send up again
 1C1  25000                            RETURN 
 1C2                                   ; - acts on diff (sA)
 1C2  01028             conjugateDiff: LOAD s0, 28[40'd]
 1C3  180A0                            SUB s0, sA                                          ; 40-sA
 1C4  00A00                            LOAD sA, s0                                         ; so sA is conjugate eg: 0->40,40->0, 20->20 etc
 1C5  201BC                            CALL 1BC[UpdateRptr]                                ; calculate corresponding Rptr
 1C6  25000                            RETURN 
 1C7                                   ; the negative case means when the roving ptr is less than LVptr - is it done OK above 10 lines? diff is always positive (Rptr less than LVptr)
 1C7                                   ; conjugateneg:
 1C7                                   ; RET
 1C7                                   ; Takes value in s5 and converts to 2 ascii codes which are sent to the user picoblaze.
 1C7  20279               Export2User: CALL 279[Byte2Chars]
 1C8  2D603                            OUTPUT s6, 03[CmdToUser]
 1C9  2D703                            OUTPUT s7, 03[CmdToUser]
 1CA  0100D                            LOAD s0, 0D[13'd]                                   ; terminate with CR
 1CB  2D003                            OUTPUT s0, 03[CmdToUser]
 1CC  0100A                            LOAD s0, 0A[10'd]                                   ; and with LF
 1CD  2D003                            OUTPUT s0, 03[CmdToUser]
 1CE  25000                            RETURN 
 1CF                                   ; Takes 16 bit value in s6,s7 (MSB,LSB) and outputs to the archive memory (write enabled and selected by user picoblaze)
 1CF  2D60B               ArchiveData: OUTPUT s6, 0B[Data2archiveLSB]
 1D0  2D70A                            OUTPUT s7, 0A[Data2archiveMSB]
 1D1  25000                            RETURN 
 1D2                                   ; Frequency works out the phase increment - (this is to ~7 bit precission, but using LSB could get 8 bit?)
 1D2                                   ; Takes phase in s4 (and s5) and uses old phase value from scratchpad (which is then updated). The phase increment is returned in s4.
 1D2  0B010                 Frequency: FETCH s0, 10[OldPhaseMSB]
 1D3  2F410                            STORE s4, 10[OldPhaseMSB]
 1D4  18400                            SUB s4, s0
 1D5  25000                            RETURN 
 1D6                                   ; CORDIC  Takes I in s0(LSB)and s1(MSB) and Q in s2,s3 and returns the amplitude in s0,s1 and the phase in s4,s5. s8 is the loop counter
 1D6                                   ; Useable range is for I and Q up to about +/-$3000
 1D6  01400                    cordic: LOAD s4, 00
 1D7  01500                            LOAD s5, 00
 1D8  1D180                            COMPARE s1, 80[128'd]
 1D9  3C20D                            CALL NC, 20D[rotate90]                              ; if I negative then need to bring back into RH 2 quadrants.
 1DA                                   ; now enter loop
 1DA  01800                            LOAD s8, 00                                         ; counter of times to iterate.
 1DB  00710                cordicloop: LOAD s7, s1                                         ; temporary store for I
 1DC  00600                            LOAD s6, s0                                         ; temp store
 1DD  1D380                            COMPARE s3, 80[128'd]                               ; is Q negative?
 1DE  3E1ED                            JUMP NC, 1ED[posrotate]                             ; if negative rotate positive
 1DF  00A20                 negrotate: LOAD sA, s2
 1E0  00B30                            LOAD sB, s3                                         ; put Q into working registers
 1E1  20206                            CALL 206[shift]                                     ; shift Q by the amount in s8
 1E2  100A0                            ADD s0, sA                                          ; add shifted Q to I
 1E3  121B0                            ADDCY s1, sB
 1E4  00A60                            LOAD sA, s6                                         ; prepare working registers (sA,sB) with original value of I
 1E5  00B70                            LOAD sB, s7
 1E6  20206                            CALL 206[shift]
 1E7  182A0                            SUB s2, sA
 1E8  1A3B0                            SUBCY s3, sB
 1E9  201FE                            CALL 1FE[GetPhaseIncrement]
 1EA  184A0                            SUB s4, sA
 1EB  1A5B0                            SUBCY s5, sB
 1EC  221FA                            JUMP 1FA[testcordicend]
 1ED  00A20                 posrotate: LOAD sA, s2
 1EE  00B30                            LOAD sB, s3                                         ; put Q into working registers
 1EF  20206                            CALL 206[shift]                                     ; shift Q by the amount in s8
 1F0  180A0                            SUB s0, sA                                          ; add shifted Q to I
 1F1  1A1B0                            SUBCY s1, sB
 1F2  00A60                            LOAD sA, s6                                         ; prepare working registers with original value of I
 1F3  00B70                            LOAD sB, s7
 1F4  20206                            CALL 206[shift]
 1F5  102A0                            ADD s2, sA
 1F6  123B0                            ADDCY s3, sB
 1F7  201FE                            CALL 1FE[GetPhaseIncrement]
 1F8  104A0                            ADD s4, sA
 1F9  125B0                            ADDCY s5, sB
 1FA  11801             testcordicend: ADD s8, 01
 1FB  1D809                            COMPARE s8, 09[m_plus_1]                            ;m + 1
 1FC  3A1DB                            JUMP C, 1DB[cordicloop]
 1FD  25000                            RETURN 
 1FE                                   ; routine to lookup from the cordic look up table (scratchpad), the phase increment - stored as 8 bits at the location pointed to be s8, returned as 16 bits in sA and sB
 1FE                                   ; sB is MSB
 1FE  0AB80         GetPhaseIncrement: FETCH sB, (s8)
 1FF  14B0E                            SR0 sB
 200  14A08                            SRA sA
 201  14B0E                            SR0 sB
 202  14A08                            SRA sA
 203  14B0E                            SR0 sB
 204  14A08                            SRA sA                                              ; This multiplies the 8 bit stored value by 32 so that max scratchpad value 255->255*32 equivalent to 44.82degrees
 205  25000                            RETURN 
 206  00980                     shift: LOAD s9, s8
 207  1D900                 shiftloop: COMPARE s9, 00
 208  31000                            RETURN Z
 209  19901                            SUB s9, 01
 20A  14B0A                            SRX sB
 20B  14A08                            SRA sA
 20C  22207                            JUMP 207[shiftloop]
 20D  00710                  rotate90: LOAD s7, s1                                         ; temporary store for I
 20E  00600                            LOAD s6, s0                                         ; temp store
 20F  1D380                            COMPARE s3, 80[128'd]                               ; is Q negative?
 210  3E21A                            JUMP NC, 21A[add90]                                 ; if negative add 90
 211  00130                     sub90: LOAD s1, s3
 212  00020                            LOAD s0, s2                                         ; I=Q
 213  01200                            LOAD s2, 00
 214  01300                            LOAD s3, 00
 215  18260                            SUB s2, s6
 216  1A370                            SUBCY s3, s7                                        ; Q=-I
 217  19400                            SUB s4, 00[half_pi_LSB]
 218  1B540                            SUBCY s5, 40[half_pi_MSB]
 219  25000                            RETURN 
 21A  01100                     add90: LOAD s1, 00
 21B  01000                            LOAD s0, 00
 21C  18020                            SUB s0, s2
 21D  1A130                            SUBCY s1, s3                                        ; I=-Q
 21E  00260                            LOAD s2, s6
 21F  00370                            LOAD s3, s7                                         ; Q=I
 220  01400                            LOAD s4, 00[half_pi_LSB]
 221  01540                            LOAD s5, 40[half_pi_MSB]
 222  25000                            RETURN 
 223  0B112              Transmitmode: FETCH s1, 12[State]
 224  05102                            OR s1, 02
 225  2F112                            STORE s1, 12[State]                                 ; set bit 1
 226  0B10E                            FETCH s1, 0E[AGCvalue]
 227  2F171                            STORE s1, 71[AGCvalueRX]
 228  0B170                            FETCH s1, 70[AGCvalueTX]                            ;recovers last used value for AGCvalur in this mode
 229  2F10E                            STORE s1, 0E[AGCvalue]
 22A                                   ;     FETCH      s1,AGCupperThresholdTX2
 22A                                   ;     STORE  s1,AGCupperThresholdInUse ;Updates the threshold values in use
 22A  25000                            RETURN 
 22B                                   ;Streammode:   CALL Transmitmode
 22B                                   ;     FETCH     s1, State
 22B                                   ;                   OR        s1, 4
 22B                                   ;                  STORE     s1, State           ; set bit 2
 22B                                   ;     RET
 22B                                   ;GetUartValues:  CALL      Get2Chars     ;Changed name of this routine
 22B                                   ;     LOAD   s1,$AA     ;rough value
 22B                                   ;     LOAD   s2,s5      ;now put into top byte
 22B                                   ;     SRX    s2
 22B                                   ;     SRA    s1      ;divide signal by 2
 22B                                   ;     SRX    s2
 22B                                   ;     SRA    s1      ;divide signal by 2 again
 22B                                   ;     LOAD    s0,$AA      ;set lowest bits to rough value
 22B                                   ;        RET
 22B  0B10E            GrabTXAGCvalue: FETCH s1, 0E[AGCvalue]
 22C  2F170                            STORE s1, 70[AGCvalueTX]
 22D  25000                            RETURN 
 22E  0B112               Receivemode: FETCH s1, 12[State]
 22F  031FD                            AND s1, FD[253'd]                                   ; 255 - 2
 230  2F112                            STORE s1, 12[State]                                 ; reset bit 1
 231  0B10E                            FETCH s1, 0E[AGCvalue]
 232  2F170                            STORE s1, 70[AGCvalueTX]
 233  0B171                            FETCH s1, 71[AGCvalueRX]                            ;recovers last used value for AGCvalur in this mode
 234  2F10E                            STORE s1, 0E[AGCvalue]
 235                                   ;     FETCH      s1,AGCupperThresholdRX2
 235                                   ;     STORE  s1,AGCupperThresholdInUse ;Updates the threshold values in use
 235  25000                            RETURN 
 236  011F0              BlockDSPpico: LOAD s1, F0[240'd]
 237  2D102                            OUTPUT s1, 02[SSBAmp]                               ; Set signal amp to high
 238  01100                            LOAD s1, 00
 239  2D10D                            OUTPUT s1, 0D[PhaseIncrement]                       ;Make sure phase doesn't wander
 23A  09003                            INPUT s0, 03[Command]                               ; Check if FIFO character present
 23B  1D080                            COMPARE s0, 80[128'd]                               ; is there a character?
 23C  3E236                            JUMP NC, 236[BlockDSPpico]                          ; no command received so carry on blocking
 23D  20255                            CALL 255[GetFifoChar]                               ;is command so get charcter
 23E  1D052                            COMPARE s0, 52[82'd]                                ; character R
 23F  31000                            RETURN Z                                            ;escape when R received from User Pico
 240  22236                            JUMP 236[BlockDSPpico]
 241                                   ; Get fifo command and act on it.
 241                     Respond2Fifo: 
 241                                   ;         FETCH     s0,State
 241                                   ;     AND    s0,04
 241                                   ;     COMP   s0,04        ;is this stream mode
 241                                   ;     RETURN Z       ;if so then stick (no backing out!)
 241  20255                            CALL 255[GetFifoChar]
 242                                   ;     COMPARE   s0,51'd       ;character 3
 242                                   ;     CALL   Z,Streammode
 242  1D032                            COMPARE s0, 32[50'd]                                ; character 2
 243  3022B                            CALL Z, 22B[GrabTXAGCvalue]                         ;need to get this before userpico sends warble
 244  1D031                            COMPARE s0, 31[49'd]                                ; character 1
 245  30223                            CALL Z, 223[Transmitmode]
 246  1D030                            COMPARE s0, 30[48'd]                                ; character 0
 247  3022E                            CALL Z, 22E[Receivemode]
 248  1D047                            COMPARE s0, 47[71'd]                                ; character G (request for AGCvalue info from userpico)
 249  3024F                            CALL Z, 24F[SendGParamBack]
 24A  1D053                            COMPARE s0, 53[83'd]                                ; character S (request for AVEsignal info from userpico)
 24B  30252                            CALL Z, 252[SendSParamBack]
 24C  1D042                            COMPARE s0, 42[66'd]                                ; character B (block)
 24D  30236                            CALL Z, 236[BlockDSPpico]
 24E  25000                            RETURN 
 24F                                   ;This can be adjusted for de-bugging AGCvalue
 24F  0B50E            SendGParamBack: FETCH s5, 0E[AGCvalue]
 250  201C7                            CALL 1C7[Export2User]
 251  25000                            RETURN 
 252                                   ;This can be adjusted for de-bugging AVEsignal
 252  005F0            SendSParamBack: LOAD s5, sF[AveSignal1024ms]
 253  201C7                            CALL 1C7[Export2User]
 254  25000                            RETURN 
 255                                   ; Routine to recover a character from the FIFO in s0
 255  01020               GetFifoChar: LOAD s0, 20[AckFIFO]
 256  2D00C                            OUTPUT s0, 0C[Controlbits]
 257  01020                            LOAD s0, 20[AckFIFO]                                ; Wait
 258  09003                            INPUT s0, 03[Command]                               ; now get my character
 259  0307F                            AND s0, 7F                                          ; mask off top bit
 25A  25000                            RETURN 
 25B                                   ; routine to look at command input and recover 2 characters and return the byte they represent in s5.
 25B  09603                 Get2Chars: INPUT s6, 03[Command]
 25C  1D680                            COMPARE s6, 80[128'd]                               ; if greater than 128, then no character
 25D  3E25B                            JUMP NC, 25B[Get2Chars]
 25E  20255                            CALL 255[GetFifoChar]
 25F  00600                            LOAD s6, s0
 260  09703                Get2ndChar: INPUT s7, 03[Command]
 261  1D780                            COMPARE s7, 80[128'd]                               ; if greater than 128, then no character
 262  3E260                            JUMP NC, 260[Get2ndChar]
 263  20255                            CALL 255[GetFifoChar]
 264  00700                            LOAD s7, s0
 265  22266                            JUMP 266[Chars2Byte]
 266                                   ; Routine to take ascii codes in s6 and s7 and return a byte in s5 given by this character representation
 266  00860                Chars2Byte: LOAD s8, s6
 267  20271                            CALL 271[Get4bits]
 268  00580                            LOAD s5, s8
 269  14506                            SL0 s5
 26A  14506                            SL0 s5
 26B  14506                            SL0 s5
 26C  14506                            SL0 s5                                              ; put these 4 bits to MSBs
 26D  00870                            LOAD s8, s7
 26E  20271                            CALL 271[Get4bits]
 26F  10580                            ADD s5, s8
 270  25000                            RETURN 
 271                                   ; This routine takes an ascii code in s8 and returns a 4 bit value in s8
 271  1D83C                  Get4bits: COMPARE s8, 3C[60'd]                                ; if character is 0-9 it is less than 60, if it is A-F then it is greater than 60
 272  3A276                            JUMP C, 276[char0_9]
 273  19837                            SUB s8, 37[55'd]                                    ; assumes hex codes A-F are in capitals!!, A (code 65) gives 10...
 274  0380F                            AND s8, 0F                                          ; make sure only return 4 bits
 275  25000                            RETURN 
 276  19830                   char0_9: SUB s8, 30[48'd]
 277  0380F                            AND s8, 0F                                          ; make sure only return 4 bits
 278  25000                            RETURN 
 279                                   ; takes data in s5 and returns two ascii codes in s6,s7 (s7 is character for lower 4 bits)
 279  00850                Byte2Chars: LOAD s8, s5                                         ; assumes 8 bit data is in s5
 27A  1450E                            SR0 s5
 27B  1450E                            SR0 s5
 27C  1450E                            SR0 s5
 27D  1450E                            SR0 s5                                              ; get first hex character
 27E  20285                            CALL 285[GetChar]
 27F  00650                            LOAD s6, s5                                         ; first ascii char
 280  00580                            LOAD s5, s8
 281  0350F                            AND s5, 0F
 282  20285                            CALL 285[GetChar]                                   ; send to LCD or UART
 283  00750                            LOAD s7, s5                                         ; second ascii char
 284  25000                            RETURN 
 285                                   ; routine to convert 4bit value in s5 to an ascii code, returned in s5
 285  1950A                   GetChar: SUB s5, 0A[10'd]                                    ; Test if s5 greater than 9
 286  3A289                            JUMP C, 289[is_0_9]                                 ; Hex character is 0_9
 287  11541                            ADD s5, 41[65'd]                                    ; offset for Ascii code 'A'
 288  25000                            RETURN 
 289  1150A                    is_0_9: ADD s5, 0A[10'd]                                    ; return to range 0-9
 28A  11530                            ADD s5, 30[48'd]                                    ; offset to Ascii code for '0'
 28B  25000                            RETURN 
 28C                                   ; Registers used s0, s1, s2, s3, s4 and s5.
 28C                                   ;
 28C  01500                  delay_1s: LOAD s5, 00                                         ; clear cycle counter
 28D  01400                            LOAD s4, 00
 28E  2029F                   wait_1s: CALL 29F[delay_1ms]
 28F  11401                            ADD s4, 01                                          ; increment cycle counter
 290  13500                            ADDCY s5, 00
 291  1D4E8                            COMPARE s4, E8[count_1000_lsb]                      ; test for 1000ms
 292  3628E                            JUMP NZ, 28E[wait_1s]
 293  1D503                            COMPARE s5, 03[count_1000_msb]
 294  3628E                            JUMP NZ, 28E[wait_1s]
 295  25000                            RETURN 
 296                                   ;
 296                                   ; Delays of approximately 200ms and 300ms used for LCD display scrolling
 296                                   ;
 296                                   ;
 296                                   ; Registers used s0, s1, s2, s3 and s4.
 296                                   ;
 296  2029A               delay_300ms: CALL 29A[delay_100ms]
 297  2029A               delay_200ms: CALL 29A[delay_100ms]
 298  2029A                            CALL 29A[delay_100ms]
 299  25000                            RETURN 
 29A                                   ;
 29A                                   ; Delay of approximately 100ms used for switch debounce
 29A                                   ;
 29A                                   ; Registers used s0, s1, s2, s3 and s4.
 29A                                   ;
 29A  01464               delay_100ms: LOAD s4, 64                                         ; repeat 1ms delay 100 times
 29B  2029F                wait_100ms: CALL 29F[delay_1ms]
 29C  19401                            SUB s4, 01
 29D  3629B                            JUMP NZ, 29B[wait_100ms]
 29E  25000                            RETURN 
 29F                                   ;
 29F                                   ; Delay of approximately 1ms required by LCD display
 29F                                   ;
 29F                                   ; Registers used s0, s1, s2 and s3.
 29F                                   ;
 29F  01300                 delay_1ms: LOAD s3, 00                                         ; clear cycle counter
 2A0  01200                            LOAD s2, 00
 2A1  202AE                  wait_1ms: CALL 2AE[delay_1us]
 2A2  11201                            ADD s2, 01                                          ; increment cycle counter
 2A3  13300                            ADDCY s3, 00
 2A4  1D2E8                            COMPARE s2, E8[count_1000_lsb]                      ; test for 1000us
 2A5  362A1                            JUMP NZ, 2A1[wait_1ms]
 2A6  1D303                            COMPARE s3, 03[count_1000_msb]
 2A7  362A1                            JUMP NZ, 2A1[wait_1ms]
 2A8  25000                            RETURN 
 2A9                                   ;
 2A9                                   ; Delay of approximately 50us required by LCD display
 2A9                                   ;
 2A9                                   ; Registers used s0 and s1.
 2A9                                   ;
 2A9  01132                delay_50us: LOAD s1, 32[50'd]                                   ; repeat 1us delay 50 times
 2AA  202AE                 wait_50us: CALL 2AE[delay_1us]
 2AB  19101                            SUB s1, 01
 2AC  362AA                            JUMP NZ, 2AA[wait_50us]
 2AD  25000                            RETURN 
 2AE                                   ; Delay of approximately 1us used to provide timing reference for
 2AE                                   ; LCD operations. This must be adjusted to reflect the clock
 2AE                                   ; applied to KCPSM3. The provided code is for a 50MHz clock rate.
 2AE                                   ;
 2AE                                   ; The software delay loop is formed using register s0. This register
 2AE                                   ; must be loaded with an integer value close to the result of....
 2AE                                   ;
 2AE                                   ; value =  (clock_rate - 4)/4          Where 'clock_rate' is in MHz
 2AE                                   ;
 2AE                                   ; So for a 50MHz clock the value is (50-4)/4 = 11.5 and 12 would be used.
 2AE                                   ; For clock rates below 8MHz the value of 1 must be used and the I2C bus
 2AE                                   ; operation will become lower than the 100KHz target intended.
 2AE                                   ;
 2AE                                   ; Register used s0.
 2AE                                   ;
 2AE  01006                 delay_1us: LOAD s0, 06[delay_1us_constant]                     ; delay value of 12 decimal for a 50MHz clock
 2AF  19001                  wait_1us: SUB s0, 01
 2B0  362AF                            JUMP NZ, 2AF[wait_1us]
 2B1  25000                            RETURN 
 2B2                                   ;
 2B2                                   ;


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

Z:\home\gnaylor\Dropbox\N3SysGen\DSPpico.psm



List of defined constants

 CONSTANT name       Value        Source PSM File

 timestamp_hours     16'd         
 timestamp_minutes   17'd         
 timestamp_seconds   20'd         
 datestamp_year      17'd         
 datestamp_month     11'd         
 datestamp_day       18'd         
 NUL                 00           
 BEL                 07           
 BS                  08           
 HT                  09           
 LF                  0A           
 VT                  0B           
 CR                  0D           
 ESC                 1B           
 DEL                 7F           
 DCS                 90           
 ST                  9C           
 AGChigh             40'd         DSPpico.psm
 AGClow              50'd         DSPpico.psm
 AGClow2             25'd         DSPpico.psm
 delay_1us_constant  06           DSPpico.psm
 m                   8'd          DSPpico.psm
 m_plus_1            9'd          DSPpico.psm
 count_1000_lsb      E8           DSPpico.psm
 count_1000_msb      03           DSPpico.psm
 half_pi_LSB         00           DSPpico.psm
 half_pi_MSB         40           DSPpico.psm
 audioTest           2'd          DSPpico.psm
 coeffI0MSB          F6           DSPpico.psm
 coeffI0LSB          92           DSPpico.psm
 coeffI1MSB          F4           DSPpico.psm
 coeffI1LSB          8A           DSPpico.psm
 coeffI2MSB          F2           DSPpico.psm
 coeffI2LSB          CC           DSPpico.psm
 coeffI3MSB          F1           DSPpico.psm
 coeffI3LSB          77           DSPpico.psm
 coeffI4MSB          F0           DSPpico.psm
 coeffI4LSB          A1           DSPpico.psm
 coeffI5MSB          40           DSPpico.psm
 coeffI5LSB          00           DSPpico.psm
 coeffQ0MSB          00           DSPpico.psm
 coeffQ0LSB          A7           DSPpico.psm
 coeffQ1MSB          05           DSPpico.psm
 coeffQ1LSB          2D           DSPpico.psm
 coeffQ2MSB          0C           DSPpico.psm
 coeffQ2LSB          83           DSPpico.psm
 coeffQ3MSB          1B           DSPpico.psm
 coeffQ3LSB          4F           DSPpico.psm
 coeffQ4MSB          5C           DSPpico.psm
 coeffQ4LSB          2F           DSPpico.psm
 AudioMSB            0'd          DSPpico.psm
 AudioLSB            1'd          DSPpico.psm
 Strobe              2'd          DSPpico.psm
 Command             3'd          DSPpico.psm
 MltplyMSB           4'd          DSPpico.psm
 MltplyLSB           5'd          DSPpico.psm
 BTaudioMSB          6'd          DSPpico.psm
 BTaudioLSB          7'd          DSPpico.psm
 SaturationBits      8'd          DSPpico.psm
 RAMdataLSB          9'd          DSPpico.psm
 Status              10'd         DSPpico.psm
 StartToneAmp        11'd         DSPpico.psm
 MSBAudio            0'd          DSPpico.psm
 LSBAudio            1'd          DSPpico.psm
 SSBAmp              2'd          DSPpico.psm
 CmdToUser           3'd          DSPpico.psm
 CoeffMSB            4'd          DSPpico.psm
 CoeffLSB            5'd          DSPpico.psm
 SignalMSB           6'd          DSPpico.psm
 SignalLSB           7'd          DSPpico.psm
 Data2archiveMSB     10'd         DSPpico.psm
 Data2archiveLSB     11'd         DSPpico.psm
 Controlbits         12'd         DSPpico.psm
 EnMult              1'd          DSPpico.psm
 AckFIFO             32'd         DSPpico.psm
 PhaseIncrement      13'd         DSPpico.psm
 AudioFreqLSB        14'd         DSPpico.psm
 AudioPhaseMSB       15'd         DSPpico.psm
 AudioPhaseLSB       16'd         DSPpico.psm
 EnableSpeaker       17'd         DSPpico.psm
 MUXport             18'd         DSPpico.psm
 AveSignal1024msport 24'd         DSPpico.psm
 AveSignalMSBport    25'd         DSPpico.psm
 AveSignalLSBport    26'd         DSPpico.psm
 MSBBTAudio          27'd         DSPpico.psm
 LSBBTAudio          28'd         DSPpico.psm
 AmpMSB              10'd         DSPpico.psm
 AmpLSB              11'd         DSPpico.psm
 PhaseMSB            12'd         DSPpico.psm
 PhaseLSB            13'd         DSPpico.psm
 AGCvalue            14'd         DSPpico.psm
 VolSetting          15'd         DSPpico.psm
 OldPhaseMSB         16'd         DSPpico.psm
 AudioScratch        17'd         DSPpico.psm
 State               18'd         DSPpico.psm
 LVPtr               20'd         DSPpico.psm
 IaccuMSB            21'd         DSPpico.psm
 IaccuLSB            22'd         DSPpico.psm
 QaccuMSB            23'd         DSPpico.psm
 QaccuLSB            24'd         DSPpico.psm
 OldPhaseLSB         25'd         DSPpico.psm
 startsine           30'd         DSPpico.psm
 endsine             45'd         DSPpico.psm
 HistoryStart        70'd         DSPpico.psm
 HistoryStart42      112'd        DSPpico.psm
 AGCvalueTX          112'd        DSPpico.psm
 AGCvalueRX          113'd        DSPpico.psm
 AGCcounter          114'd        DSPpico.psm
 NormalisedMagMSB    115'd        DSPpico.psm
 NormalisedMagLSB    116'd        DSPpico.psm
 AGCcounterMSB       117'd        DSPpico.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.63"        
 datestamp$        "18 Nov 2017"  
 timestamp$        "16:17:20"     



List of line labels

   Label                      Addr  Source PSM File

 * cold_start                 000   DSPpico.psm
   AwaitAudioVal              041   DSPpico.psm
   AwaitRise                  045   DSPpico.psm
 * isTopAGCalready            04E   DSPpico.psm
   SaturatedPositive          053   DSPpico.psm
   Allswell                   056   DSPpico.psm
   HaveInput                  058   DSPpico.psm
   BackfromTransmitting       06B   DSPpico.psm
   FourTimestooBig            08C   DSPpico.psm
   FourTimesLoop              08E   DSPpico.psm
   BitTooBig                  094   DSPpico.psm
   reduceAveSignalMSB_1_5dB   09B   DSPpico.psm
   BitTooLow                  0A6   DSPpico.psm
 * Divide32                   0AD   DSPpico.psm
   Divide4                    0B2   DSPpico.psm
   AudioDouble                0B7   DSPpico.psm
 * Negvalue                   0B9   DSPpico.psm
   islessthanneg31            0BE   DSPpico.psm
   islessthanneg63            0C2   DSPpico.psm
   Posvalue                   0C6   DSPpico.psm
   ismorethan31               0CB   DSPpico.psm
   ismorethan63               0CF   DSPpico.psm
 * Divide2                    0D3   DSPpico.psm
   TransmitAudio              0D6   DSPpico.psm
 * SkipNoBT                   0D6   DSPpico.psm
 * OutAmp                     0DD   DSPpico.psm
   TryAndDouble               0F0   DSPpico.psm
   BiggerThan63               0F5   DSPpico.psm
   BiggerThan128              0F9   DSPpico.psm
   Abs16Val                   0FC   DSPpico.psm
 * absval                     105   DSPpico.psm
   makeposval                 108   DSPpico.psm
 * invertval                  10C   DSPpico.psm
   increaseAGC                110   DSPpico.psm
   decreaseAGC                115   DSPpico.psm
   AGC                        11A   DSPpico.psm
   decrease3dB                124   DSPpico.psm
   decrease1_5dB              133   DSPpico.psm
 * AGCtest                    140   DSPpico.psm
   AGClooptst                 144   DSPpico.psm
   PerformFIR                 14B   DSPpico.psm
   Ibussiness                 182   DSPpico.psm
   Qbussiness                 188   DSPpico.psm
   doIplus                    18E   DSPpico.psm
   doQplus                    196   DSPpico.psm
   doQminus                   19E   DSPpico.psm
   doMult                     1A6   DSPpico.psm
   GetRovingHistoryValues     1B2   DSPpico.psm
   resetLVptr                 1B7   DSPpico.psm
   AdvanceRptr                1B9   DSPpico.psm
   UpdateRptr                 1BC   DSPpico.psm
   conjugateDiff              1C2   DSPpico.psm
   Export2User                1C7   DSPpico.psm
 * ArchiveData                1CF   DSPpico.psm
 * Frequency                  1D2   DSPpico.psm
   cordic                     1D6   DSPpico.psm
   cordicloop                 1DB   DSPpico.psm
 * negrotate                  1DF   DSPpico.psm
   posrotate                  1ED   DSPpico.psm
   testcordicend              1FA   DSPpico.psm
   GetPhaseIncrement          1FE   DSPpico.psm
   shift                      206   DSPpico.psm
   shiftloop                  207   DSPpico.psm
   rotate90                   20D   DSPpico.psm
 * sub90                      211   DSPpico.psm
   add90                      21A   DSPpico.psm
   Transmitmode               223   DSPpico.psm
   GrabTXAGCvalue             22B   DSPpico.psm
   Receivemode                22E   DSPpico.psm
   BlockDSPpico               236   DSPpico.psm
   Respond2Fifo               241   DSPpico.psm
   SendGParamBack             24F   DSPpico.psm
   SendSParamBack             252   DSPpico.psm
   GetFifoChar                255   DSPpico.psm
   Get2Chars                  25B   DSPpico.psm
   Get2ndChar                 260   DSPpico.psm
   Chars2Byte                 266   DSPpico.psm
   Get4bits                   271   DSPpico.psm
   char0_9                    276   DSPpico.psm
   Byte2Chars                 279   DSPpico.psm
   GetChar                    285   DSPpico.psm
   is_0_9                     289   DSPpico.psm
 * delay_1s                   28C   DSPpico.psm
   wait_1s                    28E   DSPpico.psm
 * delay_300ms                296   DSPpico.psm
 * delay_200ms                297   DSPpico.psm
   delay_100ms                29A   DSPpico.psm
   wait_100ms                 29B   DSPpico.psm
   delay_1ms                  29F   DSPpico.psm
   wait_1ms                   2A1   DSPpico.psm
 * delay_50us                 2A9   DSPpico.psm
   wait_50us                  2AA   DSPpico.psm
   delay_1us                  2AE   DSPpico.psm
   wait_1us                   2AF   DSPpico.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD            140
 STAR              -

 AND              10
 OR                1
 XOR               -

 ADD              35
 ADDCY            13
 SUB              28
 SUBCY             9

 TEST              -
 TESTCY            -
 COMPARE          49
 COMPARECY         -

 SL0               7
 SL1               -
 SLX               -
 SLA               4
 RL                -
 SR0              16
 SR1               -
 SRX              19
 SRA              19
 RR                -

 REGBANK           -

 INPUT            13
 OUTPUT           32
 OUTPUTK           -

 STORE            34
 FETCH            34

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             41
 JUMP@             -
 CALL             86
 CALL@             -
 RETURN           74
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
