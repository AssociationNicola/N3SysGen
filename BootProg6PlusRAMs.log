KCPSM6 Assembler log file for program 'C:\Users\gnaylor.CCFEPC\Dropbox\N3workingG\TE0722Rebuild\N3SysGen\BootProg6PlusRAMs.psm'.
Generated by KCPSM6 version v2.63
Ken Chapman - Xilinx Ltd - 20th December 2013

Assembly datestamp: 24 May 2016
Assembly timestamp: 17:22:38

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 0ED hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 238
Memory locations available: 3858


Assembly listing

 Addr Code                           Instruction

 000                                 ; This uses an extra line, but assumes the retcommand at line 33 is re-written OK
 000                                 ;;;CONSTANT LCD_data_port,  08                   ; Data to LCD display
 000                                 ;;;CONSTANT LCD_control_port, 09                   ; Control signals to LCD display
 000                                 ;;;CONSTANT LCD_RS,    01                   ; bit0 - Register Select - command(0) or data(1)
 000                                 ;;;CONSTANT LCD_RW              EQU       2                   ; bit1 - read(1) or write(0)
 000                                 ;;;CONSTANT LCD_E               EQU       4                   ; bit2 - Enable(1)
 000                                 ;;;CONSTANT delay_1us_constant  EQU       12                  ; Value (13)19 or 12? decimal suitable for 50MHz clock – about 8 for 20MHz
 000                                 ;;;CONSTANT LCD_data            EQU       sF                  ; registers used for data and control of LCD
 000                                 ;;;CONSTANT LCD_control         EQU       sE                  ; E=bit2,  R/W=bit1,  RS=bit0
 000                                 ;;;CONSTANT cursor_position     EQU       sD                  ; register to define cursor position on LCD display
 000                                 ;;;CONSTANT counter             EQU       sC                  ; Counter - for Acquisitions
 000                                 ; Input port
 000                                 CONSTANT Uart_rx, 00
 000                                 CONSTANT Uart_status, 01
 000                                 ;;;CONSTANT ADC_cntr   02
 000                                 ;;;CONSTANT ADC_value   03
 000                                 ; Output ports
 000                                 CONSTANT DataLatch, 00
 000                                 CONSTANT Uart_Tx, 01
 000                                 ;;;CONSTANT Gain,    02
 000                                 CONSTANT Instructiona, 03        ; Most significant bits of instruction
 000                                 CONSTANT Instructionb, 04
 000                                 CONSTANT Instructionc, 05
 000                                 CONSTANT ProgramL, 06
 000                                 CONSTANT ProgramM, 07            ; bits 0 and 1 for address, ( removed - subsequent 3 bits to select
 000                                 ; which pico to write (bits 2,3,4 decoded), bit 5 enable archive,
 000                                 ; bit 6 select source and bit 7 TXhigh)
 000                                 CONSTANT RAMWriteContol, 25'd    ; select target pico - from above register in new setup
 000                                 ;;;CONSTANT LCDdata,   08
 000                                 ;;;CONSTANT LCDctrl,   09
 000                                 ;;;CONSTANT FreqLSB             EQU       10
 000                                 ;;;CONSTANT FreqMSB             EQU       11
 000                                 ;;;CONSTANT UserToDSPTx         DSOUT     0
 000                                 ;;;CONSTANT UserToBTTx          DSOUT     20
 000                                 ;;;CONSTANT UserToKPTx          DSOUT     21
 000                                 CONSTANT RAMDataMSB, 16          ; 22                  ; To send to KP, DSP or BT picos
 000                                 CONSTANT RAMDataLSB, 17          ; 23                  ; To send to KP, DSP or BT picos
 000                                 ; ;;GenerateCode        MEM       "BootProgMultiPico.mem"
 000                                 ; Program modified Jan 2010 to be able to reload more than 2 picoblazes, while maintaining start of loaded program at $20
 000                                 ; User pico must be re-programmed last!
 000                                 ; This is the bootprog program to program two picoblazes as in Spartan3E_ADCRX_TX.mdl
 000                                 ; Start of test program
 000                                 ; Modified Nov 2007, to allow it to be re-loaded and re-boot
 000                                 ; Procedure get user program to return to instruction zero (eg jump reboot - currently by sending a 'Q') then perform
 000                                 ; ProgramUser('BootProgMultiPico.mem'); %(This program)
 000                                 ; ProgramDSP('S3eDSPprog.mem');
 000                                 ; ProgramBTpico('BTprog.mem');
 000                                 ; ProgramUser('S3eUser_interface.mem');
 000  22021                    boot: JUMP 021[NewProg]
 001  2001B                   start: CALL 01B[GetByte]
 002  1D140                          COMPARE s1, 40                   ;64'd              ; is start byte = 64
 003  32007                          JUMP Z, 007[DoUserProg]
 004  1D141                          COMPARE s1, 41                   ;65'd              ; is byte = 65 or above - this is actually just to fill lines!
 005  3E022                          JUMP NC, 022[ProgOtherPico]      ; This will actually write DSP or other prog (start byte =65 or greater)
 006  22001                          JUMP 001[start]
 007  01704              DoUserProg: LOAD s7, 04
 008  01220                          LOAD s2, 20                      ; 32'd
 009  01300                          LOAD s3, 00                      ; s2 (LSB),s3(USB) of prog counter of first address of new program!
 00A  2001B                 GetProg: CALL 01B[GetByte]
 00B  1D150                          COMPARE s1, 50                   ; 80'd              ; 80 ($50) indicates end of program
 00C  32021                          JUMP Z, 021[NewProg]             ; When end of prog byte 80 is received
 00D  2D103                          OUTPUT s1, 03[Instructiona]
 00E  2001B                          CALL 01B[GetByte]
 00F  2D104                          OUTPUT s1, 04[Instructionb]
 010  2001B                          CALL 01B[GetByte]
 011  2D105                          OUTPUT s1, 05[Instructionc]      ; write 3x 6bits to latches ready for instruction write
 012  2D206                          OUTPUT s2, 06[ProgramL]
 013  2D307                          OUTPUT s3, 07[ProgramM]          ; Load memory address to write (starting from 32!)
 014  00470                          LOAD s4, s7
 015  2D419                          OUTPUT s4, 19[RAMWriteContol]
 016  01400                          LOAD s4, 00
 017  2D419                          OUTPUT s4, 19[RAMWriteContol]
 018  11201                          ADD s2, 01
 019  13300                          ADDCY s3, 00                     ; Increment program counter
 01A  2200A                          JUMP 00A[GetProg]                ; Get next instruction
 01B  09001                 GetByte: INPUT s0, 01[Uart_status]        ; Is there a byte available?
 01C  03001                          AND s0, 01
 01D  1D001                          COMPARE s0, 01
 01E  3601B                          JUMP NZ, 01B[GetByte]            ; until there is a byte in the input buffer!
 01F  09100                          INPUT s1, 00[Uart_rx]
 020                                 ; if the User prog is loaded then the previous commands will never be loaded
 020  25000                          RETURN 
 021                                 ; NOTE THANT ONCE THE USER PROG HAS BEEN RELOADED, THEN THE DSP CAN NOT BE RELOADED UNLESS THIS CODE BELOW IS RELOADED!
 021  22001                 NewProg: JUMP 001[start]                  ; Prog data must load in from here (Address $20)
 022  1D141           ProgOtherPico: COMPARE s1, 41                   ; 65              ; is byte = 65? A
 023  32031                          JUMP Z, 031[ProgDSP]             ; 65 means program DSP
 024  1D142                          COMPARE s1, 42                   ; 66              ; is byte = 66 B
 025  32045                          JUMP Z, 045[ProgBTpico]          ; 66 means program BT picoblaze
 026  1D143                          COMPARE s1, 43                   ; 67              ; is byte = 67 C
 027  32059                          JUMP Z, 059[ProgKeyPadpico]      ; 67 means program KeyPadpico
 028  1D146                          COMPARE s1, 46["F"]              ; is byte = 'F' BT RAM
 029  3209C                          JUMP Z, 09C[Prog_BT_RAM_mem]     ; 'R' means program BT RAM
 02A  1D147                          COMPARE s1, 47["G"]              ; is byte = 'G' KEYPAD RAM
 02B  320C5                          JUMP Z, 0C5[Prog_Keypad_RAM_mem] ; 'R' means program BT RAM
 02C  1D152                          COMPARE s1, 52["R"]              ; is byte = 'R' BT RAM
 02D  32072                          JUMP Z, 072[Prog_BT_RAM]         ; 'R' means program BT RAM
 02E  1D153                          COMPARE s1, 53["S"]              ; is byte = 'S' KEYPAD RAM
 02F  32087                          JUMP Z, 087[Prog_Keypad_RAM]     ; 'R' means program BT RAM
 030  22001                          JUMP 001[start]
 031  01708                 ProgDSP: LOAD s7, 08
 032  01200                          LOAD s2, 00
 033  01300                          LOAD s3, 00                      ; s2 (LSB),s3(USB) of prog counter of first address of new program ie 0 for DSP!
 034  2001B              GetProgDSP: CALL 01B[GetByte]
 035  1D150                          COMPARE s1, 50                   ; 80              ; 80 ($50) indicates end of program (assumes this apears before end of program space!)
 036  3206D                          JUMP Z, 06D[ResetDSP]            ; When end of prog byte 80 is received reset DSP processor
 037  2D103                          OUTPUT s1, 03[Instructiona]
 038  2001B                          CALL 01B[GetByte]
 039  2D104                          OUTPUT s1, 04[Instructionb]
 03A  2001B                          CALL 01B[GetByte]
 03B  2D105                          OUTPUT s1, 05[Instructionc]      ; write 3x 6bits to latches ready for instruction write
 03C  2D206                          OUTPUT s2, 06[ProgramL]
 03D  2D307                          OUTPUT s3, 07[ProgramM]          ; Load memory address to write (starting from 0!)
 03E  00470                          LOAD s4, s7
 03F  2D419                          OUTPUT s4, 19[RAMWriteContol]
 040  01400                          LOAD s4, 00
 041  2D419                          OUTPUT s4, 19[RAMWriteContol]
 042  11201                          ADD s2, 01
 043  13300                          ADDCY s3, 00                     ; Increment program counter
 044  22034                          JUMP 034[GetProgDSP]             ; Get next instruction
 045  0170C              ProgBTpico: LOAD s7, 0C                      ;12              ; sets bits 2 and 3
 046  01200                          LOAD s2, 00
 047  01300                          LOAD s3, 00                      ; s2 (LSB),s3(USB) of prog counter of first address of new program ie 0 for DSP!
 048  2001B           GetProgBTpico: CALL 01B[GetByte]
 049  1D150                          COMPARE s1, 50                   ; 80              ; 80 ($50) indicates end of program (assumes this apears before end of program space!)
 04A  3206D                          JUMP Z, 06D[ResetDSP]            ; When end of prog byte 80 is received reset picoblaze processors
 04B  2D103                          OUTPUT s1, 03[Instructiona]
 04C  2001B                          CALL 01B[GetByte]
 04D  2D104                          OUTPUT s1, 04[Instructionb]
 04E  2001B                          CALL 01B[GetByte]
 04F  2D105                          OUTPUT s1, 05[Instructionc]      ; write 3x 6bits to latches ready for instruction write
 050  2D206                          OUTPUT s2, 06[ProgramL]
 051  2D307                          OUTPUT s3, 07[ProgramM]          ; Load memory address to write (starting from 0!)
 052  00470                          LOAD s4, s7
 053  2D419                          OUTPUT s4, 19[RAMWriteContol]
 054  01400                          LOAD s4, 00
 055  2D419                          OUTPUT s4, 19[RAMWriteContol]
 056  11201                          ADD s2, 01
 057  13300                          ADDCY s3, 00                     ; Increment program counter
 058  22048                          JUMP 048[GetProgBTpico]          ; Get next instruction
 059  01710          ProgKeyPadpico: LOAD s7, 10                      ; 16              ; sets bits 4
 05A  01200                          LOAD s2, 00
 05B  01300                          LOAD s3, 00                      ; s2 (LSB),s3(USB) of prog counter of first address of new program ie 0 for DSP!
 05C  2001B       GetProgKeyPadpico: CALL 01B[GetByte]
 05D  1D150                          COMPARE s1, 50                   ; 80              ; 80 ($50) indicates end of program (assumes this apears before end of program space!)
 05E  3206D                          JUMP Z, 06D[ResetDSP]            ; When end of prog byte 80 is received reset picoblaze processors
 05F  2D103                          OUTPUT s1, 03[Instructiona]
 060  2001B                          CALL 01B[GetByte]
 061  2D104                          OUTPUT s1, 04[Instructionb]
 062  2001B                          CALL 01B[GetByte]
 063  2D105                          OUTPUT s1, 05[Instructionc]      ; write 3x 6bits to latches ready for instruction write
 064  2D206                          OUTPUT s2, 06[ProgramL]
 065  2D307                          OUTPUT s3, 07[ProgramM]          ; Load memory address to write (starting from 0!)
 066  00470                          LOAD s4, s7
 067  2D419                          OUTPUT s4, 19[RAMWriteContol]
 068  01400                          LOAD s4, 00
 069  2D419                          OUTPUT s4, 19[RAMWriteContol]
 06A  11201                          ADD s2, 01
 06B  13300                          ADDCY s3, 00                     ; Increment program counter
 06C  2205C                          JUMP 05C[GetProgKeyPadpico]      ; Get next instruction
 06D  0541C                ResetDSP: OR s4, 1C                        ; 28              ; to send reset to DSP + other picoblazes... (sets bits 3,4,5 of ProgramM)
 06E  2D407                          OUTPUT s4, 07[ProgramM]
 06F  01400                          LOAD s4, 00
 070  2D407                          OUTPUT s4, 07[ProgramM]
 071  22001                          JUMP 001[start]                  ; Go back and wait for another program
 072                    Prog_BT_RAM: 
 072  01718                          LOAD s7, 18                      ; $18             ; sets bits 4
 073  01200                          LOAD s2, 00
 074  01300                          LOAD s3, 00                      ; s2 (LSB),s3(USB) of prog counter of first address of new program ie 0 for DSP!
 075               Prog_BT_RAM_Loop: 
 075  2001B                          CALL 01B[GetByte]
 076  1D17F                          COMPARE s1, 7F                   ; $7F             ; $7F indicates end of program (assumes this apears before end of program space!)
 077  3206D                          JUMP Z, 06D[ResetDSP]            ; When end of prog byte 80 is received reset picoblaze processors
 078  00510                          LOAD s5, s1
 079  2001B                          CALL 01B[GetByte]
 07A  1D17F                          COMPARE s1, 7F                   ;$7F             ; $7F indicates end of program (assumes this apears before end of program space!)
 07B  3206D                          JUMP Z, 06D[ResetDSP]            ; When end of prog byte 80 is received reset picoblaze processors
 07C  2D117                          OUTPUT s1, 17[RAMDataLSB]
 07D  2D516                          OUTPUT s5, 16[RAMDataMSB]
 07E  2D206                          OUTPUT s2, 06[ProgramL]
 07F  2D307                          OUTPUT s3, 07[ProgramM]          ; Load memory address to write (starting from 0!)
 080  00470                          LOAD s4, s7
 081  2D419                          OUTPUT s4, 19[RAMWriteContol]
 082  01400                          LOAD s4, 00
 083  2D419                          OUTPUT s4, 19[RAMWriteContol]
 084  11201                          ADD s2, 01
 085  13300                          ADDCY s3, 00                     ; Increment program counter
 086  22075                          JUMP 075[Prog_BT_RAM_Loop]
 087                Prog_Keypad_RAM: 
 087  01720                          LOAD s7, 20                      ; $20             ; sets bits
 088  01200                          LOAD s2, 00
 089  01300                          LOAD s3, 00                      ; s2 (LSB),s3(USB) of prog counter of first address of new program ie 0 for DSP!
 08A           Prog_Keypad_RAM_Loop: 
 08A  2001B                          CALL 01B[GetByte]
 08B  1D17F                          COMPARE s1, 7F                   ; $7F             ; $7F indicates end of program (assumes this apears before end of program space!)
 08C  3206D                          JUMP Z, 06D[ResetDSP]            ; When end of prog byte 80 is received reset picoblaze processors
 08D  00510                          LOAD s5, s1
 08E  2001B                          CALL 01B[GetByte]
 08F  1D17F                          COMPARE s1, 7F                   ; $7F             ; $7F indicates end of program (assumes this apears before end of program space!)
 090  3206D                          JUMP Z, 06D[ResetDSP]            ; When end of prog byte 80 is received reset picoblaze processors
 091  2D117                          OUTPUT s1, 17[RAMDataLSB]
 092  2D516                          OUTPUT s5, 16[RAMDataMSB]
 093  2D206                          OUTPUT s2, 06[ProgramL]
 094  2D307                          OUTPUT s3, 07[ProgramM]          ; Load memory address to write (starting from 0!)
 095  00470                          LOAD s4, s7
 096  2D419                          OUTPUT s4, 19[RAMWriteContol]
 097  01400                          LOAD s4, 00
 098  2D419                          OUTPUT s4, 19[RAMWriteContol]
 099  11201                          ADD s2, 01
 09A  13300                          ADDCY s3, 00                     ; Increment program counter
 09B  2208A                          JUMP 08A[Prog_Keypad_RAM_Loop]
 09C                Prog_BT_RAM_mem: 
 09C  01718                          LOAD s7, 18                      ; $18             ; sets bits 4
 09D  01200                          LOAD s2, 00
 09E  01300                          LOAD s3, 00                      ; s2 (LSB),s3(USB) of prog counter of first address of new program ie 0 for DSP!
 09F             GetProg_BT_RAM_mem: 
 09F  2001B                          CALL 01B[GetByte]
 0A0  1D150                          COMPARE s1, 50                   ; 80              ; 80 ($50) indicates end of program (assumes this apears before end of program space!)
 0A1  3206D                          JUMP Z, 06D[ResetDSP]            ; When end of prog byte 80 is received reset DSP processor
 0A2  00810                          LOAD s8, s1                      ; first 6 bits
 0A3  2001B                          CALL 01B[GetByte]
 0A4  00910                          LOAD s9, s1                      ; second 6 bits
 0A5  2001B                          CALL 01B[GetByte]
 0A6  00A10                          LOAD sA, s1                      ; third 6 bits
 0A7  0383F                          AND s8, 3F                       ; $3F             ; most significant
 0A8  0393F                          AND s9, 3F                       ; $3F             ; middle 6
 0A9  03A3F                          AND sA, 3F                       ; $3F             ; lower 6 bits
 0AA  00B90                          LOAD sB, s9
 0AB  03B03                          AND sB, 03                       ; $03             ; bottom 2 bits  UU UUUUMMMM  MMLLLLLL
 0AC  14B06                          SL0 sB                           ; shift 6 bits
 0AD  14B06                          SL0 sB                           ; shift 6 bits
 0AE  14B06                          SL0 sB                           ; shift 6 bits
 0AF  14B06                          SL0 sB                           ; shift 6 bits
 0B0  14B06                          SL0 sB                           ; shift 6 bits
 0B1  14B06                          SL0 sB                           ; shift 6 bits
 0B2  04AB0                          OR sA, sB
 0B3  1490E                          SR0 s9                           ; shift down 2 bits
 0B4  1490E                          SR0 s9
 0B5  14806                          SL0 s8                           ; shift up 2 bits
 0B6  14806                          SL0 s8
 0B7  14806                          SL0 s8
 0B8  14806                          SL0 s8
 0B9  04980                          OR s9, s8
 0BA  2DA17                          OUTPUT sA, 17[RAMDataLSB]
 0BB  2D916                          OUTPUT s9, 16[RAMDataMSB]
 0BC  2D206                          OUTPUT s2, 06[ProgramL]
 0BD  2D307                          OUTPUT s3, 07[ProgramM]          ; Load memory address to write (starting from 0!)
 0BE  00470                          LOAD s4, s7
 0BF  2D419                          OUTPUT s4, 19[RAMWriteContol]
 0C0  01400                          LOAD s4, 00
 0C1  2D419                          OUTPUT s4, 19[RAMWriteContol]
 0C2  11201                          ADD s2, 01
 0C3  13300                          ADDCY s3, 00                     ; Increment program counter
 0C4  2209F                          JUMP 09F[GetProg_BT_RAM_mem]     ; Get next instruction
 0C5            Prog_Keypad_RAM_mem: 
 0C5  01720                          LOAD s7, 20                      ; $20             ; sets bits
 0C6  01200                          LOAD s2, 00
 0C7  01300                          LOAD s3, 00                      ; s2 (LSB),s3(USB) of prog counter of first address of new program ie 0 for DSP!
 0C8         GetProg_Keypad_RAM_mem: 
 0C8  2001B                          CALL 01B[GetByte]
 0C9  1D150                          COMPARE s1, 50                   ; 80              ; 80 ($50) indicates end of program (assumes this apears before end of program space!)
 0CA  3206D                          JUMP Z, 06D[ResetDSP]            ; When end of prog byte 80 is received reset DSP processor
 0CB  00810                          LOAD s8, s1
 0CC  2001B                          CALL 01B[GetByte]
 0CD  00910                          LOAD s9, s1
 0CE  2001B                          CALL 01B[GetByte]
 0CF  00A10                          LOAD sA, s1                      ; write 3x 6bits to latches ready for instruction write
 0D0  0383F                          AND s8, 3F                       ; $3F             ; most significant
 0D1  0393F                          AND s9, 3F                       ; $3F             ; middle 6
 0D2  03A3F                          AND sA, 3F                       ; $3F             ; lower 6 bits
 0D3  00B90                          LOAD sB, s9
 0D4  03B03                          AND sB, 03                       ; $03             ; bottom 2 bits  UU UUUUMMMM  MMLLLLLL
 0D5  14B06                          SL0 sB                           ; shift 6 bits
 0D6  14B06                          SL0 sB                           ; shift 6 bits
 0D7  14B06                          SL0 sB                           ; shift 6 bits
 0D8  14B06                          SL0 sB                           ; shift 6 bits
 0D9  14B06                          SL0 sB                           ; shift 6 bits
 0DA  14B06                          SL0 sB                           ; shift 6 bits
 0DB  04AB0                          OR sA, sB
 0DC  1490E                          SR0 s9                           ; shift down 2 bits
 0DD  1490E                          SR0 s9
 0DE  14806                          SL0 s8                           ; shift up 2 bits
 0DF  14806                          SL0 s8
 0E0  14806                          SL0 s8
 0E1  14806                          SL0 s8
 0E2  04980                          OR s9, s8
 0E3  2DA17                          OUTPUT sA, 17[RAMDataLSB]
 0E4  2D916                          OUTPUT s9, 16[RAMDataMSB]
 0E5  2D206                          OUTPUT s2, 06[ProgramL]
 0E6  2D307                          OUTPUT s3, 07[ProgramM]          ; Load memory address to write (starting from 0!)
 0E7  00470                          LOAD s4, s7
 0E8  2D419                          OUTPUT s4, 19[RAMWriteContol]
 0E9  01400                          LOAD s4, 00
 0EA  2D419                          OUTPUT s4, 19[RAMWriteContol]
 0EB  11201                          ADD s2, 01
 0EC  13300                          ADDCY s3, 00                     ; Increment program counter
 0ED  220C8                          JUMP 0C8[GetProg_Keypad_RAM_mem] ; Get next instruction


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

C:\Users\gnaylor.CCFEPC\Dropbox\N3workingG\TE0722Rebuild\N3SysGen\BootProg6PlusRAMs.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   17'd         
 timestamp_minutes 22'd         
 timestamp_seconds 38'd         
 datestamp_year    16'd         
 datestamp_month   5'd          
 datestamp_day     24'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           
 Uart_rx           00           BootProg6PlusRAMs.psm
 Uart_status       01           BootProg6PlusRAMs.psm
 DataLatch         00           BootProg6PlusRAMs.psm
 Uart_Tx           01           BootProg6PlusRAMs.psm
 Instructiona      03           BootProg6PlusRAMs.psm
 Instructionb      04           BootProg6PlusRAMs.psm
 Instructionc      05           BootProg6PlusRAMs.psm
 ProgramL          06           BootProg6PlusRAMs.psm
 ProgramM          07           BootProg6PlusRAMs.psm
 RAMWriteContol    25'd         BootProg6PlusRAMs.psm
 RAMDataMSB        16           BootProg6PlusRAMs.psm
 RAMDataLSB        17           BootProg6PlusRAMs.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.63"        
 datestamp$        "24 May 2016"  
 timestamp$        "17:22:38"     



List of line labels

   Label                    Addr  Source PSM File

 * boot                     000   BootProg6PlusRAMs.psm
   start                    001   BootProg6PlusRAMs.psm
   DoUserProg               007   BootProg6PlusRAMs.psm
   GetProg                  00A   BootProg6PlusRAMs.psm
   GetByte                  01B   BootProg6PlusRAMs.psm
   NewProg                  021   BootProg6PlusRAMs.psm
   ProgOtherPico            022   BootProg6PlusRAMs.psm
   ProgDSP                  031   BootProg6PlusRAMs.psm
   GetProgDSP               034   BootProg6PlusRAMs.psm
   ProgBTpico               045   BootProg6PlusRAMs.psm
   GetProgBTpico            048   BootProg6PlusRAMs.psm
   ProgKeyPadpico           059   BootProg6PlusRAMs.psm
   GetProgKeyPadpico        05C   BootProg6PlusRAMs.psm
   ResetDSP                 06D   BootProg6PlusRAMs.psm
   Prog_BT_RAM              072   BootProg6PlusRAMs.psm
   Prog_BT_RAM_Loop         075   BootProg6PlusRAMs.psm
   Prog_Keypad_RAM          087   BootProg6PlusRAMs.psm
   Prog_Keypad_RAM_Loop     08A   BootProg6PlusRAMs.psm
   Prog_BT_RAM_mem          09C   BootProg6PlusRAMs.psm
   GetProg_BT_RAM_mem       09F   BootProg6PlusRAMs.psm
   Prog_Keypad_RAM_mem      0C5   BootProg6PlusRAMs.psm
   GetProg_Keypad_RAM_mem   0C8   BootProg6PlusRAMs.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             51
 STAR              -

 AND               9
 OR                5
 XOR               -

 ADD               8
 ADDCY             8
 SUB               -
 SUBCY             -

 TEST              -
 TESTCY            -
 COMPARE          20
 COMPARECY         -

 SL0              20
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               4
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             2
 OUTPUT           54
 OUTPUTK           -

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             33
 JUMP@             -
 CALL             23
 CALL@             -
 RETURN            1
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
