KCPSM6 Assembler log file for program 'Z:\home\graham\Dropbox\N3workingG\TE0722Rebuild\N3SysGen\DSPpico.psm'.
Generated by KCPSM6 version v2.63
Ken Chapman - Xilinx Ltd - 20th December 2013

Assembly datestamp: 28 Jun 2016
Assembly timestamp: 10:15:56

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 360 hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 865
Memory locations available: 3231


Assembly listing

 Addr Code                           Instruction

 000                                 ;GV06 increase SSB amplitude on TX
 000                                 ;GV03 corrected OutAmp doubling and increased speaker volume
 000                                 ;GV02 Halved AGC thresholds to avoid clipping
 000                                 ;GV01 Reduce Speaker volume by increasing AGC value to 63 on startup
 000                                 ;GV00 return counter to zero for new Zynq design
 000                                 ;GVA5 for TE0722, with RX/TX frequencies adjusted for 32.768MHz (mod in Keypad assembler)
 000                                 ;GVA4 correct bad setting of AvesignalMSB instead of USB (caused crashing)
 000                                 ;GVA2 BT input from mic is taken externally in logic - also removed audio double so as not to saturate voice on transmission (but will drop volume on handset ~6dB)
 000                                 ;AND over haul AGC to use 24 bit average level registering so level is monitored with AveSignalUSB
 000                                 ;GVA1 Try to implement tone detect parts
 000                                 ;GVA0 Project to get AGC to act on external MUX, but still use last 4 bits for decrease 3dB and 1.5dB in the Pico
 000                                 ;GV9B to do - mods to detect start and end tones
 000                                 ;GV96 readjust AGC settings and bit offsets
 000                                 ;GV93add back divide by 2 on transmit line 567
 000                                 ; GV51 remove level divide by 2 on transmit to compensate for drop in AGC level (so only reduces level for receive)
 000                                 ;GV50, drop DSP AGC levels back to just below as in GV45
 000                                 ;GV47 increase DSP AGC thresholds
 000                                 ;GV46 added further double on RF out amplitude
 000                                 ;GV45 Corrected resetting of AveSignalMSB to middle value so as to avoid double jump and increased allowable rang to avoid unnecessary jumps (abd corrected AGC wrapping in GV44 when limiting if greater than 44 rather than to 44 ie CALL Z not CALL NC !!!)
 000                                 ;GV44 add 1_5dB decrease - still need to correct AGC range (increase another factor 2) and decrease limits
 000                                 ;GV43 correct beacon phase wander
 000                                 ;GV42 disable UART streaming
 000                                 ;GV3F Add streaming over UART on TX (State bit 2 set)
 000                                 ;GV3E try adding small sine wave - not yet implemented
 000                                 ;For GV3D, need to add further routines, increaseAGC2 and increaseAGC4 that increase attenuation 6dB and 12dB respectively (within limits) - look at how AveSignalMSB is reset.
 000                                 ;For GV3B try to correct incorrect AGC operation with twice as many values
 000                                 ;store TX AGCvalue before warble (or when stable) and add 3dB steps to AGCvalue
 000                                 ;31/1/13 Added 12dB to BT mic level using Audiodouble
 000                                 ;GV38 Use audio double on transmitpath
 000                                 ;For GV37 Adjusted AGC thresholds and increased time constant a factor 8.
 000                                 ;31/12/12 increase volume and transmitted power by increasing AGC setting a factor of 2 (from 4,12 to 8,24 - AGCupp/lowthreshold). Also set AGCvalue to 06 INITIALY (may need to be adjusted) recall last AGCvalue when switch mode. Line 439 increase TX modulation.
 000                                 ;removed LPF
 000                                 ;Increased AGC setting -36 OK, 72 too high (bad clipping noise)
 000                                 ;Slow saturation of SSBamp
 000                                 ;Added BT signal not present flag (16/1/12)
 000                                 ;Try to fix failure to un-block DSP problem (18/11/11 in DSPblock routine)
 000                                 ;Uses phase representation of TX audio - works in study OK 18/11/11
 000                                 ;29/8/11 Increased audio frequency resolution to 16 bits
 000                                 ;19/8/11, tweaked audio scaling of TX
 000                                 ;Modified vor BT input
 000                                 ;This needs to be modified for COTS version at 49.152MHz - in particular calibration of audio frequency output to SSB modulator has been modified see line 398
 000                                 ; Inputs sine wave as audio
 000                                 ; 20/7 updated input and output ports for multipico version
 000                                 ; Feb 09 Start testing AGC part of streamed signal
 000                                 ; Now implementing on SSBN.mdl
 000                                 ;
 000                                 ; DSP routine for SSB picoblaze
 000                                 ;
 000                                 ; Implemented commands:
 000                                 ; 0 = RX mode
 000                                 CONSTANT AGClowthreshold, 3'd                  ;;These are thresholds for the measured signal
 000                                 CONSTANT AGClowthreshold2, 1'd                 ;;These are thresholds for the measured signal
 000                                 CONSTANT AGCInitial, 4'd                       ;;This is mid way between thresholds
 000                                 CONSTANT AGCuppthreshold, 5'd
 000                                 CONSTANT AGCuppthreshold2, 8'd                 ;3dB above first threshold
 000                                 CONSTANT AGCuppthreshold4, 11'd
 000                                 CONSTANT delay_1us_constant, 06                ; Value (13)19 or 12? decimal suitable for 50MHz clock – about 6 for 33MHz?
 000                                 CONSTANT m, 8'd                                ; No. of iterations for cordic
 000                                 CONSTANT m_plus_1, 9'd                         ; No. of iterations for cordic
 000                                 CONSTANT count_1000_lsb, E8                    ; lower 8-bits of 1000 count value
 000                                 CONSTANT count_1000_msb, 03                    ; upper 8-bits of 1000 count value
 000                                 CONSTANT half_pi_LSB, 00                       ;
 000                                 CONSTANT half_pi_MSB, 40                       ; 360 degrees = $10000
 000                                 CONSTANT audioTest, 2'd                        ; Frequency 2=800Hz, 3=1200Hz, 4=1.6kHz 7=2.8kHz
 000                                 ;Frequency values for start and stop tones
 000                                 CONSTANT StrtToneAInc, 9F
 000                                 CONSTANT StrtToneBInc, 69
 000                                 CONSTANT StopToneAInc, 5A
 000                                 CONSTANT StopToneBInc, 78
 000                                 ; FIR coefficients for 0 and 90 degree filterred signals, these are SIGNED values!!
 000                                 CONSTANT coeffI0MSB, F6                        ; Smallest coefficient (negative value!)
 000                                 CONSTANT coeffI0LSB, 92
 000                                 CONSTANT coeffI1MSB, F4
 000                                 CONSTANT coeffI1LSB, 8A
 000                                 CONSTANT coeffI2MSB, F2
 000                                 CONSTANT coeffI2LSB, CC
 000                                 CONSTANT coeffI3MSB, F1
 000                                 CONSTANT coeffI3LSB, 77
 000                                 CONSTANT coeffI4MSB, F0
 000                                 CONSTANT coeffI4LSB, A1
 000                                 CONSTANT coeffI5MSB, 40                        ; Actualy half value of peak
 000                                 CONSTANT coeffI5LSB, 00
 000                                 ; Q values are still signed but are all positive
 000                                 CONSTANT coeffQ0MSB, 00                        ; Smallest coefficient
 000                                 CONSTANT coeffQ0LSB, A7
 000                                 CONSTANT coeffQ1MSB, 05
 000                                 CONSTANT coeffQ1LSB, 2D
 000                                 CONSTANT coeffQ2MSB, 0C
 000                                 CONSTANT coeffQ2LSB, 83
 000                                 CONSTANT coeffQ3MSB, 1B
 000                                 CONSTANT coeffQ3LSB, 4F
 000                                 CONSTANT coeffQ4MSB, 5C
 000                                 CONSTANT coeffQ4LSB, 2F
 000                                 ; Registers
 000                                 NAMEREG sF, AveSignalUSB                       ; In fact average of magnitude
 000                                 NAMEREG sE, AveSignalMSB
 000                                 NAMEREG sD, AveSignalLSB
 000                                 ;NAMEREG  sD, BaselineMSB                  ; In fact average of signed signal
 000                                 ;NAMEREG  sC, BaselineLSB
 000                                 NAMEREG sC, SineCtr                            ;Aargh sB is used by the Cordic!! - but not used now
 000                                 ; registers sA-sD are used for longish term storage...!
 000                                 ; sA used for cordic calcs and FIR work for relative pos of roving ptr
 000                                 ; Scratch pad
 000                                 ; registers 0-8 used for cordic table:
 000                                 ; reg 0=45degrees
 000                                 ; ..
 000                                 ; reg 7=0.44761degrees
 000                                 ; Input port
 000                                 CONSTANT AudioMSB, 0'd
 000                                 CONSTANT AudioLSB, 1'd
 000                                 CONSTANT Strobe, 2'd                           ;     bit0=6kHz square wave - the rest are now zeros
 000                                 CONSTANT Command, 3'd                          ; From interface pico
 000                                 CONSTANT MltplyMSB, 4'd                        ; Top significant byte of multiplier output
 000                                 CONSTANT MltplyLSB, 5'd                        ; (only 16 bits retained)
 000                                 CONSTANT BTaudioMSB, 6'd                       ; Input from headset micro
 000                                 CONSTANT BTaudioLSB, 7'd                       ;
 000                                 CONSTANT RAMdataMSB, 8'd                       ;Data from variable storage RAM
 000                                 CONSTANT RAMdataLSB, 9'd
 000                                 CONSTANT Status, 10'd                          ;bit 0 is DSP2user fifo full, bit 1 is no BT audio stream from headset microphone, bit 2 is TX_high
 000                                 ; Output ports
 000                                 CONSTANT MSBAudio, 0'd
 000                                 CONSTANT LSBAudio, 1'd
 000                                 CONSTANT SSBAmp, 2'd
 000                                 CONSTANT CmdToUser, 3'd
 000                                 CONSTANT CoeffMSB, 4'd
 000                                 CONSTANT CoeffLSB, 5'd
 000                                 CONSTANT SignalMSB, 6'd
 000                                 CONSTANT SignalLSB, 7'd
 000                                 CONSTANT Data2archiveMSB, 10'd
 000                                 CONSTANT Data2archiveLSB, 11'd
 000                                 CONSTANT Controlbits, 12'd                     ; BIT OFFSETS:
 000                                 ; Bit offsets:
 000                                 CONSTANT EnMult, 1'd
 000                                 CONSTANT AckFIFO, 32'd                         ;   5 Acknowledge FIFO (present character)
 000                                 CONSTANT PhaseIncrement, 13'd
 000                                 CONSTANT AudioFreqLSB, 14'd
 000                                 CONSTANT AudioPhaseMSB, 15'd
 000                                 CONSTANT AudioPhaseLSB, 16'd
 000                                 CONSTANT EnableSpeaker, 17'd
 000                                 CONSTANT MUXport, 18'd                         ;New port to drive AGC MUX
 000                                 CONSTANT StartToneA, 19'd
 000                                 CONSTANT StartToneALong, 20'd
 000                                 CONSTANT StartToneB, 21'd
 000                                 CONSTANT StartToneBLong, 22'd
 000                                 CONSTANT StopToneA, 23'd
 000                                 CONSTANT StopToneALong, 24'd
 000                                 CONSTANT StopToneB, 25'd
 000                                 CONSTANT StopToneBLong, 26'd
 000                                 CONSTANT MSBBTAudio, 27'd
 000                                 CONSTANT LSBBTAudio, 28'd
 000                                 ; Scratchpad registers
 000                                 ; 0-8 used for Cordic Table!
 000                                 CONSTANT AmpMSB, 10'd
 000                                 CONSTANT AmpLSB, 11'd                          ; Bit 0 toggles at 16kHz
 000                                 CONSTANT PhaseMSB, 12'd
 000                                 CONSTANT PhaseLSB, 13'd                        ; Is this necessary?
 000                                 CONSTANT AGCvalue, 14'd                        ; Two times number of bits to shift (250-11) ie -6 (FA -wk signal) to 11 (0B -Strong signal)
 000                                 CONSTANT VolSetting, 15'd
 000                                 CONSTANT OldPhaseMSB, 16'd
 000                                 CONSTANT AudioScratch, 17'd
 000                                 CONSTANT State, 18'd                           ; Bit 1 0=RX, 1=TX (TX_high), Bit 2 set is streaming TX data from UART
 000                                 ;CONSTANT NormalisedSignalMSB,   19'd                  ; Current signal MSB after AGC
 000                                 CONSTANT LVPtr, 20'd                           ; From HistoryStart to HistoryStart+41 (place to store most recent signal value)
 000                                 CONSTANT IaccuMSB, 21'd
 000                                 CONSTANT IaccuLSB, 22'd
 000                                 CONSTANT QaccuMSB, 23'd
 000                                 CONSTANT QaccuLSB, 24'd
 000                                 CONSTANT OldPhaseLSB, 25'd
 000                                 ; Scratch pad 30-69 used for sinewave - 20 values for sinewave, 40 for dirac
 000                                 CONSTANT startsine, 30'd
 000                                 CONSTANT endsine, 45'd
 000                                 CONSTANT HistoryStart, 70'd                    ; 2 bytes per historical sample - 21 2byte history values
 000                                 CONSTANT HistoryStart42, 112'd                 ; 2 bytes per historical sample - 21 2byte history values
 000                                 ; History values up to and including 111
 000                                 CONSTANT AGCvalueTX, 112'd
 000                                 CONSTANT AGCvalueRX, 113'd
 000                                 CONSTANT AGCcounter, 114'd                     ;store counter 0 to 255 to only perform AGC calc every 1 in 4 audio samples and sinewave increment every 8 samples
 000                                 CONSTANT UARTBitshift, 115'd
 000                                 ;Register values for tone detection part
 000                                 CONSTANT AveStrtToneAMSB_I, 116'd
 000                                 CONSTANT AveStrtToneALSB_I, 117'd
 000                                 CONSTANT AveStrtToneBMSB_I, 118'd
 000                                 CONSTANT AveStrtToneBLSB_I, 119'd
 000                                 CONSTANT AveStopToneAMSB_I, 120'd
 000                                 CONSTANT AveStopToneALSB_I, 121'd
 000                                 CONSTANT AveStopToneBMSB_I, 122'd
 000                                 CONSTANT AveStopToneBLSB_I, 123'd
 000                                 CONSTANT LongAveStrtToneAMSB_I, 124'd
 000                                 CONSTANT LongAveStrtToneALSB_I, 125'd
 000                                 CONSTANT LongAveStrtToneBMSB_I, 126'd
 000                                 CONSTANT LongAveStrtToneBLSB_I, 127'd
 000                                 CONSTANT LongAveStopToneAMSB_I, 128'd
 000                                 CONSTANT LongAveStopToneALSB_I, 129'd
 000                                 CONSTANT LongAveStopToneBMSB_I, 130'd
 000                                 CONSTANT LongAveStopToneBLSB_I, 131'd
 000                                 CONSTANT AveStrtToneAMSB_Q, 132'd
 000                                 CONSTANT AveStrtToneALSB_Q, 133'd
 000                                 CONSTANT AveStrtToneBMSB_Q, 134'd
 000                                 CONSTANT AveStrtToneBLSB_Q, 135'd
 000                                 CONSTANT AveStopToneAMSB_Q, 136'd
 000                                 CONSTANT AveStopToneALSB_Q, 137'd
 000                                 CONSTANT AveStopToneBMSB_Q, 138'd
 000                                 CONSTANT AveStopToneBLSB_Q, 139'd
 000                                 CONSTANT LongAveStrtToneAMSB_Q, 140'd
 000                                 CONSTANT LongAveStrtToneALSB_Q, 141'd
 000                                 CONSTANT LongAveStrtToneBMSB_Q, 142'd
 000                                 CONSTANT LongAveStrtToneBLSB_Q, 143'd
 000                                 CONSTANT LongAveStopToneAMSB_Q, 144'd
 000                                 CONSTANT LongAveStopToneALSB_Q, 145'd
 000                                 CONSTANT LongAveStopToneBMSB_Q, 146'd
 000                                 CONSTANT LongAveStopToneBLSB_Q, 147'd
 000                                 ;Pointers for tones in sinewave - use 4 bits for actual ptr in scratchpad (bottom 2bits of MSB and top 2 bits of LSB)
 000                                 CONSTANT StrtToneAPtrMSB, 148'd
 000                                 CONSTANT StrtToneAPtrLSB, 149'd
 000                                 CONSTANT StrtToneBPtrMSB, 150'd
 000                                 CONSTANT StrtToneBPtrLSB, 151'd
 000                                 CONSTANT StopToneAPtrMSB, 152'd
 000                                 CONSTANT StopToneAPtrLSB, 153'd
 000                                 CONSTANT StopToneBPtrMSB, 154'd
 000                                 CONSTANT StopToneBPtrLSB, 155'd
 000                                 CONSTANT FirstToneInc, 156'd                   ;4 Locations to store tone increments (actually there are 4 unused registers here as well)
 000                                 CONSTANT FirstToneInc02, 158'd                 ;4 Locations to store tone increments (actually there are 4 unused registers here as well)
 000                                 CONSTANT FirstToneInc04, 160'd                 ;4 Locations to store tone increments (actually there are 4 unused registers here as well)
 000                                 CONSTANT FirstToneInc06, 162'd                 ;4 Locations to store tone increments (actually there are 4 unused registers here as well)
 000                                 CONSTANT NormalisedMagMSB, 164'd               ;Absolute value of current signal
 000                                 CONSTANT NormalisedMagLSB, 165'd               ;Absolute value of current signal
 000                                 ;GenerateCode        MEM       "S3eDSPprog.mem"
 000                                 ;start:              JUMP      cold_start       -Try without jump to $20 offset - should work!?
 000                                 ; Start of program (Jump instruction in preloaded memory!)
 000                                 ;                   ORG       $20
 000                                 ; pre-load scratchpad with cordic table.. 360 degrees is $0800 - then *32=$10000
 000  010FF              cold_start: LOAD s0, FF[255'd]                             ; phase for 45 degrees- actually a bit less!
 001  2F000                          STORE s0, 00
 002  01097                          LOAD s0, 97[151'd]                             ; phase for 26.565 degrees
 003  2F001                          STORE s0, 01
 004  01050                          LOAD s0, 50[80'd]                              ; phase for 14.036 degrees
 005  2F002                          STORE s0, 02
 006  01029                          LOAD s0, 29[41'd]                              ; phase for 7.125 degrees
 007  2F003                          STORE s0, 03
 008  01014                          LOAD s0, 14[20'd]                              ; phase for 3.576 degrees
 009  2F004                          STORE s0, 04
 00A  0100A                          LOAD s0, 0A[10'd]                              ; phase for 1.79 degrees
 00B  2F005                          STORE s0, 05
 00C  01005                          LOAD s0, 05[5'd]                               ; phase for 0.895 degrees
 00D  2F006                          STORE s0, 06
 00E  01003                          LOAD s0, 03[3'd]                               ; phase for 0.448 degrees
 00F  2F007                          STORE s0, 07
 010  01001                          LOAD s0, 01[1'd]                               ; phase for 0.224 degrees
 011  2F008                          STORE s0, 08
 012  01010                          LOAD s0, 10[16'd]
 013  2F070                          STORE s0, 70[AGCvalueTX]
 014  0103F                          LOAD s0, 3F[63'd]
 015  2F071                          STORE s0, 71[AGCvalueRX]                       ;set to low value for RX
 016                                 ; LOAD      s1, 30'd
 016                                 ; LOAD      s0, 0
 016                                 ; diracload:          STORE     s0, s1
 016                                 ; ADD       s1, 1
 016                                 ; COMP      s1, 69'd
 016                                 ; JUMP      NZ, diracload
 016                                 ; LOAD      s0, 75'd
 016                                 ; STORE     s0, 69'd
 016                                 ;Sinewave table: Step through this 1 in 8 loops to give 62.5Hz sinewave on transmission
 016  01002                          LOAD s0, 02[2'd]                               ; 1st element of sinewave
 017  2F01E                          STORE s0, 1E[30'd]
 018  01003                          LOAD s0, 03[3'd]                               ; 2nd element of sinewave
 019  2F01F                          STORE s0, 1F[31'd]
 01A  01004                          LOAD s0, 04[4'd]                               ; 3rd element of sinewave
 01B  2F020                          STORE s0, 20[32'd]
 01C  01004                          LOAD s0, 04[4'd]                               ; etc
 01D  2F021                          STORE s0, 21[33'd]
 01E  01004                          LOAD s0, 04[4'd]                               ; etc
 01F  2F022                          STORE s0, 22[34'd]
 020  01003                          LOAD s0, 03[3'd]                               ;
 021  2F023                          STORE s0, 23[35'd]
 022  01002                          LOAD s0, 02[2'd]                               ; etc
 023  2F024                          STORE s0, 24[36'd]
 024  01000                          LOAD s0, 00[0'd]                               ; etc
 025  2F025                          STORE s0, 25[37'd]
 026  010FE                          LOAD s0, FE[254'd]                             ; etc
 027  2F026                          STORE s0, 26[38'd]
 028  010FD                          LOAD s0, FD[253'd]                             ;
 029  2F027                          STORE s0, 27[39'd]
 02A  010FC                          LOAD s0, FC[252'd]                             ; etc
 02B  2F028                          STORE s0, 28[40'd]
 02C  010FC                          LOAD s0, FC[252'd]                             ; etc
 02D  2F029                          STORE s0, 29[41'd]
 02E  010FC                          LOAD s0, FC[252'd]                             ; etc
 02F  2F02A                          STORE s0, 2A[42'd]
 030  010FD                          LOAD s0, FD[253'd]                             ;
 031  2F02B                          STORE s0, 2B[43'd]
 032  010FE                          LOAD s0, FE[254'd]                             ; etc
 033  2F02C                          STORE s0, 2C[44'd]
 034  01000                          LOAD s0, 00[0'd]                               ; etc
 035  2F02D                          STORE s0, 2D[45'd]
 036                                 ;                LOAD      s0, 254'd             ; etc
 036                                 ;                   STORE     s0, 46'd
 036                                 ;                  LOAD      s0, 0'd             ;
 036                                 ;                 STORE     s0, 47'd
 036                                 ;                LOAD      s0, 247'd             ; etc
 036                                 ;               STORE     s0, 48'd
 036                                 ;              LOAD      s0, 0'd               ; etc
 036                                 ;             STORE     s0, 49'd
 036  0109F                          LOAD s0, 9F[StrtToneAInc]
 037  2F09C                          STORE s0, 9C[FirstToneInc]
 038  01069                          LOAD s0, 69[StrtToneBInc]
 039  2F09E                          STORE s0, 9E[FirstToneInc02]
 03A  0105A                          LOAD s0, 5A[StopToneAInc]
 03B  2F0A0                          STORE s0, A0[FirstToneInc04]
 03C  01078                          LOAD s0, 78[StopToneBInc]
 03D  2F0A2                          STORE s0, A2[FirstToneInc06]
 03E  0102A                          LOAD s0, 2A[42'd]
 03F  2D002                          OUTPUT s0, 02[SSBAmp]
 040  01000                          LOAD s0, 00
 041  2F012                          STORE s0, 12[State]                            ; Set state to 0 ie receive
 042  01C1E                          LOAD sC[SineCtr], 1E[startsine]                ; reset SineCtr
 043  01046                          LOAD s0, 46[HistoryStart]                      ;aargh - had commented this out!!!! May2013
 044  2F014                          STORE s0, 14[LVPtr]
 045                                 ; Initialise AGC
 045  010FF                          LOAD s0, FF[255'd]                             ; - 1
 046  2F00F                          STORE s0, 0F[VolSetting]
 047  0103F                          LOAD s0, 3F[63'd]                              ;Start with hig attenuation (max 63) value for external AGC MUX version
 048  2F00E                          STORE s0, 0E[AGCvalue]                         ;maybe start with 16 (was 8)?
 049  01F04                          LOAD sF[AveSignalUSB], 04[AGCInitial]          ; set signal averager to moderate level
 04A                                 ;                    LOAD      AveSignalUSB, AGClowthreshold       ; set signal averager to moderate level
 04A                                 ;                    ADD       AveSignalUSB, AGCuppthreshold       ; set signal averager to moderate level
 04A                                 ;     SR0       AveSignalUSB
 04A                                 ;                    LOAD   BaselineMSB,0
 04A                                 ; routine to take signal in s0,s1,s2 (MSB-LSB) and return 16bit signal in s0,s1 using AGC and volume settings
 04A                                 ; TO DOOOOOOOOOOOO
 04A                                 ; Routine to look at lowest bit of Strobe to detect rising edge.
 04A  09002           AwaitAudioVal: INPUT s0, 02[Strobe]
 04B  03001                          AND s0, 01                                     ; look only at lowest bit
 04C  1D001                          COMPARE s0, 01
 04D  3204A                          JUMP Z, 04A[AwaitAudioVal]                     ; if 1 wait...
 04E  09002               AwaitRise: INPUT s0, 02[Strobe]
 04F  03001                          AND s0, 01                                     ; look only at lowest bit
 050  1D000                          COMPARE s0, 00
 051  3204E                          JUMP Z, 04E[AwaitRise]                         ; if 0 still, wait a bit more...
 052  09001                          INPUT s0, 01[AudioLSB]                         ; Now have the new value (different addresses from before!)
 053  09100                          INPUT s1, 00[AudioMSB]
 054                                 ;      INPUT    s2,AudioUSB    ;not when using external MUX for AGC
 054                                 ;     OUTPUT     s1,Data2archiveLSB           ;This is received demodulated data - normally s0
 054                                 ;     OUTPUT     s2,Data2archiveMSB
 054                                 ; Temp sine wave simulation
 054                                 ;Display demodulated values always:
 054                                 ;     OUTPUT     s1,Data2archiveLSB
 054                                 ;     OUTPUT     s2,Data2archiveMSB
 054                                 ;                    ADD       SineCtr, audioTest
 054                                 ;                   COMP      SineCtr, 50'd         ; should be 50 with sine wave - extend to 70 for dirac!
 054                                 ;                  JUMP      C, contsine         ; skip over if still below 50
 054                                 ;                 SUB      SineCtr, 20'd  ; reset counter back to start (1 period)
 054                                 ;contsine:           FETCH     s1, SineCtr         ; put value of sine from table into AudioMSB
 054                                 ;                   LOAD      s2, 0
 054                                 ;                  LOAD    s0,0
 054                                 ;                 COMP      s1, 128             ; but is sine negative?
 054                                 ;                JUMP      C, skipneg
 054                                 ;               LOAD      s2, 255             ; interpret as negative number
 054                                 ;skipneg:
 054                                 ; now apply volume setting
 054                                 ; FETCH     s3, VolSetting
 054                                 ; CALL      AGC
 054                                 ;This part allows insertion of UART streamed values on RX and transmit - removed in GV42
 054                                 ;                FETCH     s3,State
 054                                 ;     AND    s3,4
 054                                 ;     COMP   s3,4        ;is this stream mode
 054                                 ;     CALL   Z,GetUartValues
 054                                 ;_____________________________________________________________
 054                                 ; perform automatic gain contrl
 054  0B30E                          FETCH s3, 0E[AGCvalue]
 055  201C9                          CALL 1C9[AGC]                                  ;Now with external MUX to adjust AGC
 056  2019E                          CALL 19E[Abs16Val]
 057  2F3A4                          STORE s3, A4[NormalisedMagMSB]
 058  2F2A5                          STORE s2, A5[NormalisedMagLSB]
 059                                 ;_______________Add Jan 2013 to increase volume without clipping____________Sept 2015 Not during transmit!
 059                                 ;        CALL AudioDouble
 059                                 ;        CALL AudioDouble     ;increase volume 12 dB!
 059                                 ;_____________________________________________________________________________
 059                                 ;Now check if we are transmitting this value!
 059  0B212                          FETCH s2, 12[State]
 05A  03202                          AND s2, 02
 05B  1D202                          COMPARE s2, 02                                 ; Check if transmit mode
 05C  32172                          JUMP Z, 172[TransmitAudio]
 05D                                 ; This section will only be performed in receive mode
 05D                                 ; Perform volume adjustment here **********To Be Done************************
 05D                                 ;            SL0   s0
 05D                                 ;           SLA  s1    ;double received signal to speaker
 05D                                 ;            SL0   s0
 05D                                 ;           SLA  s1    ;further double received signal to speaker BUT removed 31/12/12 as was clipping with AGC thresholds set
 05D                                 ;        CALL AudioDouble     ;increase volume another 6 dB on receive! - removed 28/5/13
 05D                                 ;_______________________________
 05D                                 ;Test value by sending out to Uart - shift this section as required - but check s3 not used! Removed for GV42 and GV45
 05D                                 ;       LOAD     s3, s1
 05D                                 ;       SRX   s3
 05D                                 ;                     OUT       s3, CmdToUser    ;Send receive signal in 7 bits (divide by 2!) to user pico to send to UART
 05D                                 ;__________________________________
 05D  20153                          CALL 153[AudioDouble]                          ;increase volume 6 dB! Add 2 of these 26/2/15
 05E  20153                          CALL 153[AudioDouble]                          ;increase volume 6 dB! stop March 16
 05F  2D100                          OUTPUT s1, 00[MSBAudio]
 060  2D001                          OUTPUT s0, 01[LSBAudio]
 061                                 ;Use same data now!
 061                                 ;       CALL AudioDouble     ;increase volume 6 dB! Add may 16
 061                                 ;       CALL AudioDouble     ;increase volume 6 dB!
 061                                 ;      AND s0, f8   ;Make bottom 3 bits zero in case is 13 bit linear and these are attenuation bits
 061  2D11B                          OUTPUT s1, 1B[MSBBTAudio]
 062  2D01C                          OUTPUT s0, 1C[LSBBTAudio]
 063                                 ;Display demodulated values only in receive
 063  2D00A                          OUTPUT s0, 0A[Data2archiveMSB]                 ;This is received demodulated data
 064  2D10B                          OUTPUT s1, 0B[Data2archiveLSB]
 065  14000                          SLA s0                                         ;shift top bit into carry
 066  13100                          ADDCY s1, 00                                   ;s1 now rounded value of upper 8 bits (but s0 wasted!)
 067                                 ;Disable for the moment!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 067                                 ;       CALL   AverageToneDemod ;Maybe stuck due to scratchpad not being 256 extended
 067                                 ; Check if there is a command from the User, return here with JUMP command from TransmitAudio macro
 067  09003    BackfromTransmitting: INPUT s0, 03[Command]                          ; Check if FIFO character present
 068  1D080                          COMPARE s0, 80[128'd]                          ; is there a character?
 069  382F0                          CALL C, 2F0[Respond2Fifo]
 06A                                 ; Accumulate magnitude
 06A                                 ;__________________________________________________________________________________________
 06A                                 ;Only do this 1 in 4 (8) times -add this part to Pete's Jan 2013 code - should give 1s time constant on AGC to try and reduce gain ramping up during quiet speech parts
 06A  0B372                          FETCH s3, 72[AGCcounter]
 06B  11301                          ADD s3, 01
 06C  2F372                          STORE s3, 72[AGCcounter]
 06D                                 ;            AND    s3,3   ;take only lowest 2 bits
 06D                                 ;            COMP    s3,0 ;skip 4 times (default 8?)
 06D                                 ;                   JUMP   NZ,AwaitAudioVal  ;if not 8th time then go back to start
 06D                                 ;                    LOAD   s3,0   Don't need to do this as lowest 2 bits are already zero
 06D                                 ;            STORE   s3,AGCcounter
 06D                                 ;NOW do it every time!
 06D                                 ;_____________________________________________________________________________________________
 06D                                 ;Need to overhaul this !! Oct2015
 06D                                 ;So do this bit at 8kHz rate - so has about a 1s time constant
 06D                                 ; Add 1/32 x abs(new normalised value - which is 256 times smaller than averaged value)
 06D  0920A                          INPUT s2, 0A[Status]
 06E  03206                          AND s2, 06                                     ;look at bit 1 and 2
 06F                                 ;In this version switching to BT input is through external multiplexer to go through emphasis filter
 06F  1D204                          COMPARE s2, 04                                 ;True if BT signal present and TX_high
 070  3204A                          JUMP Z, 04A[AwaitAudioVal]                     ;Don't do anything if on BT and TX_high
 071  0B3A4                          FETCH s3, A4[NormalisedMagMSB]
 072  0B2A5                          FETCH s2, A5[NormalisedMagLSB]                 ;These are absolute values
 073  20092                          CALL 092[Divide32]
 074  10D20                          ADD sD[AveSignalLSB], s2
 075  12E30                          ADDCY sE[AveSignalMSB], s3
 076  13F00                          ADDCY sF[AveSignalUSB], 00
 077                                 ; now subtract 1/8192 of current value of average
 077  003F0                          LOAD s3, sF[AveSignalUSB]
 078  002E0                          LOAD s2, sE[AveSignalMSB]                      ; These should be positive values!
 079  20092                          CALL 092[Divide32]
 07A  18D20                          SUB sD[AveSignalLSB], s2
 07B  1AE30                          SUBCY sE[AveSignalMSB], s3
 07C  1BF00                          SUBCY sF[AveSignalUSB], 00
 07D                                 ; Accumulate signed value - try to get DC offset - but apparently not used
 07D                                 ; Add 1/256 x abs(new normalised value)
 07D                                 ;                    FETCH      s3, NormalisedSignalMSB
 07D                                 ;                   LOAD      s4, 0
 07D                                 ;                  COMP      s3, 128
 07D                                 ;                 JUMP      C, ispos1           ; the signal is positive
 07D                                 ;                LOAD      s4, $FF             ; in case accum signed value is negative (which it could well be!!!
 07D                                 ;ispos1:             ADD       BaselineLSB, s3
 07D                                 ;                   ADDC      BaselineMSB, s4
 07D                                 ; now subtract 1/256of current baseline value
 07D                                 ;                    LOAD      s3, BaselineMSB
 07D                                 ;                  LOAD      s4, 0
 07D                                 ;                   COMP      s3, 128
 07D                                 ;                 JUMP      C, ispos2           ; the accumulated value is positive
 07D                                 ;                LOAD      s4, $FF             ; in case accum signed value is negative (which it could well be!!!
 07D                                 ;ispos2:             SUB       BaselineLSB, s3
 07D                                 ;                   SUBC      BaselineMSB, s4
 07D                                 ;TEMP DISPLAY of AveSignalMSB!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 07D  003F0                          LOAD s3, sF[AveSignalUSB]                      ;AveSignalMSB is actually a register!
 07E  2D318                          OUTPUT s3, 18[StopToneALong]
 07F  003E0                          LOAD s3, sE[AveSignalMSB]                      ;AveSignalMSB is actually a register!
 080  2D319                          OUTPUT s3, 19[StopToneB]
 081  003D0                          LOAD s3, sD[AveSignalLSB]                      ;AveSignalMSB is actually a register!
 082  2D31A                          OUTPUT s3, 1A[StopToneBLong]
 083  0B30E                          FETCH s3, 0E[AGCvalue]
 084  2D317                          OUTPUT s3, 17[StopToneA]                       ;TEMP !!!!!!!!!!!!!!!! send AGC value to this position
 085                                 ; Now adjust AGC value if necessary
 085  0B30E                          FETCH s3, 0E[AGCvalue]
 086  1DF0B                          COMPARE sF[AveSignalUSB], 0B[AGCuppthreshold4] ;Is really big? ie at threshold or above
 087  3C1BC                          CALL NC, 1BC[increaseAGC4]                     ; signal too big, increase attenuation by 12dB
 088  1DF08                          COMPARE sF[AveSignalUSB], 08[AGCuppthreshold2] ;Is pretty big
 089  3C1B7                          CALL NC, 1B7[increaseAGC2]                     ; signal too big, increase attenuation by 6dB
 08A  1DF05                          COMPARE sF[AveSignalUSB], 05[AGCuppthreshold]  ;or 18 or 9
 08B  3C1B2                          CALL NC, 1B2[increaseAGC]                      ; signal slightly too big, increase attenuation by 1_5dB
 08C  1DF01                          COMPARE sF[AveSignalUSB], 01[AGClowthreshold2] ;
 08D  381C4                          CALL C, 1C4[decreaseAGC2]                      ;ie below threshold2 (4 or below)
 08E  1DF03                          COMPARE sF[AveSignalUSB], 03[AGClowthreshold]  ; ie below threshold (7 or less)
 08F  381BF                          CALL C, 1BF[decreaseAGC]
 090  2F30E                          STORE s3, 0E[AGCvalue]
 091  2204A                          JUMP 04A[AwaitAudioVal]
 092                                 ; -------------This is end of main loop--------------------------------
 092                                 ;Routine to take 16 bit value in s3,s2 and shift right by 5 to divide by 32 and leave value in s3,s2
 092                                 ;Assumes this is an unsigned numbers - normally used on a magnitude.
 092  20097                Divide32: CALL 097[Divide4]
 093  20097                          CALL 097[Divide4]
 094  1430E                          SR0 s3
 095  14208                          SRA s2
 096  25000                          RETURN 
 097  1430E                 Divide4: SR0 s3
 098  14208                          SRA s2
 099  1430E                          SR0 s3
 09A  14208                          SRA s2
 09B  25000                          RETURN 
 09C  01101               SpeakerOn: LOAD s1, 01
 09D  2D111                          OUTPUT s1, 11[EnableSpeaker]
 09E  25000                          RETURN 
 09F  25000              SpeakerOff: RETURN                                         ;Disable for the moment
 0A0  01100                          LOAD s1, 00
 0A1  2D111                          OUTPUT s1, 11[EnableSpeaker]
 0A2  25000                          RETURN 
 0A3                                 ;Routines to average I and Q demodulated tone signals
 0A3                                 ;Check the amplitude of the demodulated and averaged signals compared to long average - AGCcounter==0 can be used to top up long average
 0A3                                 ;s7 used to note if LO is negative
 0A3                                 ;Enter with received signal MSB in s1 and try and keep in s8!
 0A3                                 ;first accumulate short and long averages of all tones I and Q
 0A3  00810        AverageToneDemod: LOAD s8, s1
 0A4  01600                          LOAD s6, 00                                    ;This will be used to count through 4 tones in the loop below
 0A5  01595               DemodLoop: LOAD s5, 95[StrtToneAPtrLSB]                   ;value of LSB of pointer to Scratchpad element for TonePtrs
 0A6  10560                          ADD s5, s6                                     ;Move up to ptr being treated
 0A7  0A050                          FETCH s0, (s5)                                 ;the tone pointer for the LSB should now be in s0
 0A8  0129C                          LOAD s2, 9C[FirstToneInc]                      ;Scratch address for StrtToneAInc
 0A9  10260                          ADD s2, s6
 0AA  0A420                          FETCH s4, (s2)                                 ;Get StrtToneAInc in s4 etc...
 0AB  19501                          SUB s5, 01                                     ;Back 1 index to MSB
 0AC  0A150                          FETCH s1, (s5)                                 ;the sinewave pointer for the MSB should now be in s1
 0AD  10040                          ADD s0, s4                                     ;Increment LSB!!
 0AE  13100                          ADDCY s1, 00                                   ;Add carry to MSB    ->This is OK as increment is positive
 0AF  2E150                          STORE s1, (s5)                                 ;Value of MSB of sinewave pointer has been incremented in scratch pad
 0B0  11501                          ADD s5, 01
 0B1  2E050                          STORE s0, (s5)                                 ;Value of LSB of pointer has been incremented in scratch pad
 0B2                                 ;now rotate 16 bit pointer to get 4 bits used to address the sinewave values
 0B2  14006                          SL0 s0
 0B3  14100                          SLA s1
 0B4  14006                          SL0 s0
 0B5  14100                          SLA s1
 0B6  0310F                          AND s1, 0F                                     ;keep lowest 4 bits to have pointer to one of 16 sinewave values
 0B7  00910                          LOAD s9, s1
 0B8  0A390                          FETCH s3, (s9)                                 ;get sinewave at ptr value in s9 and put in s3
 0B9  20126                          CALL 126[MultSigByLO]
 0BA                                 ;Now need to accumulate demodulated I value which is in s1:
 0BA                                 ;value to accumulate is in s1
 0BA  01275                          LOAD s2, 75[AveStrtToneALSB_I]                 ;This is load not FETCH as s2 is loaded with the pointer value to the first scratchpad average register
 0BB  2010D                          CALL 10D[DoAccumulate]
 0BC                                 ;Now treat Q_LO value
 0BC  11904                          ADD s9, 04                                     ;add 1/4 period
 0BD  0390F                          AND s9, 0F                                     ;keep lowest 4 bits to have pointer to one of 16 cosinewave values
 0BE  0A390                          FETCH s3, (s9)                                 ;get cosinewave at ptr value in s9 and put in s3
 0BF  20126                          CALL 126[MultSigByLO]
 0C0                                 ; accumulate demodulated Q value which is in s1:
 0C0  01285                          LOAD s2, 85[AveStrtToneALSB_Q]
 0C1  2010D                          CALL 10D[DoAccumulate]
 0C2  0B072                          FETCH s0, 72[AGCcounter]
 0C3  1D000                          COMPARE s0, 00
 0C4  30134                          CALL Z, 134[DolongAve]
 0C5                                 ;now check for end of looping
 0C5  11602                          ADD s6, 02                                     ;next tone
 0C6  1D608                          COMPARE s6, 08
 0C7  360A5                          JUMP NZ, 0A5[DemodLoop]                        ;loop if more tones to demodulate
 0C8                                 ;Now check amplitude of demodulated signals
 0C8  0B374                          FETCH s3, 74[AveStrtToneAMSB_I]
 0C9  201A7                          CALL 1A7[absval]                               ;Get the magnitude
 0CA  00030                          LOAD s0, s3                                    ;Abs value of ToneA_I in s0
 0CB  0B384                          FETCH s3, 84[AveStrtToneAMSB_Q]
 0CC  201A7                          CALL 1A7[absval]                               ;Get the magnitude
 0CD  10030                          ADD s0, s3                                     ;Abs value of ToneA_I +Q in s0
 0CE  14008                          SRA s0                                         ;Divide by 2 to get carry back into the s0 register
 0CF                                 ;    SR0 s0     ;Divide by 2 again
 0CF                                 ;    SR0 s0     ;Divide by 2 again - increase gain by further 4
 0CF  0B37C                          FETCH s3, 7C[LongAveStrtToneAMSB_I]
 0D0  201A7                          CALL 1A7[absval]                               ;Get the magnitude
 0D1  00130                          LOAD s1, s3                                    ;Abs value of ToneA_I in s1
 0D2  0B38C                          FETCH s3, 8C[LongAveStrtToneAMSB_Q]
 0D3  201A7                          CALL 1A7[absval]                               ;Get the magnitude
 0D4  10130                          ADD s1, s3                                     ;Abs value of ToneA_I +Q in s1
 0D5  14106                          SL0 s1                                         ;Multiply by 2 and assume the averaged value is small!
 0D6                                 ;Now s1 has long term average level and s0 has short term average value of start tone A (but 4 times smaller)
 0D6  2D013                          OUTPUT s0, 13[StartToneA]
 0D7  2D114                          OUTPUT s1, 14[StartToneALong]
 0D8  1C100                          COMPARE s1, s0                                 ;See if short term average is bigger than 4 times long term average (Carry will be set)
 0D9  3809C                          CALL C, 09C[SpeakerOn]
 0DA  0B376                          FETCH s3, 76[AveStrtToneBMSB_I]
 0DB  201A7                          CALL 1A7[absval]                               ;Get the magnitude
 0DC  00030                          LOAD s0, s3                                    ;Abs value of ToneA_I in s0
 0DD  0B386                          FETCH s3, 86[AveStrtToneBMSB_Q]
 0DE  201A7                          CALL 1A7[absval]                               ;Get the magnitude
 0DF  10030                          ADD s0, s3                                     ;Abs value of ToneA_I +Q in s0
 0E0  14008                          SRA s0                                         ;Divide by 2 to get carry back into the s0 register
 0E1                                 ;    SR0 s0     ;Divide by 2 again
 0E1                                 ;    SR0 s0     ;Divide by 2 again
 0E1  0B37E                          FETCH s3, 7E[LongAveStrtToneBMSB_I]
 0E2  201A7                          CALL 1A7[absval]                               ;Get the magnitude
 0E3  00130                          LOAD s1, s3                                    ;Abs value of ToneA_I in s0
 0E4  0B38E                          FETCH s3, 8E[LongAveStrtToneBMSB_Q]
 0E5  201A7                          CALL 1A7[absval]                               ;Get the magnitude
 0E6  10130                          ADD s1, s3                                     ;Abs value of ToneA_I +Q in s0
 0E7  14106                          SL0 s1                                         ;Multiply by 2 and assume the averaged value is small!
 0E8                                 ;Now s1 has long term average level and s0 has short term average value of start tone B (but 4 times smaller)
 0E8  2D015                          OUTPUT s0, 15[StartToneB]
 0E9  2D116                          OUTPUT s1, 16[StartToneBLong]
 0EA  1C100                          COMPARE s1, s0                                 ;See if short term average is bigger than 4 times long term average (Carry will be set)
 0EB  3809C                          CALL C, 09C[SpeakerOn]
 0EC  0B378                          FETCH s3, 78[AveStopToneAMSB_I]
 0ED  201A7                          CALL 1A7[absval]                               ;Get the magnitude
 0EE  00030                          LOAD s0, s3                                    ;Abs value of ToneA_I in s0
 0EF  0B388                          FETCH s3, 88[AveStopToneAMSB_Q]
 0F0  201A7                          CALL 1A7[absval]                               ;Get the magnitude
 0F1  10030                          ADD s0, s3                                     ;Abs value of ToneA_I +Q in s0
 0F2  14008                          SRA s0                                         ;Divide by 2 to get carry back into the s0 register
 0F3                                 ;    SR0 s0     ;Divide by 2 again
 0F3                                 ;    SR0 s0     ;Divide by 2 again
 0F3  0B380                          FETCH s3, 80[LongAveStopToneAMSB_I]
 0F4  201A7                          CALL 1A7[absval]                               ;Get the magnitude
 0F5  00130                          LOAD s1, s3                                    ;Abs value of ToneA_I in s0
 0F6  0B390                          FETCH s3, 90[LongAveStopToneAMSB_Q]
 0F7  201A7                          CALL 1A7[absval]                               ;Get the magnitude
 0F8  10130                          ADD s1, s3                                     ;Abs value of ToneA_I +Q in s0
 0F9  14106                          SL0 s1                                         ;Multiply by 2 and assume the averaged value is small!
 0FA                                 ;Now s1 has long term average level and s0 has short term average value of stop tone A (but 4 times smaller)
 0FA                                 ;    OUTPUT s0,StopToneA
 0FA                                 ; Moved earlier   LOAD s3,AveSignalMSB     ;AveSignalMSB is actually a register!
 0FA                                 ;    OUTPUT s3,StopToneALong
 0FA                                 ;    OUTPUT s1,StopToneALong
 0FA  1C100                          COMPARE s1, s0                                 ;See if short term average is bigger than 4 times long term average (Carry will be set)
 0FB  3809F                          CALL C, 09F[SpeakerOff]
 0FC  0B37A                          FETCH s3, 7A[AveStopToneBMSB_I]
 0FD  201A7                          CALL 1A7[absval]                               ;Get the magnitude
 0FE  00030                          LOAD s0, s3                                    ;Abs value of ToneA_I in s0
 0FF  0B38A                          FETCH s3, 8A[AveStopToneBMSB_Q]
 100  201A7                          CALL 1A7[absval]                               ;Get the magnitude
 101  10030                          ADD s0, s3                                     ;Abs value of ToneA_I +Q in s0
 102  14008                          SRA s0                                         ;Divide by 2 to get carry back into the s0 register
 103                                 ;    SR0 s0     ;Divide by 2 again
 103                                 ;    SR0 s0     ;Divide by 2 again
 103  0B382                          FETCH s3, 82[LongAveStopToneBMSB_I]
 104  201A7                          CALL 1A7[absval]                               ;Get the magnitude
 105  00130                          LOAD s1, s3                                    ;Abs value of ToneA_I in s0
 106  0B392                          FETCH s3, 92[LongAveStopToneBMSB_Q]
 107  201A7                          CALL 1A7[absval]                               ;Get the magnitude
 108  10130                          ADD s1, s3                                     ;Abs value of ToneA_I +Q in s0
 109  14106                          SL0 s1                                         ;Multiply by 2 and assume the averaged value is small!
 10A                                 ;Now s1 has long term average level and s0 has short term average value of stop tone B (but 4 times smaller)
 10A                                 ;    OUTPUT s0,StopToneB
 10A                                 ;   OUTPUT s1,StopToneBLong
 10A  1C100                          COMPARE s1, s0                                 ;See if short term average is bigger than 4 times long term average (Carry will be set)
 10B  3809F                          CALL C, 09F[SpeakerOff]
 10C  25000                          RETURN 
 10D                                 ;Does 16 bit signed accumulation of 8 bit signed value in s1 into s4/s5 which are recoverred from scratch pad pointed to by s2 (loading here the offset to the actual tone
 10D                                 ;dependent on how many times round the loop we are)
 10D  10260            DoAccumulate: ADD s2, s6
 10E  0A420                          FETCH s4, (s2)                                 ;Now Get AveSToneLSB_Is in s4 etc...
 10F  19201                          SUB s2, 01                                     ;step back to MSB
 110  0A520                          FETCH s5, (s2)                                 ;Get AveSToneMSB_Is in s5
 111  013FF                          LOAD s3, FF                                    ;Assume s1 is negative and use s3 for sign extension
 112  1D180                          COMPARE s1, 80[128'd]                          ;if s1 is 128 or bigger, then it is negative (carry not set)
 113  3E115                          JUMP NC, 115[negaccum]
 114  01300                          LOAD s3, 00                                    ;sign extend with zeros
 115  10410                negaccum: ADD s4, s1                                     ;Accumulate into averageLsB
 116  12530                          ADDCY s5, s3                                   ;do carry to add into upper byte (keeping carry from previous add!!)
 117  00050                          LOAD s0, s5
 118  1400A                          SRX s0
 119  1400A                          SRX s0                                         ;reduce value to subtract by factor 4 to increase integration time constant and gain.
 11A  13000                          ADDCY s0, 00                                   ;round up if necessary
 11B  18400                          SUB s4, s0
 11C  013FF                          LOAD s3, FF                                    ;Assume s5 is negative and use s3 for sign extension
 11D  1D580                          COMPARE s5, 80[128'd]                          ;is this a negative number?
 11E  3E120                          JUMP NC, 120[negdecrmnt]
 11F  01300                          LOAD s3, 00                                    ;do this if s5 is positive (sign extension)
 120  18400              negdecrmnt: SUB s4, s0
 121  1A530                          SUBCY s5, s3                                   ;subtract 1/256
 122  2E520                          STORE s5, (s2)
 123  11201                          ADD s2, 01                                     ;move down to LSB again
 124  2E420                          STORE s4, (s2)                                 ;update scratchpad values
 125  25000                          RETURN 
 126                                 ;Routine to do LO_I and LO_Q multiplications - LO value in s3 (enter with s3) and signal in s1 (recoverred here from s8) -> result in s1
 126  1D380             MultSigByLO: COMPARE s3, 80[128'd]
 127  3E147                          JUMP NC, 147[LOisNeg]                          ;Jump out if sinewave val is negative
 128  01700           BackFromLOPos: LOAD s7, 00                                    ;LO is not negative
 129  00180           BackFromLONeg: LOAD s1, s8                                    ;stick signal value back in s1
 12A  1D304                          COMPARE s3, 04                                 ;This is the ABSOLUTE value of the LO
 12B  3014A                          CALL Z, 14A[MultiplyBy4]
 12C  1D303                          COMPARE s3, 03                                 ;This is the ABSOLUTE value of the LO
 12D  3014F                          CALL Z, 14F[MultiplyBy3]
 12E  1D302                          COMPARE s3, 02                                 ;This is the ABSOLUTE value of the LO
 12F  3014D                          CALL Z, 14D[MultiplyBy2]
 130                                 ;if abs(LO)=1  do nothing
 130  1D701                          COMPARE s7, 01                                 ;was the LO value negative?
 131  35000                          RETURN NZ                                      ;return if positive
 132  201AE                          CALL 1AE[invertval]                            ;invert sign of s1 if negative
 133  25000                          RETURN 
 134                                 ;Routine every 256 cycles to update longer average
 134  01274               DolongAve: LOAD s2, 74[AveStrtToneAMSB_I]                 ;This is load not FETCH as s2 is loaded with the pointer value to the first scratchpad average register
 135  10260                          ADD s2, s6
 136  0A120                          FETCH s1, (s2)                                 ;Now Get AveSToneMSB_Is in s1 etc...
 137  11201                          ADD s2, 01
 138  0A020                          FETCH s0, (s2)                                 ;Now Get AveSToneLSB_Is in s0 etc...
 139  14000                          SLA s0
 13A  13100                          ADDCY s1, 00                                   ;should now be rounded correctly
 13B  0127D                          LOAD s2, 7D[LongAveStrtToneALSB_I]             ;This is load not FETCH as s2 is loaded with the pointer value to the first scratchpad average register
 13C  2010D                          CALL 10D[DoAccumulate]
 13D  01284                          LOAD s2, 84[AveStrtToneAMSB_Q]                 ;This is load not FETCH as s2 is loaded with the pointer value to the first scratchpad average register
 13E  10260                          ADD s2, s6
 13F  0A120                          FETCH s1, (s2)                                 ;Now Get AveSToneMSB_Qs in s1 etc...
 140  11201                          ADD s2, 01
 141  0A020                          FETCH s0, (s2)                                 ;Now Get AveSToneLSB_Qs in s0 etc...
 142  14000                          SLA s0
 143  13100                          ADDCY s1, 00                                   ;should now be rounded correctly
 144  0128D                          LOAD s2, 8D[LongAveStrtToneALSB_Q]
 145  2010D                          CALL 10D[DoAccumulate]
 146  25000                          RETURN 
 147                                 ;This inverts the sign of the LO sinewave to be positive, but notes this in a flag to take into account.
 147  01701                 LOisNeg: LOAD s7, 01                                    ;This means LO is negative
 148  201AA                          CALL 1AA[makeposval]
 149  22129                          JUMP 129[BackFromLONeg]
 14A                                 ;Multiplies value of s1 by 4 (SL0 X2)
 14A  14106             MultiplyBy4: SL0 s1
 14B  14106                          SL0 s1
 14C  25000                          RETURN 
 14D  14106             MultiplyBy2: SL0 s1
 14E  25000                          RETURN 
 14F  00410             MultiplyBy3: LOAD s4, s1
 150  14106                          SL0 s1
 151  10140                          ADD s1, s4
 152  25000                          RETURN 
 153                                 ;This routine aims to double the signed analoge value in s0,s1 by finding sign of the value and doubling if small, increasing magnitude by 32 if less than 95 but more than 32 then limiting to 127 if more than 95
 153  1D180             AudioDouble: COMPARE s1, 80[128'd]
 154  3A162                          JUMP C, 162[Posvalue]
 155                                 ;otherwise must be negative
 155  1D1E1                Negvalue: COMPARE s1, E1[225'd]                          ;256-31
 156  3A15A                          JUMP C, 15A[islessthanneg31]
 157  14006                          SL0 s0
 158  14100                          SLA s1                                         ;double value
 159  25000                          RETURN 
 15A  1D1C1         islessthanneg31: COMPARE s1, C1[193'd]                          ;256-63
 15B  3A15E                          JUMP C, 15E[islessthanneg63]
 15C  19120                          SUB s1, 20[32'd]
 15D  25000                          RETURN 
 15E  1410A         islessthanneg63: SRX s1
 15F  14008                          SRA s0                                         ;half value
 160  19140                          SUB s1, 40[64'd]
 161  25000                          RETURN 
 162  1D120                Posvalue: COMPARE s1, 20[32'd]
 163  3E167                          JUMP NC, 167[ismorethan31]
 164  14006                          SL0 s0
 165  14100                          SLA s1                                         ;double value
 166  25000                          RETURN 
 167  1D140            ismorethan31: COMPARE s1, 40[64'd]
 168  3E16B                          JUMP NC, 16B[ismorethan63]                     ;positive and 64 or greater
 169  11120                          ADD s1, 20[32'd]
 16A  25000                          RETURN 
 16B  1410A            ismorethan63: SRX s1                                         ;sign extension should be zero!
 16C  14008                          SRA s0
 16D  11140                          ADD s1, 40[64'd]
 16E  25000                          RETURN 
 16F                                 ;-----------End Audio double
 16F                                 ;Divides 16 bit signed value in s0,s1 by 2.
 16F  1410A                 Divide2: SRX s1
 170  14008                          SRA s0
 171  25000                          RETURN 
 172                                 ;SUB16bit:   SUB    s8,s0
 172                                 ;     SUBC   s9,s1    ;16 bit subtract
 172                                 ;     RETURN
 172                                 ;ADD16bit:   ADD    s8,s0
 172                                 ;     ADDC   s9,s1    ;16 bit addition
 172                                 ;     RETURN
 172                  TransmitAudio: 
 172                                 ;     IN  s2,Status
 172                                 ;     AND s2,2  ;look at bit 1
 172                                 ;In this version switching to BT input is through external multiplexer to go through emphasis filter
 172                                 ;     COMP s2,0  ;True if BT signal present
 172                                 ;     JUMP NZ,SkipNoBT   ;keep value from ADC if flag set
 172                                 ;     IN  s0,BTaudioLSB  ;Use BT values instead if present
 172                                 ;     IN  s1,BTaudioMSB
 172                                 ;     CALL AudioDouble     ;increase volume 6 dB!  14/3/15
 172                       SkipNoBT: 
 172                                 ;At this point we have audio value to transmit in s1,s0 so can add a tone here
 172                                 ;       CALL  ADDsinewave
 172                                 ;Nov 2014 - have reduced DSP AGC level, so shouldn't need to do this? -reinstate Feb2015
 172  1410A                          SRX s1                                         ;halve value before FIR to keep I and Q below $30 limit after FIR for CORDIC
 173  14008                          SRA s0
 174                                 ;Store data in RAM
 174                                 ;       OUTPUT     s0,Data2archiveLSB
 174                                 ;       OUTPUT     s1,Data2archiveMSB
 174  201FA                          CALL 1FA[PerformFIR]
 175                                 ;This should have decreased amplitude by about 6dB
 175  2D00A                          OUTPUT s0, 0A[Data2archiveMSB]
 176  2D10B                          OUTPUT s1, 0B[Data2archiveLSB]
 177                                 ;need to make sure that s3/s2 and s1/s0 DO NOT EXCEED $3000, ie 48 in the MSBs!
 177  20285                          CALL 285[cordic]                               ;This is upsettng the AGC when sinectr used sB!
 178  20192                          CALL 192[TryAndDouble]                         ;Bump amplitude to saturate! (Jan 2016)
 179  20192                          CALL 192[TryAndDouble]
 17A  20192                          CALL 192[TryAndDouble]
 17B  20192                          CALL 192[TryAndDouble]
 17C  20192                          CALL 192[TryAndDouble]                         ;try add for upgrade of production code
 17D                         OutAmp: 
 17D                                 ;_______________________________
 17D                                 ;Test value by sending out to Uart - shift this section as required - but check s3 not used! Disable in GV44a to allow receipt of other values!
 17D                                 ;       LOAD   s3,s1
 17D                                 ;       SRX   s3             ;make sure am not spoiling s3!!!!!
 17D                                 ;                     OUT       s3, CmdToUser    ;Send amp in 7 bits (divide by 2!) to user pico to send to UART
 17D                                 ;__________________________________
 17D  2D102                          OUTPUT s1, 02[SSBAmp]                          ;********************disable for beacon tests
 17E  0B310                          FETCH s3, 10[OldPhaseMSB]
 17F  0B219                          FETCH s2, 19[OldPhaseLSB]
 180  2F510                          STORE s5, 10[OldPhaseMSB]
 181  2F419                          STORE s4, 19[OldPhaseLSB]                      ;s2,3 old phase, s4,5 new phase
 182  2D30F                          OUTPUT s3, 0F[AudioPhaseMSB]                   ;send old phase directly
 183  2D210                          OUTPUT s2, 10[AudioPhaseLSB]                   ;send old phase directly
 184  18420                          SUB s4, s2
 185  1A530                          SUBCY s5, s3                                   ;New phase-old phase
 186  1450A                          SRX s5
 187  00350                          LOAD s3, s5                                    ;divide MSB by2 and copy
 188  1430A                          SRX s3
 189  1430A                          SRX s3                                         ;s5/4
 18A  10530                          ADD s5, s3
 18B  1430A                          SRX s3
 18C  1430A                          SRX s3                                         ;s5/16, s5 should now be 4/3rds of Phase shift/2^9, or 2/3rds of phase shift/2^8 (should be 2/3rds of s5/2^11) so need further 2^3 attenuaion)
 18D  10530                          ADD s5, s3
 18E  2D50D                          OUTPUT s5, 0D[PhaseIncrement]
 18F                                 ;     OUTPUT     s4,Data2archiveLSB         ;Use this if want to store phase
 18F                                 ;     OUTPUT     s5,Data2archiveMSB
 18F  0B30E                          FETCH s3, 0E[AGCvalue]
 190  2D317                          OUTPUT s3, 17[StopToneA]                       ;TEMP !!!!!!!!!!!!!!!! send AGC value to this position when transmitting
 191  22067                          JUMP 067[BackfromTransmitting]
 192  1D140            TryAndDouble: COMPARE s1, 40[64'd]                           ;see if it is not too big already
 193  3E197                          JUMP NC, 197[BiggerThan63]                     ;Skip if too big
 194  14006                          SL0 s0                                         ;add 6dB 4/10/11
 195  14100                          SLA s1
 196  25000                          RETURN 
 197  1D181            BiggerThan63: COMPARE s1, 81[129'd]
 198  3E19B                          JUMP NC, 19B[BiggerThan128]
 199  11140                          ADD s1, 40[64'd]
 19A  25000                          RETURN 
 19B  1410E           BiggerThan128: SR0 s1                                         ;half value (127 max value)
 19C  11180                          ADD s1, 80[128'd]                              ;add 128 (gives 255 max)
 19D  25000                          RETURN 
 19E                                 ;Enter with signed 16 bit value in s1,s0 and return magnitude in s3,s2
 19E  00310                Abs16Val: LOAD s3, s1
 19F  00200                          LOAD s2, s0
 1A0  1D180                          COMPARE s1, 80[128'd]
 1A1  39000                          RETURN C
 1A2  01300                          LOAD s3, 00
 1A3  01200                          LOAD s2, 00
 1A4  18200                          SUB s2, s0
 1A5  1A310                          SUBCY s3, s1
 1A6  25000                          RETURN 
 1A7  1D380                  absval: COMPARE s3, 80[128'd]
 1A8  3C1AA                          CALL NC, 1AA[makeposval]
 1A9  25000                          RETURN 
 1AA                                 ; Turn negative value in s3 into a positive one (well will actualy make a positive value negative as well).
 1AA  01400              makeposval: LOAD s4, 00
 1AB  18430                          SUB s4, s3
 1AC  00340                          LOAD s3, s4
 1AD  25000                          RETURN 
 1AE                                 ;invert value - actually same as makeposval, but works on s1
 1AE  01400               invertval: LOAD s4, 00
 1AF  18410                          SUB s4, s1
 1B0  00140                          LOAD s1, s4
 1B1  25000                          RETURN 
 1B2                                 ;Adds small amplitude roughly sinewave at 62.5Hz - not used (was to be used to add a sub-audio tone continuously)
 1B2                                 ;ADDsinewave:    FETCH   s2,AGCcounter
 1B2                                 ;       AND   s2,7
 1B2                                 ;       COMP     s2,0
 1B2                                 ;       JUMP    NZ,constsinectr
 1B2                                 ;       ADD    sinectr,1
 1B2                                 ;       COMP    sinectr, endsine+1
 1B2                                 ;       JUMP    NZ,constsinectr
 1B2                                 ;       LOAD    sinectr,startsine
 1B2                                 ;constsinectr:    FETCH    s3,sinectr
 1B2                                 ;       ADD    s1,s3      ;and hope it doesn't overflow!
 1B2                                 ;       RET
 1B2                                 ;Feb 2013 icrease number of AGC steps factor 2 and another factor 2 July 2013 (now granularity 1.5dB)
 1B2                                 ; increment attenuation
 1B2  1D33F             increaseAGC: COMPARE s3, 3F[63'd]                           ; was44
 1B3  31000                          RETURN Z                                       ; don't do anything if already 63 (was 44 (was 22, before that 11))
 1B4  01F04                          LOAD sF[AveSignalUSB], 04[AGCInitial]          ; set signal averager to moderate level
 1B5                                 ;                    LOAD      AveSignalUSB, AGClowthreshold       ; set signal averager to moderate level
 1B5                                 ;                    ADD       AveSignalUSB, AGCuppthreshold       ; set signal averager to moderate level
 1B5                                 ;     SR0       AveSignalUSB
 1B5  11301                          ADD s3, 01[1'd]                                ; so yes signal really has been too big for too long!
 1B6                                 ;           LOAD      s5, s3  ->this was just used when sending value to UART?
 1B6  25000                          RETURN 
 1B7                                 ;increase AGCvalue by 4 to give extra 6dB
 1B7  201B2            increaseAGC2: CALL 1B2[increaseAGC]
 1B8  201B2                          CALL 1B2[increaseAGC]
 1B9  201B2                          CALL 1B2[increaseAGC]
 1BA  201B2                          CALL 1B2[increaseAGC]
 1BB  25000                          RETURN 
 1BC  201B7            increaseAGC4: CALL 1B7[increaseAGC2]
 1BD  201B7                          CALL 1B7[increaseAGC2]
 1BE  25000                          RETURN 
 1BF                                 ; decrement attenuation
 1BF  1D300             decreaseAGC: COMPARE s3, 00                                 ; was232
 1C0  31000                          RETURN Z                                       ; don't do anything if already  0   (was 232 ie -24 (was 244, before that 250 ie -6) )
 1C1                                 ;    LOAD      s2,AveSignalMSB - this didn't seem to do anything (A0)
 1C1                                 ;       CALL     increase1_5dB
 1C1  01F04                          LOAD sF[AveSignalUSB], 04[AGCInitial]          ; set signal averager to moderate level
 1C2                                 ;                    LOAD      AveSignalUSB, AGClowthreshold       ; set signal averager to moderate level
 1C2                                 ;                    ADD       AveSignalUSB, AGCuppthreshold       ; set signal averager to moderate level
 1C2                                 ;     SR0       AveSignalUSB
 1C2  19301                          SUB s3, 01                                     ; so yes signal realy has been too small for too long!
 1C3                                 ; LOAD      s5, s3
 1C3                                 ; CALL      Export2User
 1C3  25000                          RETURN 
 1C4  201BF            decreaseAGC2: CALL 1BF[decreaseAGC]
 1C5  201BF                          CALL 1BF[decreaseAGC]
 1C6  201BF                          CALL 1BF[decreaseAGC]
 1C7  201BF                          CALL 1BF[decreaseAGC]
 1C8  25000                          RETURN 
 1C9                                 ; AGC takes 16 bit value, MSB in s1, LSB in s0 and returns normalised 16 bit value in s1,s0 using AGC value from s3, using external MUX for coarse control
 1C9                                 ;AGC value in s3 should vary  0-63 in this version - higher value is higher attenuation so use higher significant bits on input MUX (4 bits - 16 inputs)
 1C9                                 ; This routine can also be use for the volume setting if value put in s3 ????????
 1C9  0920A                     AGC: INPUT s2, 0A[Status]
 1CA  03206                          AND s2, 06                                     ;look at bit 1 and 2
 1CB                                 ;In this version switching to BT input is through external multiplexer to go through emphasis filter
 1CB  1D204                          COMPARE s2, 04                                 ;True if BT signal present and TX_high
 1CC  31000                          RETURN Z                                       ;Don't do anything if on BT and TX_high
 1CD  1430A                          SRX s3                                         ;divide s3 by 2 to get last AGC and put last bit into carry
 1CE  381E2                          CALL C, 1E2[decrease1_5dB]                     ;if last bit set then reduce by 3dB
 1CF  1430A                          SRX s3                                         ;divide s3 by 2 to get old AGC and put last bit into carry
 1D0  381D3                          CALL C, 1D3[decrease3dB]                       ;if last bit set then reduce by 3dB
 1D1  2D312                          OUTPUT s3, 12[MUXport]                         ;Now simply use remaining 4 bits to drive the MUX
 1D2  25000                          RETURN 
 1D3                                 ;AGCloop:            COMPARE      s3, 00
 1D3                                 ;                   RETURN       Z                   ; escape if AGC value zero
 1D3                                 ;                  SRX       s2
 1D3                                 ;                 SRA       s1
 1D3                                 ;                SRA       s0
 1D3                                 ;               SUB       s3, 1
 1D3                                 ;              JUMP      AGCloop
 1D3                                 ;negAGC:             COMP      s3, 0
 1D3                                 ;     RET       Z                   ; escape if AGC value zero
 1D3                                 ;                   SL0       s0      ;increase 24 bit value by 6dB
 1D3                                 ;                  SLA       s1
 1D3                                 ;                 SLA       s2
 1D3                                 ;                ADD       s3, 1
 1D3                                 ;               JUMP      negAGC
 1D3                                 ;this decreases value in (not s2),s1,s0 by factor 0.6875 (roughly 1/sqrt(2)) s2 not used with external MUX
 1D3  1410A             decrease3dB: SRX s1
 1D4  14008                          SRA s0
 1D5  00400                          LOAD s4, s0
 1D6  00510                          LOAD s5, s1
 1D7  1450A                          SRX s5
 1D8  14408                          SRA s4
 1D9  1450A                          SRX s5
 1DA  14408                          SRA s4
 1DB  10040                          ADD s0, s4
 1DC  12150                          ADDCY s1, s5
 1DD  1450A                          SRX s5
 1DE  14408                          SRA s4
 1DF  10040                          ADD s0, s4
 1E0  12150                          ADDCY s1, s5
 1E1  25000                          RETURN 
 1E2                                 ;multiply by 0.875 - modified for using only s1,s0
 1E2  1410A           decrease1_5dB: SRX s1
 1E3  14008                          SRA s0
 1E4  00400                          LOAD s4, s0
 1E5  00510                          LOAD s5, s1
 1E6  1450A                          SRX s5
 1E7  14408                          SRA s4
 1E8  10040                          ADD s0, s4
 1E9  12150                          ADDCY s1, s5
 1EA  1450A                          SRX s5
 1EB  14408                          SRA s4
 1EC  10040                          ADD s0, s4
 1ED  12150                          ADDCY s1, s5
 1EE  25000                          RETURN 
 1EF                                 ;multiply s2 by factor 1.25 (only used for AveSignalMSB) (not needed?)
 1EF                                 ;increase1_5dB:      LOAD   s6,s2
 1EF                                 ;     SRX       s6
 1EF                                 ;                   SRX       s6
 1EF                                 ;                  ADD    s2,s6
 1EF                                 ;
 1EF                                 ;     RET
 1EF                                 ;This is never called???????????????????
 1EF  01308                 AGCtest: LOAD s3, 08
 1F0  00010                          LOAD s0, s1
 1F1  00120                          LOAD s1, s2
 1F2  25000                          RETURN 
 1F3                                 ;This is never called???????????????????
 1F3  1D300              AGClooptst: COMPARE s3, 00
 1F4  31000                          RETURN Z                                       ; escape if AGC value zero
 1F5  1420A                          SRX s2
 1F6  14108                          SRA s1
 1F7  14008                          SRA s0
 1F8  19301                          SUB s3, 01
 1F9  221F3                          JUMP 1F3[AGClooptst]
 1FA                                 ; Routine to perform FIR takes new signal value in s1,s0 (s1 is MSB) and puts into scratch buffer and then outputs new filterred values for I in s1,s0 and Q in s3,s2
 1FA                                 ; First store latest value then increment LVptr
 1FA                                 ;OK Sept 2010
 1FA                                 ;reasonable match between I and Q components (within ~1dB), but about 6dB attenuation from input - OK.
 1FA  2D106              PerformFIR: OUTPUT s1, 06[SignalMSB]
 1FB  2D007                          OUTPUT s0, 07[SignalLSB]
 1FC  0B414                          FETCH s4, 14[LVPtr]                            ; value of the previous latest value
 1FD  11402                          ADD s4, 02                                     ; advance LVptr
 1FE  1D470                          COMPARE s4, 70[HistoryStart42]                 ; + 42
 1FF  3C266                          CALL NC, 266[resetLVptr]                       ; if gone past end of buffer reset pointer to start
 200  2F414                          STORE s4, 14[LVPtr]                            ; update incremented value of LVptr (by step +2)
 201  2E140                          STORE s1, (s4)                                 ; Store signalMSB at LVptr in scratch
 202  11401                          ADD s4, 01
 203  2E040                          STORE s0, (s4)                                 ; Store signalLSB at LVptr+1 in scratch
 204  19401                          SUB s4, 01                                     ; return to LVptr
 205  01A00                          LOAD sA, 00                                    ; Reset the register used for the difference between LVptr and Rptr (diff)
 206  2FA16                          STORE sA, 16[IaccuLSB]
 207  2FA15                          STORE sA, 15[IaccuMSB]
 208  2FA18                          STORE sA, 18[QaccuLSB]
 209  2FA17                          STORE sA, 17[QaccuMSB]                         ; Reset all accumulators
 20A                                 ; now start filter with roving pointer in s5 starting at LVptr
 20A                                 ; LOAD      s5, s4
 20A  2026B                          CALL 26B[UpdateRptr]                           ; this should be equivalent to previous line!
 20B  017F6                          LOAD s7, F6[coeffI0MSB]                        ; Smallest coefficients of I FIR - load values to go to multiplier input.
 20C  01692                          LOAD s6, 92[coeffI0LSB]
 20D  20231                          CALL 231[Ibussiness]
 20E  01700                          LOAD s7, 00[coeffQ0MSB]                        ; Smallest coefficients of Q FIR
 20F  016A7                          LOAD s6, A7[coeffQ0LSB]
 210  20237                          CALL 237[Qbussiness]
 211  017F4                          LOAD s7, F4[coeffI1MSB]                        ; coefficient of I FIR
 212  0168A                          LOAD s6, 8A[coeffI1LSB]
 213  20231                          CALL 231[Ibussiness]
 214  01705                          LOAD s7, 05[coeffQ1MSB]                        ; coefficient of Q FIR
 215  0162D                          LOAD s6, 2D[coeffQ1LSB]
 216  20237                          CALL 237[Qbussiness]
 217  017F2                          LOAD s7, F2[coeffI2MSB]                        ; coefficient of I FIR
 218  016CC                          LOAD s6, CC[coeffI2LSB]
 219  20231                          CALL 231[Ibussiness]
 21A  0170C                          LOAD s7, 0C[coeffQ2MSB]                        ; coefficient of Q FIR
 21B  01683                          LOAD s6, 83[coeffQ2LSB]
 21C  20237                          CALL 237[Qbussiness]
 21D  017F1                          LOAD s7, F1[coeffI3MSB]                        ; coefficient of I FIR
 21E  01677                          LOAD s6, 77[coeffI3LSB]
 21F  20231                          CALL 231[Ibussiness]
 220  0171B                          LOAD s7, 1B[coeffQ3MSB]                        ; coefficient of Q FIR
 221  0164F                          LOAD s6, 4F[coeffQ3LSB]
 222  20237                          CALL 237[Qbussiness]
 223  017F0                          LOAD s7, F0[coeffI4MSB]                        ; coefficient of I FIR
 224  016A1                          LOAD s6, A1[coeffI4LSB]
 225  20231                          CALL 231[Ibussiness]
 226  0175C                          LOAD s7, 5C[coeffQ4MSB]                        ; coefficient of Q FIR
 227  0162F                          LOAD s6, 2F[coeffQ4LSB]
 228  20237                          CALL 237[Qbussiness]
 229  01740                          LOAD s7, 40[coeffI5MSB]                        ; half of middle coefficient of I FIR
 22A  01600                          LOAD s6, 00[coeffI5LSB]
 22B  20231                          CALL 231[Ibussiness]                           ; Roving pointer is advanced an 11th time but is reset before being used!
 22C  0B016                          FETCH s0, 16[IaccuLSB]
 22D  0B115                          FETCH s1, 15[IaccuMSB]
 22E  0B218                          FETCH s2, 18[QaccuLSB]
 22F  0B317                          FETCH s3, 17[QaccuMSB]
 230  25000                          RETURN                                         ; return from PerformFIR
 231                                 ; These assume coefficient is in s6,7 (LSB,MSB)
 231  2023D              Ibussiness: CALL 23D[doIplus]
 232  20271                          CALL 271[conjugateDiff]                        ; Roving, difference pointer in sA sent to conjugate value and update roving pointer s5
 233  2023D                          CALL 23D[doIplus]
 234  20271                          CALL 271[conjugateDiff]                        ; Return difference pointer in sA from its conjugate value
 235  20268                          CALL 268[AdvanceRptr]                          ; This is relative shift to roving pointer (0->10 x2 ie 20)
 236  25000                          RETURN 
 237  20245              Qbussiness: CALL 245[doQplus]
 238  20271                          CALL 271[conjugateDiff]                        ; Roving, difference pointer in sA sent to conjugate value, also update roving pointer.
 239  2024D                          CALL 24D[doQminus]
 23A  20271                          CALL 271[conjugateDiff]                        ; Roving, difference pointer in sA sent to conjugate value, should go back to value before calling this function.
 23B  20268                          CALL 268[AdvanceRptr]                          ; This uses relative shift to roving pointer (0->10x2 ie 20), sA used for difference value.
 23C  25000                          RETURN 
 23D                                 ; These assume coefficient is in s6,7 (LSB,MSB) for doMult, so make sure it doesn't pollute it for the next time!
 23D  20255                 doIplus: CALL 255[doMult]
 23E  0B016                          FETCH s0, 16[IaccuLSB]
 23F  0B115                          FETCH s1, 15[IaccuMSB]
 240  10080                          ADD s0, s8
 241  12190                          ADDCY s1, s9
 242  2F016                          STORE s0, 16[IaccuLSB]
 243  2F115                          STORE s1, 15[IaccuMSB]
 244  25000                          RETURN 
 245  20255                 doQplus: CALL 255[doMult]
 246  0B018                          FETCH s0, 18[QaccuLSB]
 247  0B117                          FETCH s1, 17[QaccuMSB]
 248  10080                          ADD s0, s8
 249  12190                          ADDCY s1, s9
 24A  2F018                          STORE s0, 18[QaccuLSB]
 24B  2F117                          STORE s1, 17[QaccuMSB]
 24C  25000                          RETURN 
 24D  20255                doQminus: CALL 255[doMult]
 24E  0B018                          FETCH s0, 18[QaccuLSB]
 24F  0B117                          FETCH s1, 17[QaccuMSB]
 250  18080                          SUB s0, s8
 251  1A190                          SUBCY s1, s9
 252  2F018                          STORE s0, 18[QaccuLSB]
 253  2F117                          STORE s1, 17[QaccuMSB]
 254  25000                          RETURN 
 255                                 ; History signal is first output to SignalMSB and SignalLSB, the signal is then multiplied by the coefficient (provided in s6,7 - LSB,MSB) and the result is returned in s8,9 (LSB,MSB)
 255  20261                  doMult: CALL 261[GetRovingHistoryValues]
 256  2D106                          OUTPUT s1, 06[SignalMSB]
 257  2D007                          OUTPUT s0, 07[SignalLSB]                       ; Historical signal sent to multiplier
 258  2D704                          OUTPUT s7, 04[CoeffMSB]
 259  2D605                          OUTPUT s6, 05[CoeffLSB]
 25A  01000                          LOAD s0, 00
 25B  01000                          LOAD s0, 00
 25C  01000                          LOAD s0, 00                                    ; wait a bit (8 clock cycles enough?)
 25D  01000                          LOAD s0, 00
 25E  09904                          INPUT s9, 04[MltplyMSB]
 25F  09805                          INPUT s8, 05[MltplyLSB]
 260  25000                          RETURN 
 261  0A150  GetRovingHistoryValues: FETCH s1, (s5)                                 ; Historical SignalMSB
 262  11501                          ADD s5, 01
 263  0A050                          FETCH s0, (s5)                                 ; Historical SignalLSB
 264  19501                          SUB s5, 01                                     ; return s5 vlue as there will be another mult before updating s5!!
 265  25000                          RETURN 
 266                                 ; To reset LVptr to start of history rolling buffer space. LVptr is 'Last Value Pointer'
 266  01446              resetLVptr: LOAD s4, 46[HistoryStart]
 267  25000                          RETURN 
 268                                 ; and Rptr (Rptr is 'Roving Pointer'), next value (back 2 places), using advance of diff (sA) diff takes even values 0-40 inclusive (10 steps, ie 11 values, should never go beyond!, at each value conjugate point is also used. 11 value is diff=20 repeats itself at conjugate point)
 268  11A02             AdvanceRptr: ADD sA, 02                                     ; advance diff (goes from 0 to 20)
 269  2026B                          CALL 26B[UpdateRptr]
 26A  25000                          RETURN 
 26B                                 ; uses value of diff to update value of Rptr
 26B  00540              UpdateRptr: LOAD s5, s4                                    ; put LVptr in Rptr
 26C  185A0                          SUB s5, sA                                     ; take off value of diff (sA)
 26D  1D546                          COMPARE s5, 46[HistoryStart]
 26E  3D000                          RETURN NC                                      ; if not gone below bottom of buffer return!, else....
 26F  1152A                          ADD s5, 2A[42'd]                               ; send up again
 270  25000                          RETURN 
 271                                 ; - acts on diff (sA)
 271  01028           conjugateDiff: LOAD s0, 28[40'd]
 272  180A0                          SUB s0, sA                                     ; 40-sA
 273  00A00                          LOAD sA, s0                                    ; so sA is conjugate eg: 0->40,40->0, 20->20 etc
 274  2026B                          CALL 26B[UpdateRptr]                           ; calculate corresponding Rptr
 275  25000                          RETURN 
 276                                 ; the negative case means when the roving ptr is less than LVptr - is it done OK above 10 lines? diff is always positive (Rptr less than LVptr)
 276                                 ; conjugateneg:
 276                                 ; RET
 276                                 ; Takes value in s5 and converts to 2 ascii codes which are sent to the user picoblaze.
 276  20328             Export2User: CALL 328[Byte2Chars]
 277  2D603                          OUTPUT s6, 03[CmdToUser]
 278  2D703                          OUTPUT s7, 03[CmdToUser]
 279  0100D                          LOAD s0, 0D[13'd]                              ; terminate with CR
 27A  2D003                          OUTPUT s0, 03[CmdToUser]
 27B  0100A                          LOAD s0, 0A[10'd]                              ; and with LF
 27C  2D003                          OUTPUT s0, 03[CmdToUser]
 27D  25000                          RETURN 
 27E                                 ; Takes 16 bit value in s6,s7 (MSB,LSB) and outputs to the archive memory (write enabled and selected by user picoblaze)
 27E  2D60B             ArchiveData: OUTPUT s6, 0B[Data2archiveLSB]
 27F  2D70A                          OUTPUT s7, 0A[Data2archiveMSB]
 280  25000                          RETURN 
 281                                 ; Frequency works out the phase increment - (this is to ~7 bit precission, but using LSB could get 8 bit?)
 281                                 ; Takes phase in s4 (and s5) and uses old phase value from scratchpad (which is then updated). The phase increment is returned in s4.
 281  0B010               Frequency: FETCH s0, 10[OldPhaseMSB]
 282  2F410                          STORE s4, 10[OldPhaseMSB]
 283  18400                          SUB s4, s0
 284  25000                          RETURN 
 285                                 ; CORDIC  Takes I in s0(LSB)and s1(MSB) and Q in s2,s3 and returns the amplitude in s0,s1 and the phase in s4,s5. s8 is the loop counter
 285                                 ; Useable range is for I and Q up to about +/-$3000
 285  01400                  cordic: LOAD s4, 00
 286  01500                          LOAD s5, 00
 287  1D180                          COMPARE s1, 80[128'd]
 288  3C2BC                          CALL NC, 2BC[rotate90]                         ; if I negative then need to bring back into RH 2 quadrants.
 289                                 ; now enter loop
 289  01800                          LOAD s8, 00                                    ; counter of times to iterate.
 28A  00710              cordicloop: LOAD s7, s1                                    ; temporary store for I
 28B  00600                          LOAD s6, s0                                    ; temp store
 28C  1D380                          COMPARE s3, 80[128'd]                          ; is Q negative?
 28D  3E29C                          JUMP NC, 29C[posrotate]                        ; if negative rotate positive
 28E  00A20               negrotate: LOAD sA, s2
 28F  00B30                          LOAD sB, s3                                    ; put Q into working registers
 290  202B5                          CALL 2B5[shift]                                ; shift Q by the amount in s8
 291  100A0                          ADD s0, sA                                     ; add shifted Q to I
 292  121B0                          ADDCY s1, sB
 293  00A60                          LOAD sA, s6                                    ; prepare working registers (sA,sB) with original value of I
 294  00B70                          LOAD sB, s7
 295  202B5                          CALL 2B5[shift]
 296  182A0                          SUB s2, sA
 297  1A3B0                          SUBCY s3, sB
 298  202AD                          CALL 2AD[GetPhaseIncrement]
 299  184A0                          SUB s4, sA
 29A  1A5B0                          SUBCY s5, sB
 29B  222A9                          JUMP 2A9[testcordicend]
 29C  00A20               posrotate: LOAD sA, s2
 29D  00B30                          LOAD sB, s3                                    ; put Q into working registers
 29E  202B5                          CALL 2B5[shift]                                ; shift Q by the amount in s8
 29F  180A0                          SUB s0, sA                                     ; add shifted Q to I
 2A0  1A1B0                          SUBCY s1, sB
 2A1  00A60                          LOAD sA, s6                                    ; prepare working registers with original value of I
 2A2  00B70                          LOAD sB, s7
 2A3  202B5                          CALL 2B5[shift]
 2A4  102A0                          ADD s2, sA
 2A5  123B0                          ADDCY s3, sB
 2A6  202AD                          CALL 2AD[GetPhaseIncrement]
 2A7  104A0                          ADD s4, sA
 2A8  125B0                          ADDCY s5, sB
 2A9  11801           testcordicend: ADD s8, 01
 2AA  1D809                          COMPARE s8, 09[m_plus_1]                       ;m + 1
 2AB  3A28A                          JUMP C, 28A[cordicloop]
 2AC  25000                          RETURN 
 2AD                                 ; routine to lookup from the cordic look up table (scratchpad), the phase increment - stored as 8 bits at the location pointed to be s8, returned as 16 bits in sA and sB
 2AD                                 ; sB is MSB
 2AD  0AB80       GetPhaseIncrement: FETCH sB, (s8)
 2AE  14B0E                          SR0 sB
 2AF  14A08                          SRA sA
 2B0  14B0E                          SR0 sB
 2B1  14A08                          SRA sA
 2B2  14B0E                          SR0 sB
 2B3  14A08                          SRA sA                                         ; This multiplies the 8 bit stored value by 32 so that max scratchpad value 255->255*32 equivalent to 44.82degrees
 2B4  25000                          RETURN 
 2B5  00980                   shift: LOAD s9, s8
 2B6  1D900               shiftloop: COMPARE s9, 00
 2B7  31000                          RETURN Z
 2B8  19901                          SUB s9, 01
 2B9  14B0A                          SRX sB
 2BA  14A08                          SRA sA
 2BB  222B6                          JUMP 2B6[shiftloop]
 2BC  00710                rotate90: LOAD s7, s1                                    ; temporary store for I
 2BD  00600                          LOAD s6, s0                                    ; temp store
 2BE  1D380                          COMPARE s3, 80[128'd]                          ; is Q negative?
 2BF  3E2C9                          JUMP NC, 2C9[add90]                            ; if negative add 90
 2C0  00130                   sub90: LOAD s1, s3
 2C1  00020                          LOAD s0, s2                                    ; I=Q
 2C2  01200                          LOAD s2, 00
 2C3  01300                          LOAD s3, 00
 2C4  18260                          SUB s2, s6
 2C5  1A370                          SUBCY s3, s7                                   ; Q=-I
 2C6  19400                          SUB s4, 00[half_pi_LSB]
 2C7  1B540                          SUBCY s5, 40[half_pi_MSB]
 2C8  25000                          RETURN 
 2C9  01100                   add90: LOAD s1, 00
 2CA  01000                          LOAD s0, 00
 2CB  18020                          SUB s0, s2
 2CC  1A130                          SUBCY s1, s3                                   ; I=-Q
 2CD  00260                          LOAD s2, s6
 2CE  00370                          LOAD s3, s7                                    ; Q=I
 2CF  01400                          LOAD s4, 00[half_pi_LSB]
 2D0  01540                          LOAD s5, 40[half_pi_MSB]
 2D1  25000                          RETURN 
 2D2  0B112            Transmitmode: FETCH s1, 12[State]
 2D3  05102                          OR s1, 02
 2D4  2F112                          STORE s1, 12[State]                            ; set bit 1
 2D5  0B10E                          FETCH s1, 0E[AGCvalue]
 2D6  2F171                          STORE s1, 71[AGCvalueRX]
 2D7  0B170                          FETCH s1, 70[AGCvalueTX]                       ;recovers last used value for AGCvalur in this mode
 2D8  2F10E                          STORE s1, 0E[AGCvalue]
 2D9  25000                          RETURN 
 2DA                                 ;Streammode:   CALL Transmitmode
 2DA                                 ;     FETCH     s1, State
 2DA                                 ;                   OR        s1, 4
 2DA                                 ;                  STORE     s1, State           ; set bit 2
 2DA                                 ;     RET
 2DA                                 ;GetUartValues:  CALL      Get2Chars     ;Changed name of this routine
 2DA                                 ;     LOAD   s1,$AA     ;rough value
 2DA                                 ;     LOAD   s2,s5      ;now put into top byte
 2DA                                 ;     SRX    s2
 2DA                                 ;     SRA    s1      ;divide signal by 2
 2DA                                 ;     SRX    s2
 2DA                                 ;     SRA    s1      ;divide signal by 2 again
 2DA                                 ;     LOAD    s0,$AA      ;set lowest bits to rough value
 2DA                                 ;        RET
 2DA  0B10E          GrabTXAGCvalue: FETCH s1, 0E[AGCvalue]
 2DB  2F170                          STORE s1, 70[AGCvalueTX]
 2DC  25000                          RETURN 
 2DD  0B112             Receivemode: FETCH s1, 12[State]
 2DE  031FD                          AND s1, FD[253'd]                              ; 255 - 2
 2DF  2F112                          STORE s1, 12[State]                            ; reset bit 1
 2E0  0B10E                          FETCH s1, 0E[AGCvalue]
 2E1  2F170                          STORE s1, 70[AGCvalueTX]
 2E2  0B171                          FETCH s1, 71[AGCvalueRX]                       ;recovers last used value for AGCvalur in this mode
 2E3  2F10E                          STORE s1, 0E[AGCvalue]
 2E4  25000                          RETURN 
 2E5  011F0            BlockDSPpico: LOAD s1, F0[240'd]
 2E6  2D102                          OUTPUT s1, 02[SSBAmp]                          ; Set signal amp to high
 2E7  01100                          LOAD s1, 00
 2E8  2D10D                          OUTPUT s1, 0D[PhaseIncrement]                  ;Make sure phase doesn't wander
 2E9  09003                          INPUT s0, 03[Command]                          ; Check if FIFO character present
 2EA  1D080                          COMPARE s0, 80[128'd]                          ; is there a character?
 2EB  3E2E5                          JUMP NC, 2E5[BlockDSPpico]                     ; no command received so carry on blocking
 2EC  20304                          CALL 304[GetFifoChar]                          ;is command so get charcter
 2ED  1D052                          COMPARE s0, 52[82'd]                           ; character R
 2EE  31000                          RETURN Z                                       ;escape when R received from User Pico
 2EF  222E5                          JUMP 2E5[BlockDSPpico]
 2F0                                 ; Get fifo command and act on it.
 2F0                   Respond2Fifo: 
 2F0                                 ;         FETCH     s0,State
 2F0                                 ;     AND    s0,04
 2F0                                 ;     COMP   s0,04        ;is this stream mode
 2F0                                 ;     RETURN Z       ;if so then stick (no backing out!)
 2F0  20304                          CALL 304[GetFifoChar]
 2F1                                 ;     COMPARE   s0,51'd       ;character 3
 2F1                                 ;     CALL   Z,Streammode
 2F1  1D032                          COMPARE s0, 32[50'd]                           ; character 2
 2F2  302DA                          CALL Z, 2DA[GrabTXAGCvalue]                    ;need to get this before userpico sends warble
 2F3  1D031                          COMPARE s0, 31[49'd]                           ; character 1
 2F4  302D2                          CALL Z, 2D2[Transmitmode]
 2F5  1D030                          COMPARE s0, 30[48'd]                           ; character 0
 2F6  302DD                          CALL Z, 2DD[Receivemode]
 2F7  1D047                          COMPARE s0, 47[71'd]                           ; character G (request for AGCvalue info from userpico)
 2F8  302FE                          CALL Z, 2FE[SendGParamBack]
 2F9  1D053                          COMPARE s0, 53[83'd]                           ; character S (request for AVEsignal info from userpico)
 2FA  30301                          CALL Z, 301[SendSParamBack]
 2FB  1D042                          COMPARE s0, 42[66'd]                           ; character B (block)
 2FC  302E5                          CALL Z, 2E5[BlockDSPpico]
 2FD  25000                          RETURN 
 2FE                                 ;This can be adjusted for de-bugging AGCvalue
 2FE  0B50E          SendGParamBack: FETCH s5, 0E[AGCvalue]
 2FF  20276                          CALL 276[Export2User]
 300  25000                          RETURN 
 301                                 ;This can be adjusted for de-bugging AVEsignal
 301  005F0          SendSParamBack: LOAD s5, sF[AveSignalUSB]
 302  20276                          CALL 276[Export2User]
 303  25000                          RETURN 
 304                                 ; Routine to recover a character from the FIFO in s0
 304  01020             GetFifoChar: LOAD s0, 20[AckFIFO]
 305  2D00C                          OUTPUT s0, 0C[Controlbits]
 306  01020                          LOAD s0, 20[AckFIFO]                           ; Wait
 307  09003                          INPUT s0, 03[Command]                          ; now get my character
 308  0307F                          AND s0, 7F                                     ; mask off top bit
 309  25000                          RETURN 
 30A                                 ; routine to look at command input and recover 2 characters and return the byte they represent in s5.
 30A  09603               Get2Chars: INPUT s6, 03[Command]
 30B  1D680                          COMPARE s6, 80[128'd]                          ; if greater than 128, then no character
 30C  3E30A                          JUMP NC, 30A[Get2Chars]
 30D  20304                          CALL 304[GetFifoChar]
 30E  00600                          LOAD s6, s0
 30F  09703              Get2ndChar: INPUT s7, 03[Command]
 310  1D780                          COMPARE s7, 80[128'd]                          ; if greater than 128, then no character
 311  3E30F                          JUMP NC, 30F[Get2ndChar]
 312  20304                          CALL 304[GetFifoChar]
 313  00700                          LOAD s7, s0
 314  22315                          JUMP 315[Chars2Byte]
 315                                 ; Routine to take ascii codes in s6 and s7 and return a byte in s5 given by this character representation
 315  00860              Chars2Byte: LOAD s8, s6
 316  20320                          CALL 320[Get4bits]
 317  00580                          LOAD s5, s8
 318  14506                          SL0 s5
 319  14506                          SL0 s5
 31A  14506                          SL0 s5
 31B  14506                          SL0 s5                                         ; put these 4 bits to MSBs
 31C  00870                          LOAD s8, s7
 31D  20320                          CALL 320[Get4bits]
 31E  10580                          ADD s5, s8
 31F  25000                          RETURN 
 320                                 ; This routine takes an ascii code in s8 and returns a 4 bit value in s8
 320  1D83C                Get4bits: COMPARE s8, 3C[60'd]                           ; if character is 0-9 it is less than 60, if it is A-F then it is greater than 60
 321  3A325                          JUMP C, 325[char0_9]
 322  19837                          SUB s8, 37[55'd]                               ; assumes hex codes A-F are in capitals!!, A (code 65) gives 10...
 323  0380F                          AND s8, 0F                                     ; make sure only return 4 bits
 324  25000                          RETURN 
 325  19830                 char0_9: SUB s8, 30[48'd]
 326  0380F                          AND s8, 0F                                     ; make sure only return 4 bits
 327  25000                          RETURN 
 328                                 ; takes data in s5 and returns two ascii codes in s6,s7 (s7 is character for lower 4 bits)
 328  00850              Byte2Chars: LOAD s8, s5                                    ; assumes 8 bit data is in s5
 329  1450E                          SR0 s5
 32A  1450E                          SR0 s5
 32B  1450E                          SR0 s5
 32C  1450E                          SR0 s5                                         ; get first hex character
 32D  20334                          CALL 334[GetChar]
 32E  00650                          LOAD s6, s5                                    ; first ascii char
 32F  00580                          LOAD s5, s8
 330  0350F                          AND s5, 0F
 331  20334                          CALL 334[GetChar]                              ; send to LCD or UART
 332  00750                          LOAD s7, s5                                    ; second ascii char
 333  25000                          RETURN 
 334                                 ; routine to convert 4bit value in s5 to an ascii code, returned in s5
 334  1950A                 GetChar: SUB s5, 0A[10'd]                               ; Test if s5 greater than 9
 335  3A338                          JUMP C, 338[is_0_9]                            ; Hex character is 0_9
 336  11541                          ADD s5, 41[65'd]                               ; offset for Ascii code 'A'
 337  25000                          RETURN 
 338  1150A                  is_0_9: ADD s5, 0A[10'd]                               ; return to range 0-9
 339  11530                          ADD s5, 30[48'd]                               ; offset to Ascii code for '0'
 33A  25000                          RETURN 
 33B                                 ; Registers used s0, s1, s2, s3, s4 and s5.
 33B                                 ;
 33B  01500                delay_1s: LOAD s5, 00                                    ; clear cycle counter
 33C  01400                          LOAD s4, 00
 33D  2034E                 wait_1s: CALL 34E[delay_1ms]
 33E  11401                          ADD s4, 01                                     ; increment cycle counter
 33F  13500                          ADDCY s5, 00
 340  1D4E8                          COMPARE s4, E8[count_1000_lsb]                 ; test for 1000ms
 341  3633D                          JUMP NZ, 33D[wait_1s]
 342  1D503                          COMPARE s5, 03[count_1000_msb]
 343  3633D                          JUMP NZ, 33D[wait_1s]
 344  25000                          RETURN 
 345                                 ;
 345                                 ; Delays of approximately 200ms and 300ms used for LCD display scrolling
 345                                 ;
 345                                 ;
 345                                 ; Registers used s0, s1, s2, s3 and s4.
 345                                 ;
 345  20349             delay_300ms: CALL 349[delay_100ms]
 346  20349             delay_200ms: CALL 349[delay_100ms]
 347  20349                          CALL 349[delay_100ms]
 348  25000                          RETURN 
 349                                 ;
 349                                 ; Delay of approximately 100ms used for switch debounce
 349                                 ;
 349                                 ; Registers used s0, s1, s2, s3 and s4.
 349                                 ;
 349  01464             delay_100ms: LOAD s4, 64                                    ; repeat 1ms delay 100 times
 34A  2034E              wait_100ms: CALL 34E[delay_1ms]
 34B  19401                          SUB s4, 01
 34C  3634A                          JUMP NZ, 34A[wait_100ms]
 34D  25000                          RETURN 
 34E                                 ;
 34E                                 ; Delay of approximately 1ms required by LCD display
 34E                                 ;
 34E                                 ; Registers used s0, s1, s2 and s3.
 34E                                 ;
 34E  01300               delay_1ms: LOAD s3, 00                                    ; clear cycle counter
 34F  01200                          LOAD s2, 00
 350  2035D                wait_1ms: CALL 35D[delay_1us]
 351  11201                          ADD s2, 01                                     ; increment cycle counter
 352  13300                          ADDCY s3, 00
 353  1D2E8                          COMPARE s2, E8[count_1000_lsb]                 ; test for 1000us
 354  36350                          JUMP NZ, 350[wait_1ms]
 355  1D303                          COMPARE s3, 03[count_1000_msb]
 356  36350                          JUMP NZ, 350[wait_1ms]
 357  25000                          RETURN 
 358                                 ;
 358                                 ; Delay of approximately 50us required by LCD display
 358                                 ;
 358                                 ; Registers used s0 and s1.
 358                                 ;
 358  01132              delay_50us: LOAD s1, 32[50'd]                              ; repeat 1us delay 50 times
 359  2035D               wait_50us: CALL 35D[delay_1us]
 35A  19101                          SUB s1, 01
 35B  36359                          JUMP NZ, 359[wait_50us]
 35C  25000                          RETURN 
 35D                                 ; Delay of approximately 1us used to provide timing reference for
 35D                                 ; LCD operations. This must be adjusted to reflect the clock
 35D                                 ; applied to KCPSM3. The provided code is for a 50MHz clock rate.
 35D                                 ;
 35D                                 ; The software delay loop is formed using register s0. This register
 35D                                 ; must be loaded with an integer value close to the result of....
 35D                                 ;
 35D                                 ; value =  (clock_rate - 4)/4          Where 'clock_rate' is in MHz
 35D                                 ;
 35D                                 ; So for a 50MHz clock the value is (50-4)/4 = 11.5 and 12 would be used.
 35D                                 ; For clock rates below 8MHz the value of 1 must be used and the I2C bus
 35D                                 ; operation will become lower than the 100KHz target intended.
 35D                                 ;
 35D                                 ; Register used s0.
 35D                                 ;
 35D  01006               delay_1us: LOAD s0, 06[delay_1us_constant]                ; delay value of 12 decimal for a 50MHz clock
 35E  19001                wait_1us: SUB s0, 01
 35F  3635E                          JUMP NZ, 35E[wait_1us]
 360  25000                          RETURN 
 361                                 ;
 361                                 ;


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

Z:\home\graham\Dropbox\N3workingG\TE0722Rebuild\N3SysGen\DSPpico.psm



List of defined constants

 CONSTANT name         Value        Source PSM File

 timestamp_hours       10'd         
 timestamp_minutes     15'd         
 timestamp_seconds     56'd         
 datestamp_year        16'd         
 datestamp_month       6'd          
 datestamp_day         28'd         
 NUL                   00           
 BEL                   07           
 BS                    08           
 HT                    09           
 LF                    0A           
 VT                    0B           
 CR                    0D           
 ESC                   1B           
 DEL                   7F           
 DCS                   90           
 ST                    9C           
 AGClowthreshold       3'd          DSPpico.psm
 AGClowthreshold2      1'd          DSPpico.psm
 AGCInitial            4'd          DSPpico.psm
 AGCuppthreshold       5'd          DSPpico.psm
 AGCuppthreshold2      8'd          DSPpico.psm
 AGCuppthreshold4      11'd         DSPpico.psm
 delay_1us_constant    06           DSPpico.psm
 m                     8'd          DSPpico.psm
 m_plus_1              9'd          DSPpico.psm
 count_1000_lsb        E8           DSPpico.psm
 count_1000_msb        03           DSPpico.psm
 half_pi_LSB           00           DSPpico.psm
 half_pi_MSB           40           DSPpico.psm
 audioTest             2'd          DSPpico.psm
 StrtToneAInc          9F           DSPpico.psm
 StrtToneBInc          69           DSPpico.psm
 StopToneAInc          5A           DSPpico.psm
 StopToneBInc          78           DSPpico.psm
 coeffI0MSB            F6           DSPpico.psm
 coeffI0LSB            92           DSPpico.psm
 coeffI1MSB            F4           DSPpico.psm
 coeffI1LSB            8A           DSPpico.psm
 coeffI2MSB            F2           DSPpico.psm
 coeffI2LSB            CC           DSPpico.psm
 coeffI3MSB            F1           DSPpico.psm
 coeffI3LSB            77           DSPpico.psm
 coeffI4MSB            F0           DSPpico.psm
 coeffI4LSB            A1           DSPpico.psm
 coeffI5MSB            40           DSPpico.psm
 coeffI5LSB            00           DSPpico.psm
 coeffQ0MSB            00           DSPpico.psm
 coeffQ0LSB            A7           DSPpico.psm
 coeffQ1MSB            05           DSPpico.psm
 coeffQ1LSB            2D           DSPpico.psm
 coeffQ2MSB            0C           DSPpico.psm
 coeffQ2LSB            83           DSPpico.psm
 coeffQ3MSB            1B           DSPpico.psm
 coeffQ3LSB            4F           DSPpico.psm
 coeffQ4MSB            5C           DSPpico.psm
 coeffQ4LSB            2F           DSPpico.psm
 AudioMSB              0'd          DSPpico.psm
 AudioLSB              1'd          DSPpico.psm
 Strobe                2'd          DSPpico.psm
 Command               3'd          DSPpico.psm
 MltplyMSB             4'd          DSPpico.psm
 MltplyLSB             5'd          DSPpico.psm
 BTaudioMSB            6'd          DSPpico.psm
 BTaudioLSB            7'd          DSPpico.psm
 RAMdataMSB            8'd          DSPpico.psm
 RAMdataLSB            9'd          DSPpico.psm
 Status                10'd         DSPpico.psm
 MSBAudio              0'd          DSPpico.psm
 LSBAudio              1'd          DSPpico.psm
 SSBAmp                2'd          DSPpico.psm
 CmdToUser             3'd          DSPpico.psm
 CoeffMSB              4'd          DSPpico.psm
 CoeffLSB              5'd          DSPpico.psm
 SignalMSB             6'd          DSPpico.psm
 SignalLSB             7'd          DSPpico.psm
 Data2archiveMSB       10'd         DSPpico.psm
 Data2archiveLSB       11'd         DSPpico.psm
 Controlbits           12'd         DSPpico.psm
 EnMult                1'd          DSPpico.psm
 AckFIFO               32'd         DSPpico.psm
 PhaseIncrement        13'd         DSPpico.psm
 AudioFreqLSB          14'd         DSPpico.psm
 AudioPhaseMSB         15'd         DSPpico.psm
 AudioPhaseLSB         16'd         DSPpico.psm
 EnableSpeaker         17'd         DSPpico.psm
 MUXport               18'd         DSPpico.psm
 StartToneA            19'd         DSPpico.psm
 StartToneALong        20'd         DSPpico.psm
 StartToneB            21'd         DSPpico.psm
 StartToneBLong        22'd         DSPpico.psm
 StopToneA             23'd         DSPpico.psm
 StopToneALong         24'd         DSPpico.psm
 StopToneB             25'd         DSPpico.psm
 StopToneBLong         26'd         DSPpico.psm
 MSBBTAudio            27'd         DSPpico.psm
 LSBBTAudio            28'd         DSPpico.psm
 AmpMSB                10'd         DSPpico.psm
 AmpLSB                11'd         DSPpico.psm
 PhaseMSB              12'd         DSPpico.psm
 PhaseLSB              13'd         DSPpico.psm
 AGCvalue              14'd         DSPpico.psm
 VolSetting            15'd         DSPpico.psm
 OldPhaseMSB           16'd         DSPpico.psm
 AudioScratch          17'd         DSPpico.psm
 State                 18'd         DSPpico.psm
 LVPtr                 20'd         DSPpico.psm
 IaccuMSB              21'd         DSPpico.psm
 IaccuLSB              22'd         DSPpico.psm
 QaccuMSB              23'd         DSPpico.psm
 QaccuLSB              24'd         DSPpico.psm
 OldPhaseLSB           25'd         DSPpico.psm
 startsine             30'd         DSPpico.psm
 endsine               45'd         DSPpico.psm
 HistoryStart          70'd         DSPpico.psm
 HistoryStart42        112'd        DSPpico.psm
 AGCvalueTX            112'd        DSPpico.psm
 AGCvalueRX            113'd        DSPpico.psm
 AGCcounter            114'd        DSPpico.psm
 UARTBitshift          115'd        DSPpico.psm
 AveStrtToneAMSB_I     116'd        DSPpico.psm
 AveStrtToneALSB_I     117'd        DSPpico.psm
 AveStrtToneBMSB_I     118'd        DSPpico.psm
 AveStrtToneBLSB_I     119'd        DSPpico.psm
 AveStopToneAMSB_I     120'd        DSPpico.psm
 AveStopToneALSB_I     121'd        DSPpico.psm
 AveStopToneBMSB_I     122'd        DSPpico.psm
 AveStopToneBLSB_I     123'd        DSPpico.psm
 LongAveStrtToneAMSB_I 124'd        DSPpico.psm
 LongAveStrtToneALSB_I 125'd        DSPpico.psm
 LongAveStrtToneBMSB_I 126'd        DSPpico.psm
 LongAveStrtToneBLSB_I 127'd        DSPpico.psm
 LongAveStopToneAMSB_I 128'd        DSPpico.psm
 LongAveStopToneALSB_I 129'd        DSPpico.psm
 LongAveStopToneBMSB_I 130'd        DSPpico.psm
 LongAveStopToneBLSB_I 131'd        DSPpico.psm
 AveStrtToneAMSB_Q     132'd        DSPpico.psm
 AveStrtToneALSB_Q     133'd        DSPpico.psm
 AveStrtToneBMSB_Q     134'd        DSPpico.psm
 AveStrtToneBLSB_Q     135'd        DSPpico.psm
 AveStopToneAMSB_Q     136'd        DSPpico.psm
 AveStopToneALSB_Q     137'd        DSPpico.psm
 AveStopToneBMSB_Q     138'd        DSPpico.psm
 AveStopToneBLSB_Q     139'd        DSPpico.psm
 LongAveStrtToneAMSB_Q 140'd        DSPpico.psm
 LongAveStrtToneALSB_Q 141'd        DSPpico.psm
 LongAveStrtToneBMSB_Q 142'd        DSPpico.psm
 LongAveStrtToneBLSB_Q 143'd        DSPpico.psm
 LongAveStopToneAMSB_Q 144'd        DSPpico.psm
 LongAveStopToneALSB_Q 145'd        DSPpico.psm
 LongAveStopToneBMSB_Q 146'd        DSPpico.psm
 LongAveStopToneBLSB_Q 147'd        DSPpico.psm
 StrtToneAPtrMSB       148'd        DSPpico.psm
 StrtToneAPtrLSB       149'd        DSPpico.psm
 StrtToneBPtrMSB       150'd        DSPpico.psm
 StrtToneBPtrLSB       151'd        DSPpico.psm
 StopToneAPtrMSB       152'd        DSPpico.psm
 StopToneAPtrLSB       153'd        DSPpico.psm
 StopToneBPtrMSB       154'd        DSPpico.psm
 StopToneBPtrLSB       155'd        DSPpico.psm
 FirstToneInc          156'd        DSPpico.psm
 FirstToneInc02        158'd        DSPpico.psm
 FirstToneInc04        160'd        DSPpico.psm
 FirstToneInc06        162'd        DSPpico.psm
 NormalisedMagMSB      164'd        DSPpico.psm
 NormalisedMagLSB      165'd        DSPpico.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.63"        
 datestamp$        "28 Jun 2016"  
 timestamp$        "10:15:56"     



List of line labels

   Label                    Addr  Source PSM File

 * cold_start               000   DSPpico.psm
   AwaitAudioVal            04A   DSPpico.psm
   AwaitRise                04E   DSPpico.psm
   BackfromTransmitting     067   DSPpico.psm
   Divide32                 092   DSPpico.psm
   Divide4                  097   DSPpico.psm
   SpeakerOn                09C   DSPpico.psm
   SpeakerOff               09F   DSPpico.psm
 * AverageToneDemod         0A3   DSPpico.psm
   DemodLoop                0A5   DSPpico.psm
   DoAccumulate             10D   DSPpico.psm
   negaccum                 115   DSPpico.psm
   negdecrmnt               120   DSPpico.psm
   MultSigByLO              126   DSPpico.psm
 * BackFromLOPos            128   DSPpico.psm
   BackFromLONeg            129   DSPpico.psm
   DolongAve                134   DSPpico.psm
   LOisNeg                  147   DSPpico.psm
   MultiplyBy4              14A   DSPpico.psm
   MultiplyBy2              14D   DSPpico.psm
   MultiplyBy3              14F   DSPpico.psm
   AudioDouble              153   DSPpico.psm
 * Negvalue                 155   DSPpico.psm
   islessthanneg31          15A   DSPpico.psm
   islessthanneg63          15E   DSPpico.psm
   Posvalue                 162   DSPpico.psm
   ismorethan31             167   DSPpico.psm
   ismorethan63             16B   DSPpico.psm
 * Divide2                  16F   DSPpico.psm
   TransmitAudio            172   DSPpico.psm
 * SkipNoBT                 172   DSPpico.psm
 * OutAmp                   17D   DSPpico.psm
   TryAndDouble             192   DSPpico.psm
   BiggerThan63             197   DSPpico.psm
   BiggerThan128            19B   DSPpico.psm
   Abs16Val                 19E   DSPpico.psm
   absval                   1A7   DSPpico.psm
   makeposval               1AA   DSPpico.psm
   invertval                1AE   DSPpico.psm
   increaseAGC              1B2   DSPpico.psm
   increaseAGC2             1B7   DSPpico.psm
   increaseAGC4             1BC   DSPpico.psm
   decreaseAGC              1BF   DSPpico.psm
   decreaseAGC2             1C4   DSPpico.psm
   AGC                      1C9   DSPpico.psm
   decrease3dB              1D3   DSPpico.psm
   decrease1_5dB            1E2   DSPpico.psm
 * AGCtest                  1EF   DSPpico.psm
   AGClooptst               1F3   DSPpico.psm
   PerformFIR               1FA   DSPpico.psm
   Ibussiness               231   DSPpico.psm
   Qbussiness               237   DSPpico.psm
   doIplus                  23D   DSPpico.psm
   doQplus                  245   DSPpico.psm
   doQminus                 24D   DSPpico.psm
   doMult                   255   DSPpico.psm
   GetRovingHistoryValues   261   DSPpico.psm
   resetLVptr               266   DSPpico.psm
   AdvanceRptr              268   DSPpico.psm
   UpdateRptr               26B   DSPpico.psm
   conjugateDiff            271   DSPpico.psm
   Export2User              276   DSPpico.psm
 * ArchiveData              27E   DSPpico.psm
 * Frequency                281   DSPpico.psm
   cordic                   285   DSPpico.psm
   cordicloop               28A   DSPpico.psm
 * negrotate                28E   DSPpico.psm
   posrotate                29C   DSPpico.psm
   testcordicend            2A9   DSPpico.psm
   GetPhaseIncrement        2AD   DSPpico.psm
   shift                    2B5   DSPpico.psm
   shiftloop                2B6   DSPpico.psm
   rotate90                 2BC   DSPpico.psm
 * sub90                    2C0   DSPpico.psm
   add90                    2C9   DSPpico.psm
   Transmitmode             2D2   DSPpico.psm
   GrabTXAGCvalue           2DA   DSPpico.psm
   Receivemode              2DD   DSPpico.psm
   BlockDSPpico             2E5   DSPpico.psm
   Respond2Fifo             2F0   DSPpico.psm
   SendGParamBack           2FE   DSPpico.psm
   SendSParamBack           301   DSPpico.psm
   GetFifoChar              304   DSPpico.psm
   Get2Chars                30A   DSPpico.psm
   Get2ndChar               30F   DSPpico.psm
   Chars2Byte               315   DSPpico.psm
   Get4bits                 320   DSPpico.psm
   char0_9                  325   DSPpico.psm
   Byte2Chars               328   DSPpico.psm
   GetChar                  334   DSPpico.psm
   is_0_9                   338   DSPpico.psm
 * delay_1s                 33B   DSPpico.psm
   wait_1s                  33D   DSPpico.psm
 * delay_300ms              345   DSPpico.psm
 * delay_200ms              346   DSPpico.psm
   delay_100ms              349   DSPpico.psm
   wait_100ms               34A   DSPpico.psm
   delay_1ms                34E   DSPpico.psm
   wait_1ms                 350   DSPpico.psm
 * delay_50us               358   DSPpico.psm
   wait_50us                359   DSPpico.psm
   delay_1us                35D   DSPpico.psm
   wait_1us                 35E   DSPpico.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD            171
 STAR              -

 AND              12
 OR                1
 XOR               -

 ADD              52
 ADDCY            19
 SUB              32
 SUBCY            12

 TEST              -
 TESTCY            -
 COMPARE          58
 COMPARECY         -

 SL0              17
 SL1               -
 SLX               -
 SLA               8
 RL                -
 SR0              11
 SR1               -
 SRX              22
 SRA              24
 RR                -

 REGBANK           -

 INPUT            13
 OUTPUT           40
 OUTPUTK           -

 STORE            61
 FETCH            61

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             38
 JUMP@             -
 CALL            126
 CALL@             -
 RETURN           82
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
